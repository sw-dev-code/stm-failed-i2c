
SubGHz_Phy_PingPong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a88  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  08008b48  08008b48  00018b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800905c  0800905c  0001905c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009064  08009064  00019064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009068  08009068  00019068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  20000000  0800906c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000080c  20000094  08009100  00020094  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200008a0  08009100  000208a0  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 10 .debug_info   00031ab4  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007985  00000000  00000000  00051b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001858  00000000  00000000  000594f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002218  00000000  00000000  0005ad50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0001c5af  00000000  00000000  0005cf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002cc27  00000000  00000000  00079517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0009b50f  00000000  00000000  000a613e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0014164d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005088  00000000  00000000  001416a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    000134d1  00000000  00000000  00146728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000094 	.word	0x20000094
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008b30 	.word	0x08008b30

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000098 	.word	0x20000098
 8000104:	08008b30 	.word	0x08008b30

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__gnu_thumb1_case_uhi>:
 8000154:	b403      	push	{r0, r1}
 8000156:	4671      	mov	r1, lr
 8000158:	0849      	lsrs	r1, r1, #1
 800015a:	0040      	lsls	r0, r0, #1
 800015c:	0049      	lsls	r1, r1, #1
 800015e:	5a09      	ldrh	r1, [r1, r0]
 8000160:	0049      	lsls	r1, r1, #1
 8000162:	448e      	add	lr, r1
 8000164:	bc03      	pop	{r0, r1}
 8000166:	4770      	bx	lr

08000168 <__udivsi3>:
 8000168:	2200      	movs	r2, #0
 800016a:	0843      	lsrs	r3, r0, #1
 800016c:	428b      	cmp	r3, r1
 800016e:	d374      	bcc.n	800025a <__udivsi3+0xf2>
 8000170:	0903      	lsrs	r3, r0, #4
 8000172:	428b      	cmp	r3, r1
 8000174:	d35f      	bcc.n	8000236 <__udivsi3+0xce>
 8000176:	0a03      	lsrs	r3, r0, #8
 8000178:	428b      	cmp	r3, r1
 800017a:	d344      	bcc.n	8000206 <__udivsi3+0x9e>
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d328      	bcc.n	80001d4 <__udivsi3+0x6c>
 8000182:	0c03      	lsrs	r3, r0, #16
 8000184:	428b      	cmp	r3, r1
 8000186:	d30d      	bcc.n	80001a4 <__udivsi3+0x3c>
 8000188:	22ff      	movs	r2, #255	; 0xff
 800018a:	0209      	lsls	r1, r1, #8
 800018c:	ba12      	rev	r2, r2
 800018e:	0c03      	lsrs	r3, r0, #16
 8000190:	428b      	cmp	r3, r1
 8000192:	d302      	bcc.n	800019a <__udivsi3+0x32>
 8000194:	1212      	asrs	r2, r2, #8
 8000196:	0209      	lsls	r1, r1, #8
 8000198:	d065      	beq.n	8000266 <__udivsi3+0xfe>
 800019a:	0b03      	lsrs	r3, r0, #12
 800019c:	428b      	cmp	r3, r1
 800019e:	d319      	bcc.n	80001d4 <__udivsi3+0x6c>
 80001a0:	e000      	b.n	80001a4 <__udivsi3+0x3c>
 80001a2:	0a09      	lsrs	r1, r1, #8
 80001a4:	0bc3      	lsrs	r3, r0, #15
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x46>
 80001aa:	03cb      	lsls	r3, r1, #15
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b83      	lsrs	r3, r0, #14
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x52>
 80001b6:	038b      	lsls	r3, r1, #14
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0b43      	lsrs	r3, r0, #13
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x5e>
 80001c2:	034b      	lsls	r3, r1, #13
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0b03      	lsrs	r3, r0, #12
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x6a>
 80001ce:	030b      	lsls	r3, r1, #12
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0ac3      	lsrs	r3, r0, #11
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x76>
 80001da:	02cb      	lsls	r3, r1, #11
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a83      	lsrs	r3, r0, #10
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x82>
 80001e6:	028b      	lsls	r3, r1, #10
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0a43      	lsrs	r3, r0, #9
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x8e>
 80001f2:	024b      	lsls	r3, r1, #9
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0a03      	lsrs	r3, r0, #8
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x9a>
 80001fe:	020b      	lsls	r3, r1, #8
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	d2cd      	bcs.n	80001a2 <__udivsi3+0x3a>
 8000206:	09c3      	lsrs	r3, r0, #7
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xa8>
 800020c:	01cb      	lsls	r3, r1, #7
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0983      	lsrs	r3, r0, #6
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xb4>
 8000218:	018b      	lsls	r3, r1, #6
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0943      	lsrs	r3, r0, #5
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xc0>
 8000224:	014b      	lsls	r3, r1, #5
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xcc>
 8000230:	010b      	lsls	r3, r1, #4
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	08c3      	lsrs	r3, r0, #3
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xd8>
 800023c:	00cb      	lsls	r3, r1, #3
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	0883      	lsrs	r3, r0, #2
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xe4>
 8000248:	008b      	lsls	r3, r1, #2
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0843      	lsrs	r3, r0, #1
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xf0>
 8000254:	004b      	lsls	r3, r1, #1
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	1a41      	subs	r1, r0, r1
 800025c:	d200      	bcs.n	8000260 <__udivsi3+0xf8>
 800025e:	4601      	mov	r1, r0
 8000260:	4152      	adcs	r2, r2
 8000262:	4610      	mov	r0, r2
 8000264:	4770      	bx	lr
 8000266:	e7ff      	b.n	8000268 <__udivsi3+0x100>
 8000268:	b501      	push	{r0, lr}
 800026a:	2000      	movs	r0, #0
 800026c:	f000 f8f0 	bl	8000450 <__aeabi_idiv0>
 8000270:	bd02      	pop	{r1, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_uidivmod>:
 8000274:	2900      	cmp	r1, #0
 8000276:	d0f7      	beq.n	8000268 <__udivsi3+0x100>
 8000278:	e776      	b.n	8000168 <__udivsi3>
 800027a:	4770      	bx	lr

0800027c <__divsi3>:
 800027c:	4603      	mov	r3, r0
 800027e:	430b      	orrs	r3, r1
 8000280:	d47f      	bmi.n	8000382 <__divsi3+0x106>
 8000282:	2200      	movs	r2, #0
 8000284:	0843      	lsrs	r3, r0, #1
 8000286:	428b      	cmp	r3, r1
 8000288:	d374      	bcc.n	8000374 <__divsi3+0xf8>
 800028a:	0903      	lsrs	r3, r0, #4
 800028c:	428b      	cmp	r3, r1
 800028e:	d35f      	bcc.n	8000350 <__divsi3+0xd4>
 8000290:	0a03      	lsrs	r3, r0, #8
 8000292:	428b      	cmp	r3, r1
 8000294:	d344      	bcc.n	8000320 <__divsi3+0xa4>
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d328      	bcc.n	80002ee <__divsi3+0x72>
 800029c:	0c03      	lsrs	r3, r0, #16
 800029e:	428b      	cmp	r3, r1
 80002a0:	d30d      	bcc.n	80002be <__divsi3+0x42>
 80002a2:	22ff      	movs	r2, #255	; 0xff
 80002a4:	0209      	lsls	r1, r1, #8
 80002a6:	ba12      	rev	r2, r2
 80002a8:	0c03      	lsrs	r3, r0, #16
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d302      	bcc.n	80002b4 <__divsi3+0x38>
 80002ae:	1212      	asrs	r2, r2, #8
 80002b0:	0209      	lsls	r1, r1, #8
 80002b2:	d065      	beq.n	8000380 <__divsi3+0x104>
 80002b4:	0b03      	lsrs	r3, r0, #12
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d319      	bcc.n	80002ee <__divsi3+0x72>
 80002ba:	e000      	b.n	80002be <__divsi3+0x42>
 80002bc:	0a09      	lsrs	r1, r1, #8
 80002be:	0bc3      	lsrs	r3, r0, #15
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x4c>
 80002c4:	03cb      	lsls	r3, r1, #15
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b83      	lsrs	r3, r0, #14
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x58>
 80002d0:	038b      	lsls	r3, r1, #14
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0b43      	lsrs	r3, r0, #13
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x64>
 80002dc:	034b      	lsls	r3, r1, #13
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0b03      	lsrs	r3, r0, #12
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x70>
 80002e8:	030b      	lsls	r3, r1, #12
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0ac3      	lsrs	r3, r0, #11
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x7c>
 80002f4:	02cb      	lsls	r3, r1, #11
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a83      	lsrs	r3, r0, #10
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x88>
 8000300:	028b      	lsls	r3, r1, #10
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0a43      	lsrs	r3, r0, #9
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x94>
 800030c:	024b      	lsls	r3, r1, #9
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0a03      	lsrs	r3, r0, #8
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0xa0>
 8000318:	020b      	lsls	r3, r1, #8
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	d2cd      	bcs.n	80002bc <__divsi3+0x40>
 8000320:	09c3      	lsrs	r3, r0, #7
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xae>
 8000326:	01cb      	lsls	r3, r1, #7
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0983      	lsrs	r3, r0, #6
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xba>
 8000332:	018b      	lsls	r3, r1, #6
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0943      	lsrs	r3, r0, #5
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xc6>
 800033e:	014b      	lsls	r3, r1, #5
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xd2>
 800034a:	010b      	lsls	r3, r1, #4
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	08c3      	lsrs	r3, r0, #3
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xde>
 8000356:	00cb      	lsls	r3, r1, #3
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	0883      	lsrs	r3, r0, #2
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xea>
 8000362:	008b      	lsls	r3, r1, #2
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0843      	lsrs	r3, r0, #1
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xf6>
 800036e:	004b      	lsls	r3, r1, #1
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	1a41      	subs	r1, r0, r1
 8000376:	d200      	bcs.n	800037a <__divsi3+0xfe>
 8000378:	4601      	mov	r1, r0
 800037a:	4152      	adcs	r2, r2
 800037c:	4610      	mov	r0, r2
 800037e:	4770      	bx	lr
 8000380:	e05d      	b.n	800043e <__divsi3+0x1c2>
 8000382:	0fca      	lsrs	r2, r1, #31
 8000384:	d000      	beq.n	8000388 <__divsi3+0x10c>
 8000386:	4249      	negs	r1, r1
 8000388:	1003      	asrs	r3, r0, #32
 800038a:	d300      	bcc.n	800038e <__divsi3+0x112>
 800038c:	4240      	negs	r0, r0
 800038e:	4053      	eors	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	469c      	mov	ip, r3
 8000394:	0903      	lsrs	r3, r0, #4
 8000396:	428b      	cmp	r3, r1
 8000398:	d32d      	bcc.n	80003f6 <__divsi3+0x17a>
 800039a:	0a03      	lsrs	r3, r0, #8
 800039c:	428b      	cmp	r3, r1
 800039e:	d312      	bcc.n	80003c6 <__divsi3+0x14a>
 80003a0:	22fc      	movs	r2, #252	; 0xfc
 80003a2:	0189      	lsls	r1, r1, #6
 80003a4:	ba12      	rev	r2, r2
 80003a6:	0a03      	lsrs	r3, r0, #8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d30c      	bcc.n	80003c6 <__divsi3+0x14a>
 80003ac:	0189      	lsls	r1, r1, #6
 80003ae:	1192      	asrs	r2, r2, #6
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d308      	bcc.n	80003c6 <__divsi3+0x14a>
 80003b4:	0189      	lsls	r1, r1, #6
 80003b6:	1192      	asrs	r2, r2, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d304      	bcc.n	80003c6 <__divsi3+0x14a>
 80003bc:	0189      	lsls	r1, r1, #6
 80003be:	d03a      	beq.n	8000436 <__divsi3+0x1ba>
 80003c0:	1192      	asrs	r2, r2, #6
 80003c2:	e000      	b.n	80003c6 <__divsi3+0x14a>
 80003c4:	0989      	lsrs	r1, r1, #6
 80003c6:	09c3      	lsrs	r3, r0, #7
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x154>
 80003cc:	01cb      	lsls	r3, r1, #7
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0983      	lsrs	r3, r0, #6
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x160>
 80003d8:	018b      	lsls	r3, r1, #6
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	0943      	lsrs	r3, r0, #5
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x16c>
 80003e4:	014b      	lsls	r3, r1, #5
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0903      	lsrs	r3, r0, #4
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x178>
 80003f0:	010b      	lsls	r3, r1, #4
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	08c3      	lsrs	r3, r0, #3
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x184>
 80003fc:	00cb      	lsls	r3, r1, #3
 80003fe:	1ac0      	subs	r0, r0, r3
 8000400:	4152      	adcs	r2, r2
 8000402:	0883      	lsrs	r3, r0, #2
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x190>
 8000408:	008b      	lsls	r3, r1, #2
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	d2d9      	bcs.n	80003c4 <__divsi3+0x148>
 8000410:	0843      	lsrs	r3, r0, #1
 8000412:	428b      	cmp	r3, r1
 8000414:	d301      	bcc.n	800041a <__divsi3+0x19e>
 8000416:	004b      	lsls	r3, r1, #1
 8000418:	1ac0      	subs	r0, r0, r3
 800041a:	4152      	adcs	r2, r2
 800041c:	1a41      	subs	r1, r0, r1
 800041e:	d200      	bcs.n	8000422 <__divsi3+0x1a6>
 8000420:	4601      	mov	r1, r0
 8000422:	4663      	mov	r3, ip
 8000424:	4152      	adcs	r2, r2
 8000426:	105b      	asrs	r3, r3, #1
 8000428:	4610      	mov	r0, r2
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x1b4>
 800042c:	4240      	negs	r0, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d500      	bpl.n	8000434 <__divsi3+0x1b8>
 8000432:	4249      	negs	r1, r1
 8000434:	4770      	bx	lr
 8000436:	4663      	mov	r3, ip
 8000438:	105b      	asrs	r3, r3, #1
 800043a:	d300      	bcc.n	800043e <__divsi3+0x1c2>
 800043c:	4240      	negs	r0, r0
 800043e:	b501      	push	{r0, lr}
 8000440:	2000      	movs	r0, #0
 8000442:	f000 f805 	bl	8000450 <__aeabi_idiv0>
 8000446:	bd02      	pop	{r1, pc}

08000448 <__aeabi_idivmod>:
 8000448:	2900      	cmp	r1, #0
 800044a:	d0f8      	beq.n	800043e <__divsi3+0x1c2>
 800044c:	e716      	b.n	800027c <__divsi3>
 800044e:	4770      	bx	lr

08000450 <__aeabi_idiv0>:
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_uldivmod>:
 8000454:	2b00      	cmp	r3, #0
 8000456:	d111      	bne.n	800047c <__aeabi_uldivmod+0x28>
 8000458:	2a00      	cmp	r2, #0
 800045a:	d10f      	bne.n	800047c <__aeabi_uldivmod+0x28>
 800045c:	2900      	cmp	r1, #0
 800045e:	d100      	bne.n	8000462 <__aeabi_uldivmod+0xe>
 8000460:	2800      	cmp	r0, #0
 8000462:	d002      	beq.n	800046a <__aeabi_uldivmod+0x16>
 8000464:	2100      	movs	r1, #0
 8000466:	43c9      	mvns	r1, r1
 8000468:	1c08      	adds	r0, r1, #0
 800046a:	b407      	push	{r0, r1, r2}
 800046c:	4802      	ldr	r0, [pc, #8]	; (8000478 <__aeabi_uldivmod+0x24>)
 800046e:	a102      	add	r1, pc, #8	; (adr r1, 8000478 <__aeabi_uldivmod+0x24>)
 8000470:	1840      	adds	r0, r0, r1
 8000472:	9002      	str	r0, [sp, #8]
 8000474:	bd03      	pop	{r0, r1, pc}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	ffffffd9 	.word	0xffffffd9
 800047c:	b403      	push	{r0, r1}
 800047e:	4668      	mov	r0, sp
 8000480:	b501      	push	{r0, lr}
 8000482:	9802      	ldr	r0, [sp, #8]
 8000484:	f000 f84c 	bl	8000520 <__udivmoddi4>
 8000488:	9b01      	ldr	r3, [sp, #4]
 800048a:	469e      	mov	lr, r3
 800048c:	b002      	add	sp, #8
 800048e:	bc0c      	pop	{r2, r3}
 8000490:	4770      	bx	lr
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_lmul>:
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	0415      	lsls	r5, r2, #16
 8000498:	0c2d      	lsrs	r5, r5, #16
 800049a:	000f      	movs	r7, r1
 800049c:	0001      	movs	r1, r0
 800049e:	002e      	movs	r6, r5
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4684      	mov	ip, r0
 80004a4:	0400      	lsls	r0, r0, #16
 80004a6:	0c14      	lsrs	r4, r2, #16
 80004a8:	0c00      	lsrs	r0, r0, #16
 80004aa:	0c09      	lsrs	r1, r1, #16
 80004ac:	4346      	muls	r6, r0
 80004ae:	434d      	muls	r5, r1
 80004b0:	4360      	muls	r0, r4
 80004b2:	4361      	muls	r1, r4
 80004b4:	1940      	adds	r0, r0, r5
 80004b6:	0c34      	lsrs	r4, r6, #16
 80004b8:	1824      	adds	r4, r4, r0
 80004ba:	b500      	push	{lr}
 80004bc:	42a5      	cmp	r5, r4
 80004be:	d903      	bls.n	80004c8 <__aeabi_lmul+0x34>
 80004c0:	2080      	movs	r0, #128	; 0x80
 80004c2:	0240      	lsls	r0, r0, #9
 80004c4:	4680      	mov	r8, r0
 80004c6:	4441      	add	r1, r8
 80004c8:	0c25      	lsrs	r5, r4, #16
 80004ca:	186d      	adds	r5, r5, r1
 80004cc:	4661      	mov	r1, ip
 80004ce:	4359      	muls	r1, r3
 80004d0:	437a      	muls	r2, r7
 80004d2:	0430      	lsls	r0, r6, #16
 80004d4:	1949      	adds	r1, r1, r5
 80004d6:	0424      	lsls	r4, r4, #16
 80004d8:	0c00      	lsrs	r0, r0, #16
 80004da:	1820      	adds	r0, r4, r0
 80004dc:	1889      	adds	r1, r1, r2
 80004de:	bc80      	pop	{r7}
 80004e0:	46b8      	mov	r8, r7
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004e4 <__aeabi_d2uiz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	2200      	movs	r2, #0
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <__aeabi_d2uiz+0x38>)
 80004ea:	0004      	movs	r4, r0
 80004ec:	000d      	movs	r5, r1
 80004ee:	f001 fa89 	bl	8001a04 <__aeabi_dcmpge>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	d104      	bne.n	8000500 <__aeabi_d2uiz+0x1c>
 80004f6:	0020      	movs	r0, r4
 80004f8:	0029      	movs	r1, r5
 80004fa:	f001 f9c3 	bl	8001884 <__aeabi_d2iz>
 80004fe:	bd70      	pop	{r4, r5, r6, pc}
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <__aeabi_d2uiz+0x38>)
 8000502:	2200      	movs	r2, #0
 8000504:	0020      	movs	r0, r4
 8000506:	0029      	movs	r1, r5
 8000508:	f000 fe2a 	bl	8001160 <__aeabi_dsub>
 800050c:	f001 f9ba 	bl	8001884 <__aeabi_d2iz>
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	061b      	lsls	r3, r3, #24
 8000514:	469c      	mov	ip, r3
 8000516:	4460      	add	r0, ip
 8000518:	e7f1      	b.n	80004fe <__aeabi_d2uiz+0x1a>
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	41e00000 	.word	0x41e00000

08000520 <__udivmoddi4>:
 8000520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000522:	4657      	mov	r7, sl
 8000524:	464e      	mov	r6, r9
 8000526:	4645      	mov	r5, r8
 8000528:	46de      	mov	lr, fp
 800052a:	b5e0      	push	{r5, r6, r7, lr}
 800052c:	0004      	movs	r4, r0
 800052e:	000d      	movs	r5, r1
 8000530:	4692      	mov	sl, r2
 8000532:	4699      	mov	r9, r3
 8000534:	b083      	sub	sp, #12
 8000536:	428b      	cmp	r3, r1
 8000538:	d830      	bhi.n	800059c <__udivmoddi4+0x7c>
 800053a:	d02d      	beq.n	8000598 <__udivmoddi4+0x78>
 800053c:	4649      	mov	r1, r9
 800053e:	4650      	mov	r0, sl
 8000540:	f001 fa88 	bl	8001a54 <__clzdi2>
 8000544:	0029      	movs	r1, r5
 8000546:	0006      	movs	r6, r0
 8000548:	0020      	movs	r0, r4
 800054a:	f001 fa83 	bl	8001a54 <__clzdi2>
 800054e:	1a33      	subs	r3, r6, r0
 8000550:	4698      	mov	r8, r3
 8000552:	3b20      	subs	r3, #32
 8000554:	469b      	mov	fp, r3
 8000556:	d433      	bmi.n	80005c0 <__udivmoddi4+0xa0>
 8000558:	465a      	mov	r2, fp
 800055a:	4653      	mov	r3, sl
 800055c:	4093      	lsls	r3, r2
 800055e:	4642      	mov	r2, r8
 8000560:	001f      	movs	r7, r3
 8000562:	4653      	mov	r3, sl
 8000564:	4093      	lsls	r3, r2
 8000566:	001e      	movs	r6, r3
 8000568:	42af      	cmp	r7, r5
 800056a:	d83a      	bhi.n	80005e2 <__udivmoddi4+0xc2>
 800056c:	42af      	cmp	r7, r5
 800056e:	d100      	bne.n	8000572 <__udivmoddi4+0x52>
 8000570:	e078      	b.n	8000664 <__udivmoddi4+0x144>
 8000572:	465b      	mov	r3, fp
 8000574:	1ba4      	subs	r4, r4, r6
 8000576:	41bd      	sbcs	r5, r7
 8000578:	2b00      	cmp	r3, #0
 800057a:	da00      	bge.n	800057e <__udivmoddi4+0x5e>
 800057c:	e075      	b.n	800066a <__udivmoddi4+0x14a>
 800057e:	2200      	movs	r2, #0
 8000580:	2300      	movs	r3, #0
 8000582:	9200      	str	r2, [sp, #0]
 8000584:	9301      	str	r3, [sp, #4]
 8000586:	2301      	movs	r3, #1
 8000588:	465a      	mov	r2, fp
 800058a:	4093      	lsls	r3, r2
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2301      	movs	r3, #1
 8000590:	4642      	mov	r2, r8
 8000592:	4093      	lsls	r3, r2
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	e028      	b.n	80005ea <__udivmoddi4+0xca>
 8000598:	4282      	cmp	r2, r0
 800059a:	d9cf      	bls.n	800053c <__udivmoddi4+0x1c>
 800059c:	2200      	movs	r2, #0
 800059e:	2300      	movs	r3, #0
 80005a0:	9200      	str	r2, [sp, #0]
 80005a2:	9301      	str	r3, [sp, #4]
 80005a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <__udivmoddi4+0x8e>
 80005aa:	601c      	str	r4, [r3, #0]
 80005ac:	605d      	str	r5, [r3, #4]
 80005ae:	9800      	ldr	r0, [sp, #0]
 80005b0:	9901      	ldr	r1, [sp, #4]
 80005b2:	b003      	add	sp, #12
 80005b4:	bcf0      	pop	{r4, r5, r6, r7}
 80005b6:	46bb      	mov	fp, r7
 80005b8:	46b2      	mov	sl, r6
 80005ba:	46a9      	mov	r9, r5
 80005bc:	46a0      	mov	r8, r4
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c0:	4642      	mov	r2, r8
 80005c2:	2320      	movs	r3, #32
 80005c4:	1a9b      	subs	r3, r3, r2
 80005c6:	4652      	mov	r2, sl
 80005c8:	40da      	lsrs	r2, r3
 80005ca:	4641      	mov	r1, r8
 80005cc:	0013      	movs	r3, r2
 80005ce:	464a      	mov	r2, r9
 80005d0:	408a      	lsls	r2, r1
 80005d2:	0017      	movs	r7, r2
 80005d4:	4642      	mov	r2, r8
 80005d6:	431f      	orrs	r7, r3
 80005d8:	4653      	mov	r3, sl
 80005da:	4093      	lsls	r3, r2
 80005dc:	001e      	movs	r6, r3
 80005de:	42af      	cmp	r7, r5
 80005e0:	d9c4      	bls.n	800056c <__udivmoddi4+0x4c>
 80005e2:	2200      	movs	r2, #0
 80005e4:	2300      	movs	r3, #0
 80005e6:	9200      	str	r2, [sp, #0]
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	4643      	mov	r3, r8
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d0d9      	beq.n	80005a4 <__udivmoddi4+0x84>
 80005f0:	07fb      	lsls	r3, r7, #31
 80005f2:	0872      	lsrs	r2, r6, #1
 80005f4:	431a      	orrs	r2, r3
 80005f6:	4646      	mov	r6, r8
 80005f8:	087b      	lsrs	r3, r7, #1
 80005fa:	e00e      	b.n	800061a <__udivmoddi4+0xfa>
 80005fc:	42ab      	cmp	r3, r5
 80005fe:	d101      	bne.n	8000604 <__udivmoddi4+0xe4>
 8000600:	42a2      	cmp	r2, r4
 8000602:	d80c      	bhi.n	800061e <__udivmoddi4+0xfe>
 8000604:	1aa4      	subs	r4, r4, r2
 8000606:	419d      	sbcs	r5, r3
 8000608:	2001      	movs	r0, #1
 800060a:	1924      	adds	r4, r4, r4
 800060c:	416d      	adcs	r5, r5
 800060e:	2100      	movs	r1, #0
 8000610:	3e01      	subs	r6, #1
 8000612:	1824      	adds	r4, r4, r0
 8000614:	414d      	adcs	r5, r1
 8000616:	2e00      	cmp	r6, #0
 8000618:	d006      	beq.n	8000628 <__udivmoddi4+0x108>
 800061a:	42ab      	cmp	r3, r5
 800061c:	d9ee      	bls.n	80005fc <__udivmoddi4+0xdc>
 800061e:	3e01      	subs	r6, #1
 8000620:	1924      	adds	r4, r4, r4
 8000622:	416d      	adcs	r5, r5
 8000624:	2e00      	cmp	r6, #0
 8000626:	d1f8      	bne.n	800061a <__udivmoddi4+0xfa>
 8000628:	9800      	ldr	r0, [sp, #0]
 800062a:	9901      	ldr	r1, [sp, #4]
 800062c:	465b      	mov	r3, fp
 800062e:	1900      	adds	r0, r0, r4
 8000630:	4169      	adcs	r1, r5
 8000632:	2b00      	cmp	r3, #0
 8000634:	db24      	blt.n	8000680 <__udivmoddi4+0x160>
 8000636:	002b      	movs	r3, r5
 8000638:	465a      	mov	r2, fp
 800063a:	4644      	mov	r4, r8
 800063c:	40d3      	lsrs	r3, r2
 800063e:	002a      	movs	r2, r5
 8000640:	40e2      	lsrs	r2, r4
 8000642:	001c      	movs	r4, r3
 8000644:	465b      	mov	r3, fp
 8000646:	0015      	movs	r5, r2
 8000648:	2b00      	cmp	r3, #0
 800064a:	db2a      	blt.n	80006a2 <__udivmoddi4+0x182>
 800064c:	0026      	movs	r6, r4
 800064e:	409e      	lsls	r6, r3
 8000650:	0033      	movs	r3, r6
 8000652:	0026      	movs	r6, r4
 8000654:	4647      	mov	r7, r8
 8000656:	40be      	lsls	r6, r7
 8000658:	0032      	movs	r2, r6
 800065a:	1a80      	subs	r0, r0, r2
 800065c:	4199      	sbcs	r1, r3
 800065e:	9000      	str	r0, [sp, #0]
 8000660:	9101      	str	r1, [sp, #4]
 8000662:	e79f      	b.n	80005a4 <__udivmoddi4+0x84>
 8000664:	42a3      	cmp	r3, r4
 8000666:	d8bc      	bhi.n	80005e2 <__udivmoddi4+0xc2>
 8000668:	e783      	b.n	8000572 <__udivmoddi4+0x52>
 800066a:	4642      	mov	r2, r8
 800066c:	2320      	movs	r3, #32
 800066e:	2100      	movs	r1, #0
 8000670:	1a9b      	subs	r3, r3, r2
 8000672:	2200      	movs	r2, #0
 8000674:	9100      	str	r1, [sp, #0]
 8000676:	9201      	str	r2, [sp, #4]
 8000678:	2201      	movs	r2, #1
 800067a:	40da      	lsrs	r2, r3
 800067c:	9201      	str	r2, [sp, #4]
 800067e:	e786      	b.n	800058e <__udivmoddi4+0x6e>
 8000680:	4642      	mov	r2, r8
 8000682:	2320      	movs	r3, #32
 8000684:	1a9b      	subs	r3, r3, r2
 8000686:	002a      	movs	r2, r5
 8000688:	4646      	mov	r6, r8
 800068a:	409a      	lsls	r2, r3
 800068c:	0023      	movs	r3, r4
 800068e:	40f3      	lsrs	r3, r6
 8000690:	4644      	mov	r4, r8
 8000692:	4313      	orrs	r3, r2
 8000694:	002a      	movs	r2, r5
 8000696:	40e2      	lsrs	r2, r4
 8000698:	001c      	movs	r4, r3
 800069a:	465b      	mov	r3, fp
 800069c:	0015      	movs	r5, r2
 800069e:	2b00      	cmp	r3, #0
 80006a0:	dad4      	bge.n	800064c <__udivmoddi4+0x12c>
 80006a2:	4642      	mov	r2, r8
 80006a4:	002f      	movs	r7, r5
 80006a6:	2320      	movs	r3, #32
 80006a8:	0026      	movs	r6, r4
 80006aa:	4097      	lsls	r7, r2
 80006ac:	1a9b      	subs	r3, r3, r2
 80006ae:	40de      	lsrs	r6, r3
 80006b0:	003b      	movs	r3, r7
 80006b2:	4333      	orrs	r3, r6
 80006b4:	e7cd      	b.n	8000652 <__udivmoddi4+0x132>
 80006b6:	46c0      	nop			; (mov r8, r8)

080006b8 <__aeabi_ddiv>:
 80006b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ba:	4657      	mov	r7, sl
 80006bc:	464e      	mov	r6, r9
 80006be:	4645      	mov	r5, r8
 80006c0:	46de      	mov	lr, fp
 80006c2:	b5e0      	push	{r5, r6, r7, lr}
 80006c4:	4681      	mov	r9, r0
 80006c6:	0005      	movs	r5, r0
 80006c8:	030c      	lsls	r4, r1, #12
 80006ca:	0048      	lsls	r0, r1, #1
 80006cc:	4692      	mov	sl, r2
 80006ce:	001f      	movs	r7, r3
 80006d0:	b085      	sub	sp, #20
 80006d2:	0b24      	lsrs	r4, r4, #12
 80006d4:	0d40      	lsrs	r0, r0, #21
 80006d6:	0fce      	lsrs	r6, r1, #31
 80006d8:	2800      	cmp	r0, #0
 80006da:	d059      	beq.n	8000790 <__aeabi_ddiv+0xd8>
 80006dc:	4b87      	ldr	r3, [pc, #540]	; (80008fc <__aeabi_ddiv+0x244>)
 80006de:	4298      	cmp	r0, r3
 80006e0:	d100      	bne.n	80006e4 <__aeabi_ddiv+0x2c>
 80006e2:	e098      	b.n	8000816 <__aeabi_ddiv+0x15e>
 80006e4:	0f6b      	lsrs	r3, r5, #29
 80006e6:	00e4      	lsls	r4, r4, #3
 80006e8:	431c      	orrs	r4, r3
 80006ea:	2380      	movs	r3, #128	; 0x80
 80006ec:	041b      	lsls	r3, r3, #16
 80006ee:	4323      	orrs	r3, r4
 80006f0:	4698      	mov	r8, r3
 80006f2:	4b83      	ldr	r3, [pc, #524]	; (8000900 <__aeabi_ddiv+0x248>)
 80006f4:	00ed      	lsls	r5, r5, #3
 80006f6:	469b      	mov	fp, r3
 80006f8:	2300      	movs	r3, #0
 80006fa:	4699      	mov	r9, r3
 80006fc:	4483      	add	fp, r0
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	033c      	lsls	r4, r7, #12
 8000702:	007b      	lsls	r3, r7, #1
 8000704:	4650      	mov	r0, sl
 8000706:	0b24      	lsrs	r4, r4, #12
 8000708:	0d5b      	lsrs	r3, r3, #21
 800070a:	0fff      	lsrs	r7, r7, #31
 800070c:	2b00      	cmp	r3, #0
 800070e:	d067      	beq.n	80007e0 <__aeabi_ddiv+0x128>
 8000710:	4a7a      	ldr	r2, [pc, #488]	; (80008fc <__aeabi_ddiv+0x244>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d018      	beq.n	8000748 <__aeabi_ddiv+0x90>
 8000716:	497a      	ldr	r1, [pc, #488]	; (8000900 <__aeabi_ddiv+0x248>)
 8000718:	0f42      	lsrs	r2, r0, #29
 800071a:	468c      	mov	ip, r1
 800071c:	00e4      	lsls	r4, r4, #3
 800071e:	4659      	mov	r1, fp
 8000720:	4314      	orrs	r4, r2
 8000722:	2280      	movs	r2, #128	; 0x80
 8000724:	4463      	add	r3, ip
 8000726:	0412      	lsls	r2, r2, #16
 8000728:	1acb      	subs	r3, r1, r3
 800072a:	4314      	orrs	r4, r2
 800072c:	469b      	mov	fp, r3
 800072e:	00c2      	lsls	r2, r0, #3
 8000730:	2000      	movs	r0, #0
 8000732:	0033      	movs	r3, r6
 8000734:	407b      	eors	r3, r7
 8000736:	469a      	mov	sl, r3
 8000738:	464b      	mov	r3, r9
 800073a:	2b0f      	cmp	r3, #15
 800073c:	d900      	bls.n	8000740 <__aeabi_ddiv+0x88>
 800073e:	e0ef      	b.n	8000920 <__aeabi_ddiv+0x268>
 8000740:	4970      	ldr	r1, [pc, #448]	; (8000904 <__aeabi_ddiv+0x24c>)
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	58cb      	ldr	r3, [r1, r3]
 8000746:	469f      	mov	pc, r3
 8000748:	4b6f      	ldr	r3, [pc, #444]	; (8000908 <__aeabi_ddiv+0x250>)
 800074a:	4652      	mov	r2, sl
 800074c:	469c      	mov	ip, r3
 800074e:	4322      	orrs	r2, r4
 8000750:	44e3      	add	fp, ip
 8000752:	2a00      	cmp	r2, #0
 8000754:	d000      	beq.n	8000758 <__aeabi_ddiv+0xa0>
 8000756:	e095      	b.n	8000884 <__aeabi_ddiv+0x1cc>
 8000758:	4649      	mov	r1, r9
 800075a:	2302      	movs	r3, #2
 800075c:	4319      	orrs	r1, r3
 800075e:	4689      	mov	r9, r1
 8000760:	2400      	movs	r4, #0
 8000762:	2002      	movs	r0, #2
 8000764:	e7e5      	b.n	8000732 <__aeabi_ddiv+0x7a>
 8000766:	2300      	movs	r3, #0
 8000768:	2400      	movs	r4, #0
 800076a:	2500      	movs	r5, #0
 800076c:	4652      	mov	r2, sl
 800076e:	051b      	lsls	r3, r3, #20
 8000770:	4323      	orrs	r3, r4
 8000772:	07d2      	lsls	r2, r2, #31
 8000774:	4313      	orrs	r3, r2
 8000776:	0028      	movs	r0, r5
 8000778:	0019      	movs	r1, r3
 800077a:	b005      	add	sp, #20
 800077c:	bcf0      	pop	{r4, r5, r6, r7}
 800077e:	46bb      	mov	fp, r7
 8000780:	46b2      	mov	sl, r6
 8000782:	46a9      	mov	r9, r5
 8000784:	46a0      	mov	r8, r4
 8000786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000788:	2400      	movs	r4, #0
 800078a:	2500      	movs	r5, #0
 800078c:	4b5b      	ldr	r3, [pc, #364]	; (80008fc <__aeabi_ddiv+0x244>)
 800078e:	e7ed      	b.n	800076c <__aeabi_ddiv+0xb4>
 8000790:	464b      	mov	r3, r9
 8000792:	4323      	orrs	r3, r4
 8000794:	4698      	mov	r8, r3
 8000796:	d100      	bne.n	800079a <__aeabi_ddiv+0xe2>
 8000798:	e089      	b.n	80008ae <__aeabi_ddiv+0x1f6>
 800079a:	2c00      	cmp	r4, #0
 800079c:	d100      	bne.n	80007a0 <__aeabi_ddiv+0xe8>
 800079e:	e1e0      	b.n	8000b62 <__aeabi_ddiv+0x4aa>
 80007a0:	0020      	movs	r0, r4
 80007a2:	f001 f939 	bl	8001a18 <__clzsi2>
 80007a6:	0001      	movs	r1, r0
 80007a8:	0002      	movs	r2, r0
 80007aa:	390b      	subs	r1, #11
 80007ac:	231d      	movs	r3, #29
 80007ae:	1a5b      	subs	r3, r3, r1
 80007b0:	4649      	mov	r1, r9
 80007b2:	0010      	movs	r0, r2
 80007b4:	40d9      	lsrs	r1, r3
 80007b6:	3808      	subs	r0, #8
 80007b8:	4084      	lsls	r4, r0
 80007ba:	000b      	movs	r3, r1
 80007bc:	464d      	mov	r5, r9
 80007be:	4323      	orrs	r3, r4
 80007c0:	4698      	mov	r8, r3
 80007c2:	4085      	lsls	r5, r0
 80007c4:	4851      	ldr	r0, [pc, #324]	; (800090c <__aeabi_ddiv+0x254>)
 80007c6:	033c      	lsls	r4, r7, #12
 80007c8:	1a83      	subs	r3, r0, r2
 80007ca:	469b      	mov	fp, r3
 80007cc:	2300      	movs	r3, #0
 80007ce:	4699      	mov	r9, r3
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	007b      	lsls	r3, r7, #1
 80007d4:	4650      	mov	r0, sl
 80007d6:	0b24      	lsrs	r4, r4, #12
 80007d8:	0d5b      	lsrs	r3, r3, #21
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d197      	bne.n	8000710 <__aeabi_ddiv+0x58>
 80007e0:	4652      	mov	r2, sl
 80007e2:	4322      	orrs	r2, r4
 80007e4:	d055      	beq.n	8000892 <__aeabi_ddiv+0x1da>
 80007e6:	2c00      	cmp	r4, #0
 80007e8:	d100      	bne.n	80007ec <__aeabi_ddiv+0x134>
 80007ea:	e1ca      	b.n	8000b82 <__aeabi_ddiv+0x4ca>
 80007ec:	0020      	movs	r0, r4
 80007ee:	f001 f913 	bl	8001a18 <__clzsi2>
 80007f2:	0002      	movs	r2, r0
 80007f4:	3a0b      	subs	r2, #11
 80007f6:	231d      	movs	r3, #29
 80007f8:	0001      	movs	r1, r0
 80007fa:	1a9b      	subs	r3, r3, r2
 80007fc:	4652      	mov	r2, sl
 80007fe:	3908      	subs	r1, #8
 8000800:	40da      	lsrs	r2, r3
 8000802:	408c      	lsls	r4, r1
 8000804:	4314      	orrs	r4, r2
 8000806:	4652      	mov	r2, sl
 8000808:	408a      	lsls	r2, r1
 800080a:	4b41      	ldr	r3, [pc, #260]	; (8000910 <__aeabi_ddiv+0x258>)
 800080c:	4458      	add	r0, fp
 800080e:	469b      	mov	fp, r3
 8000810:	4483      	add	fp, r0
 8000812:	2000      	movs	r0, #0
 8000814:	e78d      	b.n	8000732 <__aeabi_ddiv+0x7a>
 8000816:	464b      	mov	r3, r9
 8000818:	4323      	orrs	r3, r4
 800081a:	4698      	mov	r8, r3
 800081c:	d140      	bne.n	80008a0 <__aeabi_ddiv+0x1e8>
 800081e:	2308      	movs	r3, #8
 8000820:	4699      	mov	r9, r3
 8000822:	3b06      	subs	r3, #6
 8000824:	2500      	movs	r5, #0
 8000826:	4683      	mov	fp, r0
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	e769      	b.n	8000700 <__aeabi_ddiv+0x48>
 800082c:	46b2      	mov	sl, r6
 800082e:	9b00      	ldr	r3, [sp, #0]
 8000830:	2b02      	cmp	r3, #2
 8000832:	d0a9      	beq.n	8000788 <__aeabi_ddiv+0xd0>
 8000834:	2b03      	cmp	r3, #3
 8000836:	d100      	bne.n	800083a <__aeabi_ddiv+0x182>
 8000838:	e211      	b.n	8000c5e <__aeabi_ddiv+0x5a6>
 800083a:	2b01      	cmp	r3, #1
 800083c:	d093      	beq.n	8000766 <__aeabi_ddiv+0xae>
 800083e:	4a35      	ldr	r2, [pc, #212]	; (8000914 <__aeabi_ddiv+0x25c>)
 8000840:	445a      	add	r2, fp
 8000842:	2a00      	cmp	r2, #0
 8000844:	dc00      	bgt.n	8000848 <__aeabi_ddiv+0x190>
 8000846:	e13c      	b.n	8000ac2 <__aeabi_ddiv+0x40a>
 8000848:	076b      	lsls	r3, r5, #29
 800084a:	d000      	beq.n	800084e <__aeabi_ddiv+0x196>
 800084c:	e1a7      	b.n	8000b9e <__aeabi_ddiv+0x4e6>
 800084e:	08ed      	lsrs	r5, r5, #3
 8000850:	4643      	mov	r3, r8
 8000852:	01db      	lsls	r3, r3, #7
 8000854:	d506      	bpl.n	8000864 <__aeabi_ddiv+0x1ac>
 8000856:	4642      	mov	r2, r8
 8000858:	4b2f      	ldr	r3, [pc, #188]	; (8000918 <__aeabi_ddiv+0x260>)
 800085a:	401a      	ands	r2, r3
 800085c:	4690      	mov	r8, r2
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	00d2      	lsls	r2, r2, #3
 8000862:	445a      	add	r2, fp
 8000864:	4b2d      	ldr	r3, [pc, #180]	; (800091c <__aeabi_ddiv+0x264>)
 8000866:	429a      	cmp	r2, r3
 8000868:	dc8e      	bgt.n	8000788 <__aeabi_ddiv+0xd0>
 800086a:	4643      	mov	r3, r8
 800086c:	0552      	lsls	r2, r2, #21
 800086e:	0758      	lsls	r0, r3, #29
 8000870:	025c      	lsls	r4, r3, #9
 8000872:	4305      	orrs	r5, r0
 8000874:	0b24      	lsrs	r4, r4, #12
 8000876:	0d53      	lsrs	r3, r2, #21
 8000878:	e778      	b.n	800076c <__aeabi_ddiv+0xb4>
 800087a:	46ba      	mov	sl, r7
 800087c:	46a0      	mov	r8, r4
 800087e:	0015      	movs	r5, r2
 8000880:	9000      	str	r0, [sp, #0]
 8000882:	e7d4      	b.n	800082e <__aeabi_ddiv+0x176>
 8000884:	464a      	mov	r2, r9
 8000886:	2303      	movs	r3, #3
 8000888:	431a      	orrs	r2, r3
 800088a:	4691      	mov	r9, r2
 800088c:	2003      	movs	r0, #3
 800088e:	4652      	mov	r2, sl
 8000890:	e74f      	b.n	8000732 <__aeabi_ddiv+0x7a>
 8000892:	4649      	mov	r1, r9
 8000894:	2301      	movs	r3, #1
 8000896:	4319      	orrs	r1, r3
 8000898:	4689      	mov	r9, r1
 800089a:	2400      	movs	r4, #0
 800089c:	2001      	movs	r0, #1
 800089e:	e748      	b.n	8000732 <__aeabi_ddiv+0x7a>
 80008a0:	230c      	movs	r3, #12
 80008a2:	4699      	mov	r9, r3
 80008a4:	3b09      	subs	r3, #9
 80008a6:	46a0      	mov	r8, r4
 80008a8:	4683      	mov	fp, r0
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	e728      	b.n	8000700 <__aeabi_ddiv+0x48>
 80008ae:	2304      	movs	r3, #4
 80008b0:	4699      	mov	r9, r3
 80008b2:	2300      	movs	r3, #0
 80008b4:	469b      	mov	fp, r3
 80008b6:	3301      	adds	r3, #1
 80008b8:	2500      	movs	r5, #0
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	e720      	b.n	8000700 <__aeabi_ddiv+0x48>
 80008be:	2300      	movs	r3, #0
 80008c0:	2480      	movs	r4, #128	; 0x80
 80008c2:	469a      	mov	sl, r3
 80008c4:	2500      	movs	r5, #0
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <__aeabi_ddiv+0x244>)
 80008c8:	0324      	lsls	r4, r4, #12
 80008ca:	e74f      	b.n	800076c <__aeabi_ddiv+0xb4>
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	4641      	mov	r1, r8
 80008d0:	031b      	lsls	r3, r3, #12
 80008d2:	4219      	tst	r1, r3
 80008d4:	d008      	beq.n	80008e8 <__aeabi_ddiv+0x230>
 80008d6:	421c      	tst	r4, r3
 80008d8:	d106      	bne.n	80008e8 <__aeabi_ddiv+0x230>
 80008da:	431c      	orrs	r4, r3
 80008dc:	0324      	lsls	r4, r4, #12
 80008de:	46ba      	mov	sl, r7
 80008e0:	0015      	movs	r5, r2
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <__aeabi_ddiv+0x244>)
 80008e4:	0b24      	lsrs	r4, r4, #12
 80008e6:	e741      	b.n	800076c <__aeabi_ddiv+0xb4>
 80008e8:	2480      	movs	r4, #128	; 0x80
 80008ea:	4643      	mov	r3, r8
 80008ec:	0324      	lsls	r4, r4, #12
 80008ee:	431c      	orrs	r4, r3
 80008f0:	0324      	lsls	r4, r4, #12
 80008f2:	46b2      	mov	sl, r6
 80008f4:	4b01      	ldr	r3, [pc, #4]	; (80008fc <__aeabi_ddiv+0x244>)
 80008f6:	0b24      	lsrs	r4, r4, #12
 80008f8:	e738      	b.n	800076c <__aeabi_ddiv+0xb4>
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	000007ff 	.word	0x000007ff
 8000900:	fffffc01 	.word	0xfffffc01
 8000904:	08008db8 	.word	0x08008db8
 8000908:	fffff801 	.word	0xfffff801
 800090c:	fffffc0d 	.word	0xfffffc0d
 8000910:	000003f3 	.word	0x000003f3
 8000914:	000003ff 	.word	0x000003ff
 8000918:	feffffff 	.word	0xfeffffff
 800091c:	000007fe 	.word	0x000007fe
 8000920:	4544      	cmp	r4, r8
 8000922:	d200      	bcs.n	8000926 <__aeabi_ddiv+0x26e>
 8000924:	e116      	b.n	8000b54 <__aeabi_ddiv+0x49c>
 8000926:	d100      	bne.n	800092a <__aeabi_ddiv+0x272>
 8000928:	e111      	b.n	8000b4e <__aeabi_ddiv+0x496>
 800092a:	2301      	movs	r3, #1
 800092c:	425b      	negs	r3, r3
 800092e:	469c      	mov	ip, r3
 8000930:	002e      	movs	r6, r5
 8000932:	4640      	mov	r0, r8
 8000934:	2500      	movs	r5, #0
 8000936:	44e3      	add	fp, ip
 8000938:	0223      	lsls	r3, r4, #8
 800093a:	0e14      	lsrs	r4, r2, #24
 800093c:	431c      	orrs	r4, r3
 800093e:	0c1b      	lsrs	r3, r3, #16
 8000940:	4699      	mov	r9, r3
 8000942:	0423      	lsls	r3, r4, #16
 8000944:	0c1f      	lsrs	r7, r3, #16
 8000946:	0212      	lsls	r2, r2, #8
 8000948:	4649      	mov	r1, r9
 800094a:	9200      	str	r2, [sp, #0]
 800094c:	9701      	str	r7, [sp, #4]
 800094e:	f7ff fc91 	bl	8000274 <__aeabi_uidivmod>
 8000952:	0002      	movs	r2, r0
 8000954:	437a      	muls	r2, r7
 8000956:	040b      	lsls	r3, r1, #16
 8000958:	0c31      	lsrs	r1, r6, #16
 800095a:	4680      	mov	r8, r0
 800095c:	4319      	orrs	r1, r3
 800095e:	428a      	cmp	r2, r1
 8000960:	d90b      	bls.n	800097a <__aeabi_ddiv+0x2c2>
 8000962:	2301      	movs	r3, #1
 8000964:	425b      	negs	r3, r3
 8000966:	469c      	mov	ip, r3
 8000968:	1909      	adds	r1, r1, r4
 800096a:	44e0      	add	r8, ip
 800096c:	428c      	cmp	r4, r1
 800096e:	d804      	bhi.n	800097a <__aeabi_ddiv+0x2c2>
 8000970:	428a      	cmp	r2, r1
 8000972:	d902      	bls.n	800097a <__aeabi_ddiv+0x2c2>
 8000974:	1e83      	subs	r3, r0, #2
 8000976:	4698      	mov	r8, r3
 8000978:	1909      	adds	r1, r1, r4
 800097a:	1a88      	subs	r0, r1, r2
 800097c:	4649      	mov	r1, r9
 800097e:	f7ff fc79 	bl	8000274 <__aeabi_uidivmod>
 8000982:	0409      	lsls	r1, r1, #16
 8000984:	468c      	mov	ip, r1
 8000986:	0431      	lsls	r1, r6, #16
 8000988:	4666      	mov	r6, ip
 800098a:	9a01      	ldr	r2, [sp, #4]
 800098c:	0c09      	lsrs	r1, r1, #16
 800098e:	4342      	muls	r2, r0
 8000990:	0003      	movs	r3, r0
 8000992:	4331      	orrs	r1, r6
 8000994:	428a      	cmp	r2, r1
 8000996:	d904      	bls.n	80009a2 <__aeabi_ddiv+0x2ea>
 8000998:	1909      	adds	r1, r1, r4
 800099a:	3b01      	subs	r3, #1
 800099c:	428c      	cmp	r4, r1
 800099e:	d800      	bhi.n	80009a2 <__aeabi_ddiv+0x2ea>
 80009a0:	e111      	b.n	8000bc6 <__aeabi_ddiv+0x50e>
 80009a2:	1a89      	subs	r1, r1, r2
 80009a4:	4642      	mov	r2, r8
 80009a6:	9e00      	ldr	r6, [sp, #0]
 80009a8:	0412      	lsls	r2, r2, #16
 80009aa:	431a      	orrs	r2, r3
 80009ac:	0c33      	lsrs	r3, r6, #16
 80009ae:	001f      	movs	r7, r3
 80009b0:	0c10      	lsrs	r0, r2, #16
 80009b2:	4690      	mov	r8, r2
 80009b4:	9302      	str	r3, [sp, #8]
 80009b6:	0413      	lsls	r3, r2, #16
 80009b8:	0432      	lsls	r2, r6, #16
 80009ba:	0c16      	lsrs	r6, r2, #16
 80009bc:	0032      	movs	r2, r6
 80009be:	0c1b      	lsrs	r3, r3, #16
 80009c0:	435a      	muls	r2, r3
 80009c2:	9603      	str	r6, [sp, #12]
 80009c4:	437b      	muls	r3, r7
 80009c6:	4346      	muls	r6, r0
 80009c8:	4378      	muls	r0, r7
 80009ca:	0c17      	lsrs	r7, r2, #16
 80009cc:	46bc      	mov	ip, r7
 80009ce:	199b      	adds	r3, r3, r6
 80009d0:	4463      	add	r3, ip
 80009d2:	429e      	cmp	r6, r3
 80009d4:	d903      	bls.n	80009de <__aeabi_ddiv+0x326>
 80009d6:	2680      	movs	r6, #128	; 0x80
 80009d8:	0276      	lsls	r6, r6, #9
 80009da:	46b4      	mov	ip, r6
 80009dc:	4460      	add	r0, ip
 80009de:	0c1e      	lsrs	r6, r3, #16
 80009e0:	1830      	adds	r0, r6, r0
 80009e2:	0416      	lsls	r6, r2, #16
 80009e4:	041b      	lsls	r3, r3, #16
 80009e6:	0c36      	lsrs	r6, r6, #16
 80009e8:	199e      	adds	r6, r3, r6
 80009ea:	4281      	cmp	r1, r0
 80009ec:	d200      	bcs.n	80009f0 <__aeabi_ddiv+0x338>
 80009ee:	e09c      	b.n	8000b2a <__aeabi_ddiv+0x472>
 80009f0:	d100      	bne.n	80009f4 <__aeabi_ddiv+0x33c>
 80009f2:	e097      	b.n	8000b24 <__aeabi_ddiv+0x46c>
 80009f4:	1bae      	subs	r6, r5, r6
 80009f6:	1a09      	subs	r1, r1, r0
 80009f8:	42b5      	cmp	r5, r6
 80009fa:	4180      	sbcs	r0, r0
 80009fc:	4240      	negs	r0, r0
 80009fe:	1a08      	subs	r0, r1, r0
 8000a00:	4284      	cmp	r4, r0
 8000a02:	d100      	bne.n	8000a06 <__aeabi_ddiv+0x34e>
 8000a04:	e111      	b.n	8000c2a <__aeabi_ddiv+0x572>
 8000a06:	4649      	mov	r1, r9
 8000a08:	f7ff fc34 	bl	8000274 <__aeabi_uidivmod>
 8000a0c:	9a01      	ldr	r2, [sp, #4]
 8000a0e:	040b      	lsls	r3, r1, #16
 8000a10:	4342      	muls	r2, r0
 8000a12:	0c31      	lsrs	r1, r6, #16
 8000a14:	0005      	movs	r5, r0
 8000a16:	4319      	orrs	r1, r3
 8000a18:	428a      	cmp	r2, r1
 8000a1a:	d907      	bls.n	8000a2c <__aeabi_ddiv+0x374>
 8000a1c:	1909      	adds	r1, r1, r4
 8000a1e:	3d01      	subs	r5, #1
 8000a20:	428c      	cmp	r4, r1
 8000a22:	d803      	bhi.n	8000a2c <__aeabi_ddiv+0x374>
 8000a24:	428a      	cmp	r2, r1
 8000a26:	d901      	bls.n	8000a2c <__aeabi_ddiv+0x374>
 8000a28:	1e85      	subs	r5, r0, #2
 8000a2a:	1909      	adds	r1, r1, r4
 8000a2c:	1a88      	subs	r0, r1, r2
 8000a2e:	4649      	mov	r1, r9
 8000a30:	f7ff fc20 	bl	8000274 <__aeabi_uidivmod>
 8000a34:	0409      	lsls	r1, r1, #16
 8000a36:	468c      	mov	ip, r1
 8000a38:	0431      	lsls	r1, r6, #16
 8000a3a:	4666      	mov	r6, ip
 8000a3c:	9a01      	ldr	r2, [sp, #4]
 8000a3e:	0c09      	lsrs	r1, r1, #16
 8000a40:	4342      	muls	r2, r0
 8000a42:	0003      	movs	r3, r0
 8000a44:	4331      	orrs	r1, r6
 8000a46:	428a      	cmp	r2, r1
 8000a48:	d907      	bls.n	8000a5a <__aeabi_ddiv+0x3a2>
 8000a4a:	1909      	adds	r1, r1, r4
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	428c      	cmp	r4, r1
 8000a50:	d803      	bhi.n	8000a5a <__aeabi_ddiv+0x3a2>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	d901      	bls.n	8000a5a <__aeabi_ddiv+0x3a2>
 8000a56:	1e83      	subs	r3, r0, #2
 8000a58:	1909      	adds	r1, r1, r4
 8000a5a:	9e03      	ldr	r6, [sp, #12]
 8000a5c:	1a89      	subs	r1, r1, r2
 8000a5e:	0032      	movs	r2, r6
 8000a60:	042d      	lsls	r5, r5, #16
 8000a62:	431d      	orrs	r5, r3
 8000a64:	9f02      	ldr	r7, [sp, #8]
 8000a66:	042b      	lsls	r3, r5, #16
 8000a68:	0c1b      	lsrs	r3, r3, #16
 8000a6a:	435a      	muls	r2, r3
 8000a6c:	437b      	muls	r3, r7
 8000a6e:	469c      	mov	ip, r3
 8000a70:	0c28      	lsrs	r0, r5, #16
 8000a72:	4346      	muls	r6, r0
 8000a74:	0c13      	lsrs	r3, r2, #16
 8000a76:	44b4      	add	ip, r6
 8000a78:	4463      	add	r3, ip
 8000a7a:	4378      	muls	r0, r7
 8000a7c:	429e      	cmp	r6, r3
 8000a7e:	d903      	bls.n	8000a88 <__aeabi_ddiv+0x3d0>
 8000a80:	2680      	movs	r6, #128	; 0x80
 8000a82:	0276      	lsls	r6, r6, #9
 8000a84:	46b4      	mov	ip, r6
 8000a86:	4460      	add	r0, ip
 8000a88:	0c1e      	lsrs	r6, r3, #16
 8000a8a:	0412      	lsls	r2, r2, #16
 8000a8c:	041b      	lsls	r3, r3, #16
 8000a8e:	0c12      	lsrs	r2, r2, #16
 8000a90:	1830      	adds	r0, r6, r0
 8000a92:	189b      	adds	r3, r3, r2
 8000a94:	4281      	cmp	r1, r0
 8000a96:	d306      	bcc.n	8000aa6 <__aeabi_ddiv+0x3ee>
 8000a98:	d002      	beq.n	8000aa0 <__aeabi_ddiv+0x3e8>
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	431d      	orrs	r5, r3
 8000a9e:	e6ce      	b.n	800083e <__aeabi_ddiv+0x186>
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_ddiv+0x3ee>
 8000aa4:	e6cb      	b.n	800083e <__aeabi_ddiv+0x186>
 8000aa6:	1861      	adds	r1, r4, r1
 8000aa8:	1e6e      	subs	r6, r5, #1
 8000aaa:	42a1      	cmp	r1, r4
 8000aac:	d200      	bcs.n	8000ab0 <__aeabi_ddiv+0x3f8>
 8000aae:	e0a4      	b.n	8000bfa <__aeabi_ddiv+0x542>
 8000ab0:	4281      	cmp	r1, r0
 8000ab2:	d200      	bcs.n	8000ab6 <__aeabi_ddiv+0x3fe>
 8000ab4:	e0c9      	b.n	8000c4a <__aeabi_ddiv+0x592>
 8000ab6:	d100      	bne.n	8000aba <__aeabi_ddiv+0x402>
 8000ab8:	e0d9      	b.n	8000c6e <__aeabi_ddiv+0x5b6>
 8000aba:	0035      	movs	r5, r6
 8000abc:	e7ed      	b.n	8000a9a <__aeabi_ddiv+0x3e2>
 8000abe:	2501      	movs	r5, #1
 8000ac0:	426d      	negs	r5, r5
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	1a89      	subs	r1, r1, r2
 8000ac6:	2938      	cmp	r1, #56	; 0x38
 8000ac8:	dd00      	ble.n	8000acc <__aeabi_ddiv+0x414>
 8000aca:	e64c      	b.n	8000766 <__aeabi_ddiv+0xae>
 8000acc:	291f      	cmp	r1, #31
 8000ace:	dc00      	bgt.n	8000ad2 <__aeabi_ddiv+0x41a>
 8000ad0:	e07f      	b.n	8000bd2 <__aeabi_ddiv+0x51a>
 8000ad2:	231f      	movs	r3, #31
 8000ad4:	425b      	negs	r3, r3
 8000ad6:	1a9a      	subs	r2, r3, r2
 8000ad8:	4643      	mov	r3, r8
 8000ada:	40d3      	lsrs	r3, r2
 8000adc:	2920      	cmp	r1, #32
 8000ade:	d004      	beq.n	8000aea <__aeabi_ddiv+0x432>
 8000ae0:	4644      	mov	r4, r8
 8000ae2:	4a65      	ldr	r2, [pc, #404]	; (8000c78 <__aeabi_ddiv+0x5c0>)
 8000ae4:	445a      	add	r2, fp
 8000ae6:	4094      	lsls	r4, r2
 8000ae8:	4325      	orrs	r5, r4
 8000aea:	1e6a      	subs	r2, r5, #1
 8000aec:	4195      	sbcs	r5, r2
 8000aee:	2207      	movs	r2, #7
 8000af0:	432b      	orrs	r3, r5
 8000af2:	0015      	movs	r5, r2
 8000af4:	2400      	movs	r4, #0
 8000af6:	401d      	ands	r5, r3
 8000af8:	421a      	tst	r2, r3
 8000afa:	d100      	bne.n	8000afe <__aeabi_ddiv+0x446>
 8000afc:	e0a1      	b.n	8000c42 <__aeabi_ddiv+0x58a>
 8000afe:	220f      	movs	r2, #15
 8000b00:	2400      	movs	r4, #0
 8000b02:	401a      	ands	r2, r3
 8000b04:	2a04      	cmp	r2, #4
 8000b06:	d100      	bne.n	8000b0a <__aeabi_ddiv+0x452>
 8000b08:	e098      	b.n	8000c3c <__aeabi_ddiv+0x584>
 8000b0a:	1d1a      	adds	r2, r3, #4
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	419b      	sbcs	r3, r3
 8000b10:	425b      	negs	r3, r3
 8000b12:	18e4      	adds	r4, r4, r3
 8000b14:	0013      	movs	r3, r2
 8000b16:	0222      	lsls	r2, r4, #8
 8000b18:	d400      	bmi.n	8000b1c <__aeabi_ddiv+0x464>
 8000b1a:	e08f      	b.n	8000c3c <__aeabi_ddiv+0x584>
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	2400      	movs	r4, #0
 8000b20:	2500      	movs	r5, #0
 8000b22:	e623      	b.n	800076c <__aeabi_ddiv+0xb4>
 8000b24:	42b5      	cmp	r5, r6
 8000b26:	d300      	bcc.n	8000b2a <__aeabi_ddiv+0x472>
 8000b28:	e764      	b.n	80009f4 <__aeabi_ddiv+0x33c>
 8000b2a:	4643      	mov	r3, r8
 8000b2c:	1e5a      	subs	r2, r3, #1
 8000b2e:	9b00      	ldr	r3, [sp, #0]
 8000b30:	469c      	mov	ip, r3
 8000b32:	4465      	add	r5, ip
 8000b34:	001f      	movs	r7, r3
 8000b36:	429d      	cmp	r5, r3
 8000b38:	419b      	sbcs	r3, r3
 8000b3a:	425b      	negs	r3, r3
 8000b3c:	191b      	adds	r3, r3, r4
 8000b3e:	18c9      	adds	r1, r1, r3
 8000b40:	428c      	cmp	r4, r1
 8000b42:	d23a      	bcs.n	8000bba <__aeabi_ddiv+0x502>
 8000b44:	4288      	cmp	r0, r1
 8000b46:	d863      	bhi.n	8000c10 <__aeabi_ddiv+0x558>
 8000b48:	d060      	beq.n	8000c0c <__aeabi_ddiv+0x554>
 8000b4a:	4690      	mov	r8, r2
 8000b4c:	e752      	b.n	80009f4 <__aeabi_ddiv+0x33c>
 8000b4e:	42aa      	cmp	r2, r5
 8000b50:	d900      	bls.n	8000b54 <__aeabi_ddiv+0x49c>
 8000b52:	e6ea      	b.n	800092a <__aeabi_ddiv+0x272>
 8000b54:	4643      	mov	r3, r8
 8000b56:	07de      	lsls	r6, r3, #31
 8000b58:	0858      	lsrs	r0, r3, #1
 8000b5a:	086b      	lsrs	r3, r5, #1
 8000b5c:	431e      	orrs	r6, r3
 8000b5e:	07ed      	lsls	r5, r5, #31
 8000b60:	e6ea      	b.n	8000938 <__aeabi_ddiv+0x280>
 8000b62:	4648      	mov	r0, r9
 8000b64:	f000 ff58 	bl	8001a18 <__clzsi2>
 8000b68:	0001      	movs	r1, r0
 8000b6a:	0002      	movs	r2, r0
 8000b6c:	3115      	adds	r1, #21
 8000b6e:	3220      	adds	r2, #32
 8000b70:	291c      	cmp	r1, #28
 8000b72:	dc00      	bgt.n	8000b76 <__aeabi_ddiv+0x4be>
 8000b74:	e61a      	b.n	80007ac <__aeabi_ddiv+0xf4>
 8000b76:	464b      	mov	r3, r9
 8000b78:	3808      	subs	r0, #8
 8000b7a:	4083      	lsls	r3, r0
 8000b7c:	2500      	movs	r5, #0
 8000b7e:	4698      	mov	r8, r3
 8000b80:	e620      	b.n	80007c4 <__aeabi_ddiv+0x10c>
 8000b82:	f000 ff49 	bl	8001a18 <__clzsi2>
 8000b86:	0003      	movs	r3, r0
 8000b88:	001a      	movs	r2, r3
 8000b8a:	3215      	adds	r2, #21
 8000b8c:	3020      	adds	r0, #32
 8000b8e:	2a1c      	cmp	r2, #28
 8000b90:	dc00      	bgt.n	8000b94 <__aeabi_ddiv+0x4dc>
 8000b92:	e630      	b.n	80007f6 <__aeabi_ddiv+0x13e>
 8000b94:	4654      	mov	r4, sl
 8000b96:	3b08      	subs	r3, #8
 8000b98:	2200      	movs	r2, #0
 8000b9a:	409c      	lsls	r4, r3
 8000b9c:	e635      	b.n	800080a <__aeabi_ddiv+0x152>
 8000b9e:	230f      	movs	r3, #15
 8000ba0:	402b      	ands	r3, r5
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_ddiv+0x4f0>
 8000ba6:	e652      	b.n	800084e <__aeabi_ddiv+0x196>
 8000ba8:	2305      	movs	r3, #5
 8000baa:	425b      	negs	r3, r3
 8000bac:	42ab      	cmp	r3, r5
 8000bae:	419b      	sbcs	r3, r3
 8000bb0:	3504      	adds	r5, #4
 8000bb2:	425b      	negs	r3, r3
 8000bb4:	08ed      	lsrs	r5, r5, #3
 8000bb6:	4498      	add	r8, r3
 8000bb8:	e64a      	b.n	8000850 <__aeabi_ddiv+0x198>
 8000bba:	428c      	cmp	r4, r1
 8000bbc:	d1c5      	bne.n	8000b4a <__aeabi_ddiv+0x492>
 8000bbe:	42af      	cmp	r7, r5
 8000bc0:	d9c0      	bls.n	8000b44 <__aeabi_ddiv+0x48c>
 8000bc2:	4690      	mov	r8, r2
 8000bc4:	e716      	b.n	80009f4 <__aeabi_ddiv+0x33c>
 8000bc6:	428a      	cmp	r2, r1
 8000bc8:	d800      	bhi.n	8000bcc <__aeabi_ddiv+0x514>
 8000bca:	e6ea      	b.n	80009a2 <__aeabi_ddiv+0x2ea>
 8000bcc:	1e83      	subs	r3, r0, #2
 8000bce:	1909      	adds	r1, r1, r4
 8000bd0:	e6e7      	b.n	80009a2 <__aeabi_ddiv+0x2ea>
 8000bd2:	4a2a      	ldr	r2, [pc, #168]	; (8000c7c <__aeabi_ddiv+0x5c4>)
 8000bd4:	0028      	movs	r0, r5
 8000bd6:	445a      	add	r2, fp
 8000bd8:	4643      	mov	r3, r8
 8000bda:	4095      	lsls	r5, r2
 8000bdc:	4093      	lsls	r3, r2
 8000bde:	40c8      	lsrs	r0, r1
 8000be0:	1e6a      	subs	r2, r5, #1
 8000be2:	4195      	sbcs	r5, r2
 8000be4:	4644      	mov	r4, r8
 8000be6:	4303      	orrs	r3, r0
 8000be8:	432b      	orrs	r3, r5
 8000bea:	40cc      	lsrs	r4, r1
 8000bec:	075a      	lsls	r2, r3, #29
 8000bee:	d092      	beq.n	8000b16 <__aeabi_ddiv+0x45e>
 8000bf0:	220f      	movs	r2, #15
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	2a04      	cmp	r2, #4
 8000bf6:	d188      	bne.n	8000b0a <__aeabi_ddiv+0x452>
 8000bf8:	e78d      	b.n	8000b16 <__aeabi_ddiv+0x45e>
 8000bfa:	0035      	movs	r5, r6
 8000bfc:	4281      	cmp	r1, r0
 8000bfe:	d000      	beq.n	8000c02 <__aeabi_ddiv+0x54a>
 8000c00:	e74b      	b.n	8000a9a <__aeabi_ddiv+0x3e2>
 8000c02:	9a00      	ldr	r2, [sp, #0]
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d000      	beq.n	8000c0a <__aeabi_ddiv+0x552>
 8000c08:	e747      	b.n	8000a9a <__aeabi_ddiv+0x3e2>
 8000c0a:	e618      	b.n	800083e <__aeabi_ddiv+0x186>
 8000c0c:	42ae      	cmp	r6, r5
 8000c0e:	d99c      	bls.n	8000b4a <__aeabi_ddiv+0x492>
 8000c10:	2302      	movs	r3, #2
 8000c12:	425b      	negs	r3, r3
 8000c14:	469c      	mov	ip, r3
 8000c16:	9b00      	ldr	r3, [sp, #0]
 8000c18:	44e0      	add	r8, ip
 8000c1a:	469c      	mov	ip, r3
 8000c1c:	4465      	add	r5, ip
 8000c1e:	429d      	cmp	r5, r3
 8000c20:	419b      	sbcs	r3, r3
 8000c22:	425b      	negs	r3, r3
 8000c24:	191b      	adds	r3, r3, r4
 8000c26:	18c9      	adds	r1, r1, r3
 8000c28:	e6e4      	b.n	80009f4 <__aeabi_ddiv+0x33c>
 8000c2a:	4a15      	ldr	r2, [pc, #84]	; (8000c80 <__aeabi_ddiv+0x5c8>)
 8000c2c:	445a      	add	r2, fp
 8000c2e:	2a00      	cmp	r2, #0
 8000c30:	dc00      	bgt.n	8000c34 <__aeabi_ddiv+0x57c>
 8000c32:	e744      	b.n	8000abe <__aeabi_ddiv+0x406>
 8000c34:	2301      	movs	r3, #1
 8000c36:	2500      	movs	r5, #0
 8000c38:	4498      	add	r8, r3
 8000c3a:	e609      	b.n	8000850 <__aeabi_ddiv+0x198>
 8000c3c:	0765      	lsls	r5, r4, #29
 8000c3e:	0264      	lsls	r4, r4, #9
 8000c40:	0b24      	lsrs	r4, r4, #12
 8000c42:	08db      	lsrs	r3, r3, #3
 8000c44:	431d      	orrs	r5, r3
 8000c46:	2300      	movs	r3, #0
 8000c48:	e590      	b.n	800076c <__aeabi_ddiv+0xb4>
 8000c4a:	9e00      	ldr	r6, [sp, #0]
 8000c4c:	3d02      	subs	r5, #2
 8000c4e:	0072      	lsls	r2, r6, #1
 8000c50:	42b2      	cmp	r2, r6
 8000c52:	41bf      	sbcs	r7, r7
 8000c54:	427f      	negs	r7, r7
 8000c56:	193c      	adds	r4, r7, r4
 8000c58:	1909      	adds	r1, r1, r4
 8000c5a:	9200      	str	r2, [sp, #0]
 8000c5c:	e7ce      	b.n	8000bfc <__aeabi_ddiv+0x544>
 8000c5e:	2480      	movs	r4, #128	; 0x80
 8000c60:	4643      	mov	r3, r8
 8000c62:	0324      	lsls	r4, r4, #12
 8000c64:	431c      	orrs	r4, r3
 8000c66:	0324      	lsls	r4, r4, #12
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <__aeabi_ddiv+0x5cc>)
 8000c6a:	0b24      	lsrs	r4, r4, #12
 8000c6c:	e57e      	b.n	800076c <__aeabi_ddiv+0xb4>
 8000c6e:	9a00      	ldr	r2, [sp, #0]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d3ea      	bcc.n	8000c4a <__aeabi_ddiv+0x592>
 8000c74:	0035      	movs	r5, r6
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_ddiv+0x54a>
 8000c78:	0000043e 	.word	0x0000043e
 8000c7c:	0000041e 	.word	0x0000041e
 8000c80:	000003ff 	.word	0x000003ff
 8000c84:	000007ff 	.word	0x000007ff

08000c88 <__aeabi_dmul>:
 8000c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c8a:	4657      	mov	r7, sl
 8000c8c:	464e      	mov	r6, r9
 8000c8e:	4645      	mov	r5, r8
 8000c90:	46de      	mov	lr, fp
 8000c92:	b5e0      	push	{r5, r6, r7, lr}
 8000c94:	4698      	mov	r8, r3
 8000c96:	030c      	lsls	r4, r1, #12
 8000c98:	004b      	lsls	r3, r1, #1
 8000c9a:	0006      	movs	r6, r0
 8000c9c:	4692      	mov	sl, r2
 8000c9e:	b087      	sub	sp, #28
 8000ca0:	0b24      	lsrs	r4, r4, #12
 8000ca2:	0d5b      	lsrs	r3, r3, #21
 8000ca4:	0fcf      	lsrs	r7, r1, #31
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d06c      	beq.n	8000d84 <__aeabi_dmul+0xfc>
 8000caa:	4add      	ldr	r2, [pc, #884]	; (8001020 <__aeabi_dmul+0x398>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d100      	bne.n	8000cb2 <__aeabi_dmul+0x2a>
 8000cb0:	e086      	b.n	8000dc0 <__aeabi_dmul+0x138>
 8000cb2:	0f42      	lsrs	r2, r0, #29
 8000cb4:	00e4      	lsls	r4, r4, #3
 8000cb6:	4314      	orrs	r4, r2
 8000cb8:	2280      	movs	r2, #128	; 0x80
 8000cba:	0412      	lsls	r2, r2, #16
 8000cbc:	4314      	orrs	r4, r2
 8000cbe:	4ad9      	ldr	r2, [pc, #868]	; (8001024 <__aeabi_dmul+0x39c>)
 8000cc0:	00c5      	lsls	r5, r0, #3
 8000cc2:	4694      	mov	ip, r2
 8000cc4:	4463      	add	r3, ip
 8000cc6:	9300      	str	r3, [sp, #0]
 8000cc8:	2300      	movs	r3, #0
 8000cca:	4699      	mov	r9, r3
 8000ccc:	469b      	mov	fp, r3
 8000cce:	4643      	mov	r3, r8
 8000cd0:	4642      	mov	r2, r8
 8000cd2:	031e      	lsls	r6, r3, #12
 8000cd4:	0fd2      	lsrs	r2, r2, #31
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	4650      	mov	r0, sl
 8000cda:	4690      	mov	r8, r2
 8000cdc:	0b36      	lsrs	r6, r6, #12
 8000cde:	0d5b      	lsrs	r3, r3, #21
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_dmul+0x5c>
 8000ce2:	e078      	b.n	8000dd6 <__aeabi_dmul+0x14e>
 8000ce4:	4ace      	ldr	r2, [pc, #824]	; (8001020 <__aeabi_dmul+0x398>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d01d      	beq.n	8000d26 <__aeabi_dmul+0x9e>
 8000cea:	49ce      	ldr	r1, [pc, #824]	; (8001024 <__aeabi_dmul+0x39c>)
 8000cec:	0f42      	lsrs	r2, r0, #29
 8000cee:	468c      	mov	ip, r1
 8000cf0:	9900      	ldr	r1, [sp, #0]
 8000cf2:	4463      	add	r3, ip
 8000cf4:	00f6      	lsls	r6, r6, #3
 8000cf6:	468c      	mov	ip, r1
 8000cf8:	4316      	orrs	r6, r2
 8000cfa:	2280      	movs	r2, #128	; 0x80
 8000cfc:	449c      	add	ip, r3
 8000cfe:	0412      	lsls	r2, r2, #16
 8000d00:	4663      	mov	r3, ip
 8000d02:	4316      	orrs	r6, r2
 8000d04:	00c2      	lsls	r2, r0, #3
 8000d06:	2000      	movs	r0, #0
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	9900      	ldr	r1, [sp, #0]
 8000d0c:	4643      	mov	r3, r8
 8000d0e:	3101      	adds	r1, #1
 8000d10:	468c      	mov	ip, r1
 8000d12:	4649      	mov	r1, r9
 8000d14:	407b      	eors	r3, r7
 8000d16:	9301      	str	r3, [sp, #4]
 8000d18:	290f      	cmp	r1, #15
 8000d1a:	d900      	bls.n	8000d1e <__aeabi_dmul+0x96>
 8000d1c:	e07e      	b.n	8000e1c <__aeabi_dmul+0x194>
 8000d1e:	4bc2      	ldr	r3, [pc, #776]	; (8001028 <__aeabi_dmul+0x3a0>)
 8000d20:	0089      	lsls	r1, r1, #2
 8000d22:	5859      	ldr	r1, [r3, r1]
 8000d24:	468f      	mov	pc, r1
 8000d26:	4652      	mov	r2, sl
 8000d28:	9b00      	ldr	r3, [sp, #0]
 8000d2a:	4332      	orrs	r2, r6
 8000d2c:	d000      	beq.n	8000d30 <__aeabi_dmul+0xa8>
 8000d2e:	e156      	b.n	8000fde <__aeabi_dmul+0x356>
 8000d30:	49bb      	ldr	r1, [pc, #748]	; (8001020 <__aeabi_dmul+0x398>)
 8000d32:	2600      	movs	r6, #0
 8000d34:	468c      	mov	ip, r1
 8000d36:	4463      	add	r3, ip
 8000d38:	4649      	mov	r1, r9
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	4319      	orrs	r1, r3
 8000d40:	4689      	mov	r9, r1
 8000d42:	2002      	movs	r0, #2
 8000d44:	e7e1      	b.n	8000d0a <__aeabi_dmul+0x82>
 8000d46:	4643      	mov	r3, r8
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	0034      	movs	r4, r6
 8000d4c:	0015      	movs	r5, r2
 8000d4e:	4683      	mov	fp, r0
 8000d50:	465b      	mov	r3, fp
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d05e      	beq.n	8000e14 <__aeabi_dmul+0x18c>
 8000d56:	2b03      	cmp	r3, #3
 8000d58:	d100      	bne.n	8000d5c <__aeabi_dmul+0xd4>
 8000d5a:	e1f3      	b.n	8001144 <__aeabi_dmul+0x4bc>
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d000      	beq.n	8000d62 <__aeabi_dmul+0xda>
 8000d60:	e118      	b.n	8000f94 <__aeabi_dmul+0x30c>
 8000d62:	2200      	movs	r2, #0
 8000d64:	2400      	movs	r4, #0
 8000d66:	2500      	movs	r5, #0
 8000d68:	9b01      	ldr	r3, [sp, #4]
 8000d6a:	0512      	lsls	r2, r2, #20
 8000d6c:	4322      	orrs	r2, r4
 8000d6e:	07db      	lsls	r3, r3, #31
 8000d70:	431a      	orrs	r2, r3
 8000d72:	0028      	movs	r0, r5
 8000d74:	0011      	movs	r1, r2
 8000d76:	b007      	add	sp, #28
 8000d78:	bcf0      	pop	{r4, r5, r6, r7}
 8000d7a:	46bb      	mov	fp, r7
 8000d7c:	46b2      	mov	sl, r6
 8000d7e:	46a9      	mov	r9, r5
 8000d80:	46a0      	mov	r8, r4
 8000d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d84:	0025      	movs	r5, r4
 8000d86:	4305      	orrs	r5, r0
 8000d88:	d100      	bne.n	8000d8c <__aeabi_dmul+0x104>
 8000d8a:	e141      	b.n	8001010 <__aeabi_dmul+0x388>
 8000d8c:	2c00      	cmp	r4, #0
 8000d8e:	d100      	bne.n	8000d92 <__aeabi_dmul+0x10a>
 8000d90:	e1ad      	b.n	80010ee <__aeabi_dmul+0x466>
 8000d92:	0020      	movs	r0, r4
 8000d94:	f000 fe40 	bl	8001a18 <__clzsi2>
 8000d98:	0001      	movs	r1, r0
 8000d9a:	0002      	movs	r2, r0
 8000d9c:	390b      	subs	r1, #11
 8000d9e:	231d      	movs	r3, #29
 8000da0:	0010      	movs	r0, r2
 8000da2:	1a5b      	subs	r3, r3, r1
 8000da4:	0031      	movs	r1, r6
 8000da6:	0035      	movs	r5, r6
 8000da8:	3808      	subs	r0, #8
 8000daa:	4084      	lsls	r4, r0
 8000dac:	40d9      	lsrs	r1, r3
 8000dae:	4085      	lsls	r5, r0
 8000db0:	430c      	orrs	r4, r1
 8000db2:	489e      	ldr	r0, [pc, #632]	; (800102c <__aeabi_dmul+0x3a4>)
 8000db4:	1a83      	subs	r3, r0, r2
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2300      	movs	r3, #0
 8000dba:	4699      	mov	r9, r3
 8000dbc:	469b      	mov	fp, r3
 8000dbe:	e786      	b.n	8000cce <__aeabi_dmul+0x46>
 8000dc0:	0005      	movs	r5, r0
 8000dc2:	4325      	orrs	r5, r4
 8000dc4:	d000      	beq.n	8000dc8 <__aeabi_dmul+0x140>
 8000dc6:	e11c      	b.n	8001002 <__aeabi_dmul+0x37a>
 8000dc8:	2208      	movs	r2, #8
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	2302      	movs	r3, #2
 8000dce:	2400      	movs	r4, #0
 8000dd0:	4691      	mov	r9, r2
 8000dd2:	469b      	mov	fp, r3
 8000dd4:	e77b      	b.n	8000cce <__aeabi_dmul+0x46>
 8000dd6:	4652      	mov	r2, sl
 8000dd8:	4332      	orrs	r2, r6
 8000dda:	d100      	bne.n	8000dde <__aeabi_dmul+0x156>
 8000ddc:	e10a      	b.n	8000ff4 <__aeabi_dmul+0x36c>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	d100      	bne.n	8000de4 <__aeabi_dmul+0x15c>
 8000de2:	e176      	b.n	80010d2 <__aeabi_dmul+0x44a>
 8000de4:	0030      	movs	r0, r6
 8000de6:	f000 fe17 	bl	8001a18 <__clzsi2>
 8000dea:	0002      	movs	r2, r0
 8000dec:	3a0b      	subs	r2, #11
 8000dee:	231d      	movs	r3, #29
 8000df0:	0001      	movs	r1, r0
 8000df2:	1a9b      	subs	r3, r3, r2
 8000df4:	4652      	mov	r2, sl
 8000df6:	3908      	subs	r1, #8
 8000df8:	40da      	lsrs	r2, r3
 8000dfa:	408e      	lsls	r6, r1
 8000dfc:	4316      	orrs	r6, r2
 8000dfe:	4652      	mov	r2, sl
 8000e00:	408a      	lsls	r2, r1
 8000e02:	9b00      	ldr	r3, [sp, #0]
 8000e04:	4989      	ldr	r1, [pc, #548]	; (800102c <__aeabi_dmul+0x3a4>)
 8000e06:	1a18      	subs	r0, r3, r0
 8000e08:	0003      	movs	r3, r0
 8000e0a:	468c      	mov	ip, r1
 8000e0c:	4463      	add	r3, ip
 8000e0e:	2000      	movs	r0, #0
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	e77a      	b.n	8000d0a <__aeabi_dmul+0x82>
 8000e14:	2400      	movs	r4, #0
 8000e16:	2500      	movs	r5, #0
 8000e18:	4a81      	ldr	r2, [pc, #516]	; (8001020 <__aeabi_dmul+0x398>)
 8000e1a:	e7a5      	b.n	8000d68 <__aeabi_dmul+0xe0>
 8000e1c:	0c2f      	lsrs	r7, r5, #16
 8000e1e:	042d      	lsls	r5, r5, #16
 8000e20:	0c2d      	lsrs	r5, r5, #16
 8000e22:	002b      	movs	r3, r5
 8000e24:	0c11      	lsrs	r1, r2, #16
 8000e26:	0412      	lsls	r2, r2, #16
 8000e28:	0c12      	lsrs	r2, r2, #16
 8000e2a:	4353      	muls	r3, r2
 8000e2c:	4698      	mov	r8, r3
 8000e2e:	0013      	movs	r3, r2
 8000e30:	0028      	movs	r0, r5
 8000e32:	437b      	muls	r3, r7
 8000e34:	4699      	mov	r9, r3
 8000e36:	4348      	muls	r0, r1
 8000e38:	4448      	add	r0, r9
 8000e3a:	4683      	mov	fp, r0
 8000e3c:	4640      	mov	r0, r8
 8000e3e:	000b      	movs	r3, r1
 8000e40:	0c00      	lsrs	r0, r0, #16
 8000e42:	4682      	mov	sl, r0
 8000e44:	4658      	mov	r0, fp
 8000e46:	437b      	muls	r3, r7
 8000e48:	4450      	add	r0, sl
 8000e4a:	9302      	str	r3, [sp, #8]
 8000e4c:	4581      	cmp	r9, r0
 8000e4e:	d906      	bls.n	8000e5e <__aeabi_dmul+0x1d6>
 8000e50:	469a      	mov	sl, r3
 8000e52:	2380      	movs	r3, #128	; 0x80
 8000e54:	025b      	lsls	r3, r3, #9
 8000e56:	4699      	mov	r9, r3
 8000e58:	44ca      	add	sl, r9
 8000e5a:	4653      	mov	r3, sl
 8000e5c:	9302      	str	r3, [sp, #8]
 8000e5e:	0c03      	lsrs	r3, r0, #16
 8000e60:	469b      	mov	fp, r3
 8000e62:	4643      	mov	r3, r8
 8000e64:	041b      	lsls	r3, r3, #16
 8000e66:	0400      	lsls	r0, r0, #16
 8000e68:	0c1b      	lsrs	r3, r3, #16
 8000e6a:	4698      	mov	r8, r3
 8000e6c:	0003      	movs	r3, r0
 8000e6e:	4443      	add	r3, r8
 8000e70:	9304      	str	r3, [sp, #16]
 8000e72:	0c33      	lsrs	r3, r6, #16
 8000e74:	4699      	mov	r9, r3
 8000e76:	002b      	movs	r3, r5
 8000e78:	0436      	lsls	r6, r6, #16
 8000e7a:	0c36      	lsrs	r6, r6, #16
 8000e7c:	4373      	muls	r3, r6
 8000e7e:	4698      	mov	r8, r3
 8000e80:	0033      	movs	r3, r6
 8000e82:	437b      	muls	r3, r7
 8000e84:	469a      	mov	sl, r3
 8000e86:	464b      	mov	r3, r9
 8000e88:	435d      	muls	r5, r3
 8000e8a:	435f      	muls	r7, r3
 8000e8c:	4643      	mov	r3, r8
 8000e8e:	4455      	add	r5, sl
 8000e90:	0c18      	lsrs	r0, r3, #16
 8000e92:	1940      	adds	r0, r0, r5
 8000e94:	4582      	cmp	sl, r0
 8000e96:	d903      	bls.n	8000ea0 <__aeabi_dmul+0x218>
 8000e98:	2380      	movs	r3, #128	; 0x80
 8000e9a:	025b      	lsls	r3, r3, #9
 8000e9c:	469a      	mov	sl, r3
 8000e9e:	4457      	add	r7, sl
 8000ea0:	0c05      	lsrs	r5, r0, #16
 8000ea2:	19eb      	adds	r3, r5, r7
 8000ea4:	9305      	str	r3, [sp, #20]
 8000ea6:	4643      	mov	r3, r8
 8000ea8:	041d      	lsls	r5, r3, #16
 8000eaa:	0c2d      	lsrs	r5, r5, #16
 8000eac:	0400      	lsls	r0, r0, #16
 8000eae:	1940      	adds	r0, r0, r5
 8000eb0:	0c25      	lsrs	r5, r4, #16
 8000eb2:	0424      	lsls	r4, r4, #16
 8000eb4:	0c24      	lsrs	r4, r4, #16
 8000eb6:	0027      	movs	r7, r4
 8000eb8:	4357      	muls	r7, r2
 8000eba:	436a      	muls	r2, r5
 8000ebc:	4690      	mov	r8, r2
 8000ebe:	002a      	movs	r2, r5
 8000ec0:	0c3b      	lsrs	r3, r7, #16
 8000ec2:	469a      	mov	sl, r3
 8000ec4:	434a      	muls	r2, r1
 8000ec6:	4361      	muls	r1, r4
 8000ec8:	4441      	add	r1, r8
 8000eca:	4451      	add	r1, sl
 8000ecc:	4483      	add	fp, r0
 8000ece:	4588      	cmp	r8, r1
 8000ed0:	d903      	bls.n	8000eda <__aeabi_dmul+0x252>
 8000ed2:	2380      	movs	r3, #128	; 0x80
 8000ed4:	025b      	lsls	r3, r3, #9
 8000ed6:	4698      	mov	r8, r3
 8000ed8:	4442      	add	r2, r8
 8000eda:	043f      	lsls	r7, r7, #16
 8000edc:	0c0b      	lsrs	r3, r1, #16
 8000ede:	0c3f      	lsrs	r7, r7, #16
 8000ee0:	0409      	lsls	r1, r1, #16
 8000ee2:	19c9      	adds	r1, r1, r7
 8000ee4:	0027      	movs	r7, r4
 8000ee6:	4698      	mov	r8, r3
 8000ee8:	464b      	mov	r3, r9
 8000eea:	4377      	muls	r7, r6
 8000eec:	435c      	muls	r4, r3
 8000eee:	436e      	muls	r6, r5
 8000ef0:	435d      	muls	r5, r3
 8000ef2:	0c3b      	lsrs	r3, r7, #16
 8000ef4:	4699      	mov	r9, r3
 8000ef6:	19a4      	adds	r4, r4, r6
 8000ef8:	444c      	add	r4, r9
 8000efa:	4442      	add	r2, r8
 8000efc:	9503      	str	r5, [sp, #12]
 8000efe:	42a6      	cmp	r6, r4
 8000f00:	d904      	bls.n	8000f0c <__aeabi_dmul+0x284>
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	025b      	lsls	r3, r3, #9
 8000f06:	4698      	mov	r8, r3
 8000f08:	4445      	add	r5, r8
 8000f0a:	9503      	str	r5, [sp, #12]
 8000f0c:	9b02      	ldr	r3, [sp, #8]
 8000f0e:	043f      	lsls	r7, r7, #16
 8000f10:	445b      	add	r3, fp
 8000f12:	001e      	movs	r6, r3
 8000f14:	4283      	cmp	r3, r0
 8000f16:	4180      	sbcs	r0, r0
 8000f18:	0423      	lsls	r3, r4, #16
 8000f1a:	4698      	mov	r8, r3
 8000f1c:	9b05      	ldr	r3, [sp, #20]
 8000f1e:	0c3f      	lsrs	r7, r7, #16
 8000f20:	4447      	add	r7, r8
 8000f22:	4698      	mov	r8, r3
 8000f24:	1876      	adds	r6, r6, r1
 8000f26:	428e      	cmp	r6, r1
 8000f28:	4189      	sbcs	r1, r1
 8000f2a:	4447      	add	r7, r8
 8000f2c:	4240      	negs	r0, r0
 8000f2e:	183d      	adds	r5, r7, r0
 8000f30:	46a8      	mov	r8, r5
 8000f32:	4693      	mov	fp, r2
 8000f34:	4249      	negs	r1, r1
 8000f36:	468a      	mov	sl, r1
 8000f38:	44c3      	add	fp, r8
 8000f3a:	429f      	cmp	r7, r3
 8000f3c:	41bf      	sbcs	r7, r7
 8000f3e:	4580      	cmp	r8, r0
 8000f40:	4180      	sbcs	r0, r0
 8000f42:	9b03      	ldr	r3, [sp, #12]
 8000f44:	44da      	add	sl, fp
 8000f46:	4698      	mov	r8, r3
 8000f48:	4653      	mov	r3, sl
 8000f4a:	4240      	negs	r0, r0
 8000f4c:	427f      	negs	r7, r7
 8000f4e:	4307      	orrs	r7, r0
 8000f50:	0c24      	lsrs	r4, r4, #16
 8000f52:	4593      	cmp	fp, r2
 8000f54:	4192      	sbcs	r2, r2
 8000f56:	458a      	cmp	sl, r1
 8000f58:	4189      	sbcs	r1, r1
 8000f5a:	193f      	adds	r7, r7, r4
 8000f5c:	0ddc      	lsrs	r4, r3, #23
 8000f5e:	9b04      	ldr	r3, [sp, #16]
 8000f60:	0275      	lsls	r5, r6, #9
 8000f62:	431d      	orrs	r5, r3
 8000f64:	1e68      	subs	r0, r5, #1
 8000f66:	4185      	sbcs	r5, r0
 8000f68:	4653      	mov	r3, sl
 8000f6a:	4252      	negs	r2, r2
 8000f6c:	4249      	negs	r1, r1
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	18bf      	adds	r7, r7, r2
 8000f72:	4447      	add	r7, r8
 8000f74:	0df6      	lsrs	r6, r6, #23
 8000f76:	027f      	lsls	r7, r7, #9
 8000f78:	4335      	orrs	r5, r6
 8000f7a:	025a      	lsls	r2, r3, #9
 8000f7c:	433c      	orrs	r4, r7
 8000f7e:	4315      	orrs	r5, r2
 8000f80:	01fb      	lsls	r3, r7, #7
 8000f82:	d400      	bmi.n	8000f86 <__aeabi_dmul+0x2fe>
 8000f84:	e0c1      	b.n	800110a <__aeabi_dmul+0x482>
 8000f86:	2101      	movs	r1, #1
 8000f88:	086a      	lsrs	r2, r5, #1
 8000f8a:	400d      	ands	r5, r1
 8000f8c:	4315      	orrs	r5, r2
 8000f8e:	07e2      	lsls	r2, r4, #31
 8000f90:	4315      	orrs	r5, r2
 8000f92:	0864      	lsrs	r4, r4, #1
 8000f94:	4926      	ldr	r1, [pc, #152]	; (8001030 <__aeabi_dmul+0x3a8>)
 8000f96:	4461      	add	r1, ip
 8000f98:	2900      	cmp	r1, #0
 8000f9a:	dd56      	ble.n	800104a <__aeabi_dmul+0x3c2>
 8000f9c:	076b      	lsls	r3, r5, #29
 8000f9e:	d009      	beq.n	8000fb4 <__aeabi_dmul+0x32c>
 8000fa0:	220f      	movs	r2, #15
 8000fa2:	402a      	ands	r2, r5
 8000fa4:	2a04      	cmp	r2, #4
 8000fa6:	d005      	beq.n	8000fb4 <__aeabi_dmul+0x32c>
 8000fa8:	1d2a      	adds	r2, r5, #4
 8000faa:	42aa      	cmp	r2, r5
 8000fac:	41ad      	sbcs	r5, r5
 8000fae:	426d      	negs	r5, r5
 8000fb0:	1964      	adds	r4, r4, r5
 8000fb2:	0015      	movs	r5, r2
 8000fb4:	01e3      	lsls	r3, r4, #7
 8000fb6:	d504      	bpl.n	8000fc2 <__aeabi_dmul+0x33a>
 8000fb8:	2180      	movs	r1, #128	; 0x80
 8000fba:	4a1e      	ldr	r2, [pc, #120]	; (8001034 <__aeabi_dmul+0x3ac>)
 8000fbc:	00c9      	lsls	r1, r1, #3
 8000fbe:	4014      	ands	r4, r2
 8000fc0:	4461      	add	r1, ip
 8000fc2:	4a1d      	ldr	r2, [pc, #116]	; (8001038 <__aeabi_dmul+0x3b0>)
 8000fc4:	4291      	cmp	r1, r2
 8000fc6:	dd00      	ble.n	8000fca <__aeabi_dmul+0x342>
 8000fc8:	e724      	b.n	8000e14 <__aeabi_dmul+0x18c>
 8000fca:	0762      	lsls	r2, r4, #29
 8000fcc:	08ed      	lsrs	r5, r5, #3
 8000fce:	0264      	lsls	r4, r4, #9
 8000fd0:	0549      	lsls	r1, r1, #21
 8000fd2:	4315      	orrs	r5, r2
 8000fd4:	0b24      	lsrs	r4, r4, #12
 8000fd6:	0d4a      	lsrs	r2, r1, #21
 8000fd8:	e6c6      	b.n	8000d68 <__aeabi_dmul+0xe0>
 8000fda:	9701      	str	r7, [sp, #4]
 8000fdc:	e6b8      	b.n	8000d50 <__aeabi_dmul+0xc8>
 8000fde:	4a10      	ldr	r2, [pc, #64]	; (8001020 <__aeabi_dmul+0x398>)
 8000fe0:	2003      	movs	r0, #3
 8000fe2:	4694      	mov	ip, r2
 8000fe4:	4463      	add	r3, ip
 8000fe6:	464a      	mov	r2, r9
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2303      	movs	r3, #3
 8000fec:	431a      	orrs	r2, r3
 8000fee:	4691      	mov	r9, r2
 8000ff0:	4652      	mov	r2, sl
 8000ff2:	e68a      	b.n	8000d0a <__aeabi_dmul+0x82>
 8000ff4:	4649      	mov	r1, r9
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	4319      	orrs	r1, r3
 8000ffa:	4689      	mov	r9, r1
 8000ffc:	2600      	movs	r6, #0
 8000ffe:	2001      	movs	r0, #1
 8001000:	e683      	b.n	8000d0a <__aeabi_dmul+0x82>
 8001002:	220c      	movs	r2, #12
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2303      	movs	r3, #3
 8001008:	0005      	movs	r5, r0
 800100a:	4691      	mov	r9, r2
 800100c:	469b      	mov	fp, r3
 800100e:	e65e      	b.n	8000cce <__aeabi_dmul+0x46>
 8001010:	2304      	movs	r3, #4
 8001012:	4699      	mov	r9, r3
 8001014:	2300      	movs	r3, #0
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	2400      	movs	r4, #0
 800101c:	469b      	mov	fp, r3
 800101e:	e656      	b.n	8000cce <__aeabi_dmul+0x46>
 8001020:	000007ff 	.word	0x000007ff
 8001024:	fffffc01 	.word	0xfffffc01
 8001028:	08008df8 	.word	0x08008df8
 800102c:	fffffc0d 	.word	0xfffffc0d
 8001030:	000003ff 	.word	0x000003ff
 8001034:	feffffff 	.word	0xfeffffff
 8001038:	000007fe 	.word	0x000007fe
 800103c:	2300      	movs	r3, #0
 800103e:	2480      	movs	r4, #128	; 0x80
 8001040:	2500      	movs	r5, #0
 8001042:	4a44      	ldr	r2, [pc, #272]	; (8001154 <__aeabi_dmul+0x4cc>)
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	0324      	lsls	r4, r4, #12
 8001048:	e68e      	b.n	8000d68 <__aeabi_dmul+0xe0>
 800104a:	2001      	movs	r0, #1
 800104c:	1a40      	subs	r0, r0, r1
 800104e:	2838      	cmp	r0, #56	; 0x38
 8001050:	dd00      	ble.n	8001054 <__aeabi_dmul+0x3cc>
 8001052:	e686      	b.n	8000d62 <__aeabi_dmul+0xda>
 8001054:	281f      	cmp	r0, #31
 8001056:	dd5b      	ble.n	8001110 <__aeabi_dmul+0x488>
 8001058:	221f      	movs	r2, #31
 800105a:	0023      	movs	r3, r4
 800105c:	4252      	negs	r2, r2
 800105e:	1a51      	subs	r1, r2, r1
 8001060:	40cb      	lsrs	r3, r1
 8001062:	0019      	movs	r1, r3
 8001064:	2820      	cmp	r0, #32
 8001066:	d003      	beq.n	8001070 <__aeabi_dmul+0x3e8>
 8001068:	4a3b      	ldr	r2, [pc, #236]	; (8001158 <__aeabi_dmul+0x4d0>)
 800106a:	4462      	add	r2, ip
 800106c:	4094      	lsls	r4, r2
 800106e:	4325      	orrs	r5, r4
 8001070:	1e6a      	subs	r2, r5, #1
 8001072:	4195      	sbcs	r5, r2
 8001074:	002a      	movs	r2, r5
 8001076:	430a      	orrs	r2, r1
 8001078:	2107      	movs	r1, #7
 800107a:	000d      	movs	r5, r1
 800107c:	2400      	movs	r4, #0
 800107e:	4015      	ands	r5, r2
 8001080:	4211      	tst	r1, r2
 8001082:	d05b      	beq.n	800113c <__aeabi_dmul+0x4b4>
 8001084:	210f      	movs	r1, #15
 8001086:	2400      	movs	r4, #0
 8001088:	4011      	ands	r1, r2
 800108a:	2904      	cmp	r1, #4
 800108c:	d053      	beq.n	8001136 <__aeabi_dmul+0x4ae>
 800108e:	1d11      	adds	r1, r2, #4
 8001090:	4291      	cmp	r1, r2
 8001092:	4192      	sbcs	r2, r2
 8001094:	4252      	negs	r2, r2
 8001096:	18a4      	adds	r4, r4, r2
 8001098:	000a      	movs	r2, r1
 800109a:	0223      	lsls	r3, r4, #8
 800109c:	d54b      	bpl.n	8001136 <__aeabi_dmul+0x4ae>
 800109e:	2201      	movs	r2, #1
 80010a0:	2400      	movs	r4, #0
 80010a2:	2500      	movs	r5, #0
 80010a4:	e660      	b.n	8000d68 <__aeabi_dmul+0xe0>
 80010a6:	2380      	movs	r3, #128	; 0x80
 80010a8:	031b      	lsls	r3, r3, #12
 80010aa:	421c      	tst	r4, r3
 80010ac:	d009      	beq.n	80010c2 <__aeabi_dmul+0x43a>
 80010ae:	421e      	tst	r6, r3
 80010b0:	d107      	bne.n	80010c2 <__aeabi_dmul+0x43a>
 80010b2:	4333      	orrs	r3, r6
 80010b4:	031c      	lsls	r4, r3, #12
 80010b6:	4643      	mov	r3, r8
 80010b8:	0015      	movs	r5, r2
 80010ba:	0b24      	lsrs	r4, r4, #12
 80010bc:	4a25      	ldr	r2, [pc, #148]	; (8001154 <__aeabi_dmul+0x4cc>)
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	e652      	b.n	8000d68 <__aeabi_dmul+0xe0>
 80010c2:	2280      	movs	r2, #128	; 0x80
 80010c4:	0312      	lsls	r2, r2, #12
 80010c6:	4314      	orrs	r4, r2
 80010c8:	0324      	lsls	r4, r4, #12
 80010ca:	4a22      	ldr	r2, [pc, #136]	; (8001154 <__aeabi_dmul+0x4cc>)
 80010cc:	0b24      	lsrs	r4, r4, #12
 80010ce:	9701      	str	r7, [sp, #4]
 80010d0:	e64a      	b.n	8000d68 <__aeabi_dmul+0xe0>
 80010d2:	f000 fca1 	bl	8001a18 <__clzsi2>
 80010d6:	0003      	movs	r3, r0
 80010d8:	001a      	movs	r2, r3
 80010da:	3215      	adds	r2, #21
 80010dc:	3020      	adds	r0, #32
 80010de:	2a1c      	cmp	r2, #28
 80010e0:	dc00      	bgt.n	80010e4 <__aeabi_dmul+0x45c>
 80010e2:	e684      	b.n	8000dee <__aeabi_dmul+0x166>
 80010e4:	4656      	mov	r6, sl
 80010e6:	3b08      	subs	r3, #8
 80010e8:	2200      	movs	r2, #0
 80010ea:	409e      	lsls	r6, r3
 80010ec:	e689      	b.n	8000e02 <__aeabi_dmul+0x17a>
 80010ee:	f000 fc93 	bl	8001a18 <__clzsi2>
 80010f2:	0001      	movs	r1, r0
 80010f4:	0002      	movs	r2, r0
 80010f6:	3115      	adds	r1, #21
 80010f8:	3220      	adds	r2, #32
 80010fa:	291c      	cmp	r1, #28
 80010fc:	dc00      	bgt.n	8001100 <__aeabi_dmul+0x478>
 80010fe:	e64e      	b.n	8000d9e <__aeabi_dmul+0x116>
 8001100:	0034      	movs	r4, r6
 8001102:	3808      	subs	r0, #8
 8001104:	2500      	movs	r5, #0
 8001106:	4084      	lsls	r4, r0
 8001108:	e653      	b.n	8000db2 <__aeabi_dmul+0x12a>
 800110a:	9b00      	ldr	r3, [sp, #0]
 800110c:	469c      	mov	ip, r3
 800110e:	e741      	b.n	8000f94 <__aeabi_dmul+0x30c>
 8001110:	4912      	ldr	r1, [pc, #72]	; (800115c <__aeabi_dmul+0x4d4>)
 8001112:	0022      	movs	r2, r4
 8001114:	4461      	add	r1, ip
 8001116:	002e      	movs	r6, r5
 8001118:	408d      	lsls	r5, r1
 800111a:	408a      	lsls	r2, r1
 800111c:	40c6      	lsrs	r6, r0
 800111e:	1e69      	subs	r1, r5, #1
 8001120:	418d      	sbcs	r5, r1
 8001122:	4332      	orrs	r2, r6
 8001124:	432a      	orrs	r2, r5
 8001126:	40c4      	lsrs	r4, r0
 8001128:	0753      	lsls	r3, r2, #29
 800112a:	d0b6      	beq.n	800109a <__aeabi_dmul+0x412>
 800112c:	210f      	movs	r1, #15
 800112e:	4011      	ands	r1, r2
 8001130:	2904      	cmp	r1, #4
 8001132:	d1ac      	bne.n	800108e <__aeabi_dmul+0x406>
 8001134:	e7b1      	b.n	800109a <__aeabi_dmul+0x412>
 8001136:	0765      	lsls	r5, r4, #29
 8001138:	0264      	lsls	r4, r4, #9
 800113a:	0b24      	lsrs	r4, r4, #12
 800113c:	08d2      	lsrs	r2, r2, #3
 800113e:	4315      	orrs	r5, r2
 8001140:	2200      	movs	r2, #0
 8001142:	e611      	b.n	8000d68 <__aeabi_dmul+0xe0>
 8001144:	2280      	movs	r2, #128	; 0x80
 8001146:	0312      	lsls	r2, r2, #12
 8001148:	4314      	orrs	r4, r2
 800114a:	0324      	lsls	r4, r4, #12
 800114c:	4a01      	ldr	r2, [pc, #4]	; (8001154 <__aeabi_dmul+0x4cc>)
 800114e:	0b24      	lsrs	r4, r4, #12
 8001150:	e60a      	b.n	8000d68 <__aeabi_dmul+0xe0>
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	000007ff 	.word	0x000007ff
 8001158:	0000043e 	.word	0x0000043e
 800115c:	0000041e 	.word	0x0000041e

08001160 <__aeabi_dsub>:
 8001160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001162:	4657      	mov	r7, sl
 8001164:	464e      	mov	r6, r9
 8001166:	4645      	mov	r5, r8
 8001168:	46de      	mov	lr, fp
 800116a:	0004      	movs	r4, r0
 800116c:	b5e0      	push	{r5, r6, r7, lr}
 800116e:	001f      	movs	r7, r3
 8001170:	0010      	movs	r0, r2
 8001172:	030b      	lsls	r3, r1, #12
 8001174:	0f62      	lsrs	r2, r4, #29
 8001176:	004e      	lsls	r6, r1, #1
 8001178:	0fcd      	lsrs	r5, r1, #31
 800117a:	0a5b      	lsrs	r3, r3, #9
 800117c:	0339      	lsls	r1, r7, #12
 800117e:	4313      	orrs	r3, r2
 8001180:	0a49      	lsrs	r1, r1, #9
 8001182:	00e2      	lsls	r2, r4, #3
 8001184:	0f44      	lsrs	r4, r0, #29
 8001186:	4321      	orrs	r1, r4
 8001188:	4cc2      	ldr	r4, [pc, #776]	; (8001494 <__aeabi_dsub+0x334>)
 800118a:	4691      	mov	r9, r2
 800118c:	4692      	mov	sl, r2
 800118e:	00c0      	lsls	r0, r0, #3
 8001190:	007a      	lsls	r2, r7, #1
 8001192:	4680      	mov	r8, r0
 8001194:	0d76      	lsrs	r6, r6, #21
 8001196:	0d52      	lsrs	r2, r2, #21
 8001198:	0fff      	lsrs	r7, r7, #31
 800119a:	42a2      	cmp	r2, r4
 800119c:	d100      	bne.n	80011a0 <__aeabi_dsub+0x40>
 800119e:	e0b4      	b.n	800130a <__aeabi_dsub+0x1aa>
 80011a0:	2401      	movs	r4, #1
 80011a2:	4067      	eors	r7, r4
 80011a4:	46bb      	mov	fp, r7
 80011a6:	42bd      	cmp	r5, r7
 80011a8:	d100      	bne.n	80011ac <__aeabi_dsub+0x4c>
 80011aa:	e088      	b.n	80012be <__aeabi_dsub+0x15e>
 80011ac:	1ab4      	subs	r4, r6, r2
 80011ae:	46a4      	mov	ip, r4
 80011b0:	2c00      	cmp	r4, #0
 80011b2:	dc00      	bgt.n	80011b6 <__aeabi_dsub+0x56>
 80011b4:	e0b2      	b.n	800131c <__aeabi_dsub+0x1bc>
 80011b6:	2a00      	cmp	r2, #0
 80011b8:	d100      	bne.n	80011bc <__aeabi_dsub+0x5c>
 80011ba:	e0c5      	b.n	8001348 <__aeabi_dsub+0x1e8>
 80011bc:	4ab5      	ldr	r2, [pc, #724]	; (8001494 <__aeabi_dsub+0x334>)
 80011be:	4296      	cmp	r6, r2
 80011c0:	d100      	bne.n	80011c4 <__aeabi_dsub+0x64>
 80011c2:	e28b      	b.n	80016dc <__aeabi_dsub+0x57c>
 80011c4:	2280      	movs	r2, #128	; 0x80
 80011c6:	0412      	lsls	r2, r2, #16
 80011c8:	4311      	orrs	r1, r2
 80011ca:	4662      	mov	r2, ip
 80011cc:	2a38      	cmp	r2, #56	; 0x38
 80011ce:	dd00      	ble.n	80011d2 <__aeabi_dsub+0x72>
 80011d0:	e1a1      	b.n	8001516 <__aeabi_dsub+0x3b6>
 80011d2:	2a1f      	cmp	r2, #31
 80011d4:	dd00      	ble.n	80011d8 <__aeabi_dsub+0x78>
 80011d6:	e216      	b.n	8001606 <__aeabi_dsub+0x4a6>
 80011d8:	2720      	movs	r7, #32
 80011da:	000c      	movs	r4, r1
 80011dc:	1abf      	subs	r7, r7, r2
 80011de:	40bc      	lsls	r4, r7
 80011e0:	0002      	movs	r2, r0
 80011e2:	46a0      	mov	r8, r4
 80011e4:	4664      	mov	r4, ip
 80011e6:	40b8      	lsls	r0, r7
 80011e8:	40e2      	lsrs	r2, r4
 80011ea:	4644      	mov	r4, r8
 80011ec:	4314      	orrs	r4, r2
 80011ee:	0002      	movs	r2, r0
 80011f0:	1e50      	subs	r0, r2, #1
 80011f2:	4182      	sbcs	r2, r0
 80011f4:	4660      	mov	r0, ip
 80011f6:	40c1      	lsrs	r1, r0
 80011f8:	4322      	orrs	r2, r4
 80011fa:	1a5b      	subs	r3, r3, r1
 80011fc:	4649      	mov	r1, r9
 80011fe:	1a8c      	subs	r4, r1, r2
 8001200:	45a1      	cmp	r9, r4
 8001202:	4192      	sbcs	r2, r2
 8001204:	4252      	negs	r2, r2
 8001206:	1a9b      	subs	r3, r3, r2
 8001208:	4698      	mov	r8, r3
 800120a:	4643      	mov	r3, r8
 800120c:	021b      	lsls	r3, r3, #8
 800120e:	d400      	bmi.n	8001212 <__aeabi_dsub+0xb2>
 8001210:	e117      	b.n	8001442 <__aeabi_dsub+0x2e2>
 8001212:	4643      	mov	r3, r8
 8001214:	025b      	lsls	r3, r3, #9
 8001216:	0a5b      	lsrs	r3, r3, #9
 8001218:	4698      	mov	r8, r3
 800121a:	4643      	mov	r3, r8
 800121c:	2b00      	cmp	r3, #0
 800121e:	d100      	bne.n	8001222 <__aeabi_dsub+0xc2>
 8001220:	e16c      	b.n	80014fc <__aeabi_dsub+0x39c>
 8001222:	4640      	mov	r0, r8
 8001224:	f000 fbf8 	bl	8001a18 <__clzsi2>
 8001228:	0002      	movs	r2, r0
 800122a:	3a08      	subs	r2, #8
 800122c:	2120      	movs	r1, #32
 800122e:	0020      	movs	r0, r4
 8001230:	4643      	mov	r3, r8
 8001232:	1a89      	subs	r1, r1, r2
 8001234:	4093      	lsls	r3, r2
 8001236:	40c8      	lsrs	r0, r1
 8001238:	4094      	lsls	r4, r2
 800123a:	4303      	orrs	r3, r0
 800123c:	4296      	cmp	r6, r2
 800123e:	dd00      	ble.n	8001242 <__aeabi_dsub+0xe2>
 8001240:	e157      	b.n	80014f2 <__aeabi_dsub+0x392>
 8001242:	1b96      	subs	r6, r2, r6
 8001244:	1c71      	adds	r1, r6, #1
 8001246:	291f      	cmp	r1, #31
 8001248:	dd00      	ble.n	800124c <__aeabi_dsub+0xec>
 800124a:	e1cb      	b.n	80015e4 <__aeabi_dsub+0x484>
 800124c:	2220      	movs	r2, #32
 800124e:	0018      	movs	r0, r3
 8001250:	0026      	movs	r6, r4
 8001252:	1a52      	subs	r2, r2, r1
 8001254:	4094      	lsls	r4, r2
 8001256:	4090      	lsls	r0, r2
 8001258:	40ce      	lsrs	r6, r1
 800125a:	40cb      	lsrs	r3, r1
 800125c:	1e62      	subs	r2, r4, #1
 800125e:	4194      	sbcs	r4, r2
 8001260:	4330      	orrs	r0, r6
 8001262:	4698      	mov	r8, r3
 8001264:	2600      	movs	r6, #0
 8001266:	4304      	orrs	r4, r0
 8001268:	0763      	lsls	r3, r4, #29
 800126a:	d009      	beq.n	8001280 <__aeabi_dsub+0x120>
 800126c:	230f      	movs	r3, #15
 800126e:	4023      	ands	r3, r4
 8001270:	2b04      	cmp	r3, #4
 8001272:	d005      	beq.n	8001280 <__aeabi_dsub+0x120>
 8001274:	1d23      	adds	r3, r4, #4
 8001276:	42a3      	cmp	r3, r4
 8001278:	41a4      	sbcs	r4, r4
 800127a:	4264      	negs	r4, r4
 800127c:	44a0      	add	r8, r4
 800127e:	001c      	movs	r4, r3
 8001280:	4643      	mov	r3, r8
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	d400      	bmi.n	8001288 <__aeabi_dsub+0x128>
 8001286:	e0df      	b.n	8001448 <__aeabi_dsub+0x2e8>
 8001288:	4b82      	ldr	r3, [pc, #520]	; (8001494 <__aeabi_dsub+0x334>)
 800128a:	3601      	adds	r6, #1
 800128c:	429e      	cmp	r6, r3
 800128e:	d100      	bne.n	8001292 <__aeabi_dsub+0x132>
 8001290:	e0fb      	b.n	800148a <__aeabi_dsub+0x32a>
 8001292:	4642      	mov	r2, r8
 8001294:	4b80      	ldr	r3, [pc, #512]	; (8001498 <__aeabi_dsub+0x338>)
 8001296:	08e4      	lsrs	r4, r4, #3
 8001298:	401a      	ands	r2, r3
 800129a:	0013      	movs	r3, r2
 800129c:	0571      	lsls	r1, r6, #21
 800129e:	0752      	lsls	r2, r2, #29
 80012a0:	025b      	lsls	r3, r3, #9
 80012a2:	4322      	orrs	r2, r4
 80012a4:	0b1b      	lsrs	r3, r3, #12
 80012a6:	0d49      	lsrs	r1, r1, #21
 80012a8:	0509      	lsls	r1, r1, #20
 80012aa:	07ed      	lsls	r5, r5, #31
 80012ac:	4319      	orrs	r1, r3
 80012ae:	4329      	orrs	r1, r5
 80012b0:	0010      	movs	r0, r2
 80012b2:	bcf0      	pop	{r4, r5, r6, r7}
 80012b4:	46bb      	mov	fp, r7
 80012b6:	46b2      	mov	sl, r6
 80012b8:	46a9      	mov	r9, r5
 80012ba:	46a0      	mov	r8, r4
 80012bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012be:	1ab4      	subs	r4, r6, r2
 80012c0:	46a4      	mov	ip, r4
 80012c2:	2c00      	cmp	r4, #0
 80012c4:	dd58      	ble.n	8001378 <__aeabi_dsub+0x218>
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	d100      	bne.n	80012cc <__aeabi_dsub+0x16c>
 80012ca:	e09e      	b.n	800140a <__aeabi_dsub+0x2aa>
 80012cc:	4a71      	ldr	r2, [pc, #452]	; (8001494 <__aeabi_dsub+0x334>)
 80012ce:	4296      	cmp	r6, r2
 80012d0:	d100      	bne.n	80012d4 <__aeabi_dsub+0x174>
 80012d2:	e13b      	b.n	800154c <__aeabi_dsub+0x3ec>
 80012d4:	2280      	movs	r2, #128	; 0x80
 80012d6:	0412      	lsls	r2, r2, #16
 80012d8:	4311      	orrs	r1, r2
 80012da:	4662      	mov	r2, ip
 80012dc:	2a38      	cmp	r2, #56	; 0x38
 80012de:	dd00      	ble.n	80012e2 <__aeabi_dsub+0x182>
 80012e0:	e0c1      	b.n	8001466 <__aeabi_dsub+0x306>
 80012e2:	2a1f      	cmp	r2, #31
 80012e4:	dc00      	bgt.n	80012e8 <__aeabi_dsub+0x188>
 80012e6:	e1bb      	b.n	8001660 <__aeabi_dsub+0x500>
 80012e8:	000c      	movs	r4, r1
 80012ea:	3a20      	subs	r2, #32
 80012ec:	40d4      	lsrs	r4, r2
 80012ee:	0022      	movs	r2, r4
 80012f0:	4664      	mov	r4, ip
 80012f2:	2c20      	cmp	r4, #32
 80012f4:	d004      	beq.n	8001300 <__aeabi_dsub+0x1a0>
 80012f6:	2740      	movs	r7, #64	; 0x40
 80012f8:	1b3f      	subs	r7, r7, r4
 80012fa:	40b9      	lsls	r1, r7
 80012fc:	4308      	orrs	r0, r1
 80012fe:	4680      	mov	r8, r0
 8001300:	4644      	mov	r4, r8
 8001302:	1e61      	subs	r1, r4, #1
 8001304:	418c      	sbcs	r4, r1
 8001306:	4314      	orrs	r4, r2
 8001308:	e0b1      	b.n	800146e <__aeabi_dsub+0x30e>
 800130a:	000c      	movs	r4, r1
 800130c:	4304      	orrs	r4, r0
 800130e:	d02a      	beq.n	8001366 <__aeabi_dsub+0x206>
 8001310:	46bb      	mov	fp, r7
 8001312:	42bd      	cmp	r5, r7
 8001314:	d02d      	beq.n	8001372 <__aeabi_dsub+0x212>
 8001316:	4c61      	ldr	r4, [pc, #388]	; (800149c <__aeabi_dsub+0x33c>)
 8001318:	46a4      	mov	ip, r4
 800131a:	44b4      	add	ip, r6
 800131c:	4664      	mov	r4, ip
 800131e:	2c00      	cmp	r4, #0
 8001320:	d05c      	beq.n	80013dc <__aeabi_dsub+0x27c>
 8001322:	1b94      	subs	r4, r2, r6
 8001324:	46a4      	mov	ip, r4
 8001326:	2e00      	cmp	r6, #0
 8001328:	d000      	beq.n	800132c <__aeabi_dsub+0x1cc>
 800132a:	e115      	b.n	8001558 <__aeabi_dsub+0x3f8>
 800132c:	464d      	mov	r5, r9
 800132e:	431d      	orrs	r5, r3
 8001330:	d100      	bne.n	8001334 <__aeabi_dsub+0x1d4>
 8001332:	e1c3      	b.n	80016bc <__aeabi_dsub+0x55c>
 8001334:	1e65      	subs	r5, r4, #1
 8001336:	2c01      	cmp	r4, #1
 8001338:	d100      	bne.n	800133c <__aeabi_dsub+0x1dc>
 800133a:	e20c      	b.n	8001756 <__aeabi_dsub+0x5f6>
 800133c:	4e55      	ldr	r6, [pc, #340]	; (8001494 <__aeabi_dsub+0x334>)
 800133e:	42b4      	cmp	r4, r6
 8001340:	d100      	bne.n	8001344 <__aeabi_dsub+0x1e4>
 8001342:	e1f8      	b.n	8001736 <__aeabi_dsub+0x5d6>
 8001344:	46ac      	mov	ip, r5
 8001346:	e10e      	b.n	8001566 <__aeabi_dsub+0x406>
 8001348:	000a      	movs	r2, r1
 800134a:	4302      	orrs	r2, r0
 800134c:	d100      	bne.n	8001350 <__aeabi_dsub+0x1f0>
 800134e:	e136      	b.n	80015be <__aeabi_dsub+0x45e>
 8001350:	0022      	movs	r2, r4
 8001352:	3a01      	subs	r2, #1
 8001354:	2c01      	cmp	r4, #1
 8001356:	d100      	bne.n	800135a <__aeabi_dsub+0x1fa>
 8001358:	e1c6      	b.n	80016e8 <__aeabi_dsub+0x588>
 800135a:	4c4e      	ldr	r4, [pc, #312]	; (8001494 <__aeabi_dsub+0x334>)
 800135c:	45a4      	cmp	ip, r4
 800135e:	d100      	bne.n	8001362 <__aeabi_dsub+0x202>
 8001360:	e0f4      	b.n	800154c <__aeabi_dsub+0x3ec>
 8001362:	4694      	mov	ip, r2
 8001364:	e731      	b.n	80011ca <__aeabi_dsub+0x6a>
 8001366:	2401      	movs	r4, #1
 8001368:	4067      	eors	r7, r4
 800136a:	46bb      	mov	fp, r7
 800136c:	42bd      	cmp	r5, r7
 800136e:	d000      	beq.n	8001372 <__aeabi_dsub+0x212>
 8001370:	e71c      	b.n	80011ac <__aeabi_dsub+0x4c>
 8001372:	4c4a      	ldr	r4, [pc, #296]	; (800149c <__aeabi_dsub+0x33c>)
 8001374:	46a4      	mov	ip, r4
 8001376:	44b4      	add	ip, r6
 8001378:	4664      	mov	r4, ip
 800137a:	2c00      	cmp	r4, #0
 800137c:	d100      	bne.n	8001380 <__aeabi_dsub+0x220>
 800137e:	e0cf      	b.n	8001520 <__aeabi_dsub+0x3c0>
 8001380:	1b94      	subs	r4, r2, r6
 8001382:	46a4      	mov	ip, r4
 8001384:	2e00      	cmp	r6, #0
 8001386:	d100      	bne.n	800138a <__aeabi_dsub+0x22a>
 8001388:	e15c      	b.n	8001644 <__aeabi_dsub+0x4e4>
 800138a:	4e42      	ldr	r6, [pc, #264]	; (8001494 <__aeabi_dsub+0x334>)
 800138c:	42b2      	cmp	r2, r6
 800138e:	d100      	bne.n	8001392 <__aeabi_dsub+0x232>
 8001390:	e1ec      	b.n	800176c <__aeabi_dsub+0x60c>
 8001392:	2680      	movs	r6, #128	; 0x80
 8001394:	0436      	lsls	r6, r6, #16
 8001396:	4333      	orrs	r3, r6
 8001398:	4664      	mov	r4, ip
 800139a:	2c38      	cmp	r4, #56	; 0x38
 800139c:	dd00      	ble.n	80013a0 <__aeabi_dsub+0x240>
 800139e:	e1b3      	b.n	8001708 <__aeabi_dsub+0x5a8>
 80013a0:	2c1f      	cmp	r4, #31
 80013a2:	dd00      	ble.n	80013a6 <__aeabi_dsub+0x246>
 80013a4:	e238      	b.n	8001818 <__aeabi_dsub+0x6b8>
 80013a6:	2620      	movs	r6, #32
 80013a8:	1b36      	subs	r6, r6, r4
 80013aa:	001c      	movs	r4, r3
 80013ac:	40b4      	lsls	r4, r6
 80013ae:	464f      	mov	r7, r9
 80013b0:	46a0      	mov	r8, r4
 80013b2:	4664      	mov	r4, ip
 80013b4:	40e7      	lsrs	r7, r4
 80013b6:	4644      	mov	r4, r8
 80013b8:	433c      	orrs	r4, r7
 80013ba:	464f      	mov	r7, r9
 80013bc:	40b7      	lsls	r7, r6
 80013be:	003e      	movs	r6, r7
 80013c0:	1e77      	subs	r7, r6, #1
 80013c2:	41be      	sbcs	r6, r7
 80013c4:	4334      	orrs	r4, r6
 80013c6:	4666      	mov	r6, ip
 80013c8:	40f3      	lsrs	r3, r6
 80013ca:	18c9      	adds	r1, r1, r3
 80013cc:	1824      	adds	r4, r4, r0
 80013ce:	4284      	cmp	r4, r0
 80013d0:	419b      	sbcs	r3, r3
 80013d2:	425b      	negs	r3, r3
 80013d4:	4698      	mov	r8, r3
 80013d6:	0016      	movs	r6, r2
 80013d8:	4488      	add	r8, r1
 80013da:	e04e      	b.n	800147a <__aeabi_dsub+0x31a>
 80013dc:	4a30      	ldr	r2, [pc, #192]	; (80014a0 <__aeabi_dsub+0x340>)
 80013de:	1c74      	adds	r4, r6, #1
 80013e0:	4214      	tst	r4, r2
 80013e2:	d000      	beq.n	80013e6 <__aeabi_dsub+0x286>
 80013e4:	e0d6      	b.n	8001594 <__aeabi_dsub+0x434>
 80013e6:	464a      	mov	r2, r9
 80013e8:	431a      	orrs	r2, r3
 80013ea:	2e00      	cmp	r6, #0
 80013ec:	d000      	beq.n	80013f0 <__aeabi_dsub+0x290>
 80013ee:	e15b      	b.n	80016a8 <__aeabi_dsub+0x548>
 80013f0:	2a00      	cmp	r2, #0
 80013f2:	d100      	bne.n	80013f6 <__aeabi_dsub+0x296>
 80013f4:	e1a5      	b.n	8001742 <__aeabi_dsub+0x5e2>
 80013f6:	000a      	movs	r2, r1
 80013f8:	4302      	orrs	r2, r0
 80013fa:	d000      	beq.n	80013fe <__aeabi_dsub+0x29e>
 80013fc:	e1bb      	b.n	8001776 <__aeabi_dsub+0x616>
 80013fe:	464a      	mov	r2, r9
 8001400:	0759      	lsls	r1, r3, #29
 8001402:	08d2      	lsrs	r2, r2, #3
 8001404:	430a      	orrs	r2, r1
 8001406:	08db      	lsrs	r3, r3, #3
 8001408:	e027      	b.n	800145a <__aeabi_dsub+0x2fa>
 800140a:	000a      	movs	r2, r1
 800140c:	4302      	orrs	r2, r0
 800140e:	d100      	bne.n	8001412 <__aeabi_dsub+0x2b2>
 8001410:	e174      	b.n	80016fc <__aeabi_dsub+0x59c>
 8001412:	0022      	movs	r2, r4
 8001414:	3a01      	subs	r2, #1
 8001416:	2c01      	cmp	r4, #1
 8001418:	d005      	beq.n	8001426 <__aeabi_dsub+0x2c6>
 800141a:	4c1e      	ldr	r4, [pc, #120]	; (8001494 <__aeabi_dsub+0x334>)
 800141c:	45a4      	cmp	ip, r4
 800141e:	d100      	bne.n	8001422 <__aeabi_dsub+0x2c2>
 8001420:	e094      	b.n	800154c <__aeabi_dsub+0x3ec>
 8001422:	4694      	mov	ip, r2
 8001424:	e759      	b.n	80012da <__aeabi_dsub+0x17a>
 8001426:	4448      	add	r0, r9
 8001428:	4548      	cmp	r0, r9
 800142a:	4192      	sbcs	r2, r2
 800142c:	185b      	adds	r3, r3, r1
 800142e:	4698      	mov	r8, r3
 8001430:	0004      	movs	r4, r0
 8001432:	4252      	negs	r2, r2
 8001434:	4490      	add	r8, r2
 8001436:	4643      	mov	r3, r8
 8001438:	2602      	movs	r6, #2
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	d500      	bpl.n	8001440 <__aeabi_dsub+0x2e0>
 800143e:	e0c4      	b.n	80015ca <__aeabi_dsub+0x46a>
 8001440:	3e01      	subs	r6, #1
 8001442:	0763      	lsls	r3, r4, #29
 8001444:	d000      	beq.n	8001448 <__aeabi_dsub+0x2e8>
 8001446:	e711      	b.n	800126c <__aeabi_dsub+0x10c>
 8001448:	4643      	mov	r3, r8
 800144a:	46b4      	mov	ip, r6
 800144c:	0759      	lsls	r1, r3, #29
 800144e:	08e2      	lsrs	r2, r4, #3
 8001450:	430a      	orrs	r2, r1
 8001452:	08db      	lsrs	r3, r3, #3
 8001454:	490f      	ldr	r1, [pc, #60]	; (8001494 <__aeabi_dsub+0x334>)
 8001456:	458c      	cmp	ip, r1
 8001458:	d040      	beq.n	80014dc <__aeabi_dsub+0x37c>
 800145a:	4661      	mov	r1, ip
 800145c:	031b      	lsls	r3, r3, #12
 800145e:	0549      	lsls	r1, r1, #21
 8001460:	0b1b      	lsrs	r3, r3, #12
 8001462:	0d49      	lsrs	r1, r1, #21
 8001464:	e720      	b.n	80012a8 <__aeabi_dsub+0x148>
 8001466:	4301      	orrs	r1, r0
 8001468:	000c      	movs	r4, r1
 800146a:	1e61      	subs	r1, r4, #1
 800146c:	418c      	sbcs	r4, r1
 800146e:	444c      	add	r4, r9
 8001470:	454c      	cmp	r4, r9
 8001472:	4192      	sbcs	r2, r2
 8001474:	4252      	negs	r2, r2
 8001476:	4690      	mov	r8, r2
 8001478:	4498      	add	r8, r3
 800147a:	4643      	mov	r3, r8
 800147c:	021b      	lsls	r3, r3, #8
 800147e:	d5e0      	bpl.n	8001442 <__aeabi_dsub+0x2e2>
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <__aeabi_dsub+0x334>)
 8001482:	3601      	adds	r6, #1
 8001484:	429e      	cmp	r6, r3
 8001486:	d000      	beq.n	800148a <__aeabi_dsub+0x32a>
 8001488:	e09f      	b.n	80015ca <__aeabi_dsub+0x46a>
 800148a:	0031      	movs	r1, r6
 800148c:	2300      	movs	r3, #0
 800148e:	2200      	movs	r2, #0
 8001490:	e70a      	b.n	80012a8 <__aeabi_dsub+0x148>
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	000007ff 	.word	0x000007ff
 8001498:	ff7fffff 	.word	0xff7fffff
 800149c:	fffff801 	.word	0xfffff801
 80014a0:	000007fe 	.word	0x000007fe
 80014a4:	2a00      	cmp	r2, #0
 80014a6:	d100      	bne.n	80014aa <__aeabi_dsub+0x34a>
 80014a8:	e160      	b.n	800176c <__aeabi_dsub+0x60c>
 80014aa:	000a      	movs	r2, r1
 80014ac:	4302      	orrs	r2, r0
 80014ae:	d04d      	beq.n	800154c <__aeabi_dsub+0x3ec>
 80014b0:	464a      	mov	r2, r9
 80014b2:	075c      	lsls	r4, r3, #29
 80014b4:	08d2      	lsrs	r2, r2, #3
 80014b6:	4322      	orrs	r2, r4
 80014b8:	2480      	movs	r4, #128	; 0x80
 80014ba:	08db      	lsrs	r3, r3, #3
 80014bc:	0324      	lsls	r4, r4, #12
 80014be:	4223      	tst	r3, r4
 80014c0:	d007      	beq.n	80014d2 <__aeabi_dsub+0x372>
 80014c2:	08ce      	lsrs	r6, r1, #3
 80014c4:	4226      	tst	r6, r4
 80014c6:	d104      	bne.n	80014d2 <__aeabi_dsub+0x372>
 80014c8:	465d      	mov	r5, fp
 80014ca:	0033      	movs	r3, r6
 80014cc:	08c2      	lsrs	r2, r0, #3
 80014ce:	0749      	lsls	r1, r1, #29
 80014d0:	430a      	orrs	r2, r1
 80014d2:	0f51      	lsrs	r1, r2, #29
 80014d4:	00d2      	lsls	r2, r2, #3
 80014d6:	08d2      	lsrs	r2, r2, #3
 80014d8:	0749      	lsls	r1, r1, #29
 80014da:	430a      	orrs	r2, r1
 80014dc:	0011      	movs	r1, r2
 80014de:	4319      	orrs	r1, r3
 80014e0:	d100      	bne.n	80014e4 <__aeabi_dsub+0x384>
 80014e2:	e1c8      	b.n	8001876 <__aeabi_dsub+0x716>
 80014e4:	2180      	movs	r1, #128	; 0x80
 80014e6:	0309      	lsls	r1, r1, #12
 80014e8:	430b      	orrs	r3, r1
 80014ea:	031b      	lsls	r3, r3, #12
 80014ec:	49d5      	ldr	r1, [pc, #852]	; (8001844 <__aeabi_dsub+0x6e4>)
 80014ee:	0b1b      	lsrs	r3, r3, #12
 80014f0:	e6da      	b.n	80012a8 <__aeabi_dsub+0x148>
 80014f2:	49d5      	ldr	r1, [pc, #852]	; (8001848 <__aeabi_dsub+0x6e8>)
 80014f4:	1ab6      	subs	r6, r6, r2
 80014f6:	400b      	ands	r3, r1
 80014f8:	4698      	mov	r8, r3
 80014fa:	e6b5      	b.n	8001268 <__aeabi_dsub+0x108>
 80014fc:	0020      	movs	r0, r4
 80014fe:	f000 fa8b 	bl	8001a18 <__clzsi2>
 8001502:	0002      	movs	r2, r0
 8001504:	3218      	adds	r2, #24
 8001506:	2a1f      	cmp	r2, #31
 8001508:	dc00      	bgt.n	800150c <__aeabi_dsub+0x3ac>
 800150a:	e68f      	b.n	800122c <__aeabi_dsub+0xcc>
 800150c:	0023      	movs	r3, r4
 800150e:	3808      	subs	r0, #8
 8001510:	4083      	lsls	r3, r0
 8001512:	2400      	movs	r4, #0
 8001514:	e692      	b.n	800123c <__aeabi_dsub+0xdc>
 8001516:	4308      	orrs	r0, r1
 8001518:	0002      	movs	r2, r0
 800151a:	1e50      	subs	r0, r2, #1
 800151c:	4182      	sbcs	r2, r0
 800151e:	e66d      	b.n	80011fc <__aeabi_dsub+0x9c>
 8001520:	4cca      	ldr	r4, [pc, #808]	; (800184c <__aeabi_dsub+0x6ec>)
 8001522:	1c72      	adds	r2, r6, #1
 8001524:	4222      	tst	r2, r4
 8001526:	d000      	beq.n	800152a <__aeabi_dsub+0x3ca>
 8001528:	e0ad      	b.n	8001686 <__aeabi_dsub+0x526>
 800152a:	464a      	mov	r2, r9
 800152c:	431a      	orrs	r2, r3
 800152e:	2e00      	cmp	r6, #0
 8001530:	d1b8      	bne.n	80014a4 <__aeabi_dsub+0x344>
 8001532:	2a00      	cmp	r2, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_dsub+0x3d8>
 8001536:	e158      	b.n	80017ea <__aeabi_dsub+0x68a>
 8001538:	000a      	movs	r2, r1
 800153a:	4302      	orrs	r2, r0
 800153c:	d000      	beq.n	8001540 <__aeabi_dsub+0x3e0>
 800153e:	e159      	b.n	80017f4 <__aeabi_dsub+0x694>
 8001540:	464a      	mov	r2, r9
 8001542:	0759      	lsls	r1, r3, #29
 8001544:	08d2      	lsrs	r2, r2, #3
 8001546:	430a      	orrs	r2, r1
 8001548:	08db      	lsrs	r3, r3, #3
 800154a:	e786      	b.n	800145a <__aeabi_dsub+0x2fa>
 800154c:	464a      	mov	r2, r9
 800154e:	0759      	lsls	r1, r3, #29
 8001550:	08d2      	lsrs	r2, r2, #3
 8001552:	430a      	orrs	r2, r1
 8001554:	08db      	lsrs	r3, r3, #3
 8001556:	e7c1      	b.n	80014dc <__aeabi_dsub+0x37c>
 8001558:	4dba      	ldr	r5, [pc, #744]	; (8001844 <__aeabi_dsub+0x6e4>)
 800155a:	42aa      	cmp	r2, r5
 800155c:	d100      	bne.n	8001560 <__aeabi_dsub+0x400>
 800155e:	e11e      	b.n	800179e <__aeabi_dsub+0x63e>
 8001560:	2580      	movs	r5, #128	; 0x80
 8001562:	042d      	lsls	r5, r5, #16
 8001564:	432b      	orrs	r3, r5
 8001566:	4664      	mov	r4, ip
 8001568:	2c38      	cmp	r4, #56	; 0x38
 800156a:	dc5d      	bgt.n	8001628 <__aeabi_dsub+0x4c8>
 800156c:	2c1f      	cmp	r4, #31
 800156e:	dd00      	ble.n	8001572 <__aeabi_dsub+0x412>
 8001570:	e0d0      	b.n	8001714 <__aeabi_dsub+0x5b4>
 8001572:	2520      	movs	r5, #32
 8001574:	4667      	mov	r7, ip
 8001576:	1b2d      	subs	r5, r5, r4
 8001578:	464e      	mov	r6, r9
 800157a:	001c      	movs	r4, r3
 800157c:	40fe      	lsrs	r6, r7
 800157e:	40ac      	lsls	r4, r5
 8001580:	4334      	orrs	r4, r6
 8001582:	464e      	mov	r6, r9
 8001584:	40ae      	lsls	r6, r5
 8001586:	0035      	movs	r5, r6
 8001588:	40fb      	lsrs	r3, r7
 800158a:	1e6e      	subs	r6, r5, #1
 800158c:	41b5      	sbcs	r5, r6
 800158e:	1ac9      	subs	r1, r1, r3
 8001590:	432c      	orrs	r4, r5
 8001592:	e04e      	b.n	8001632 <__aeabi_dsub+0x4d2>
 8001594:	464a      	mov	r2, r9
 8001596:	1a14      	subs	r4, r2, r0
 8001598:	45a1      	cmp	r9, r4
 800159a:	4192      	sbcs	r2, r2
 800159c:	4252      	negs	r2, r2
 800159e:	4690      	mov	r8, r2
 80015a0:	1a5f      	subs	r7, r3, r1
 80015a2:	003a      	movs	r2, r7
 80015a4:	4647      	mov	r7, r8
 80015a6:	1bd2      	subs	r2, r2, r7
 80015a8:	4690      	mov	r8, r2
 80015aa:	0212      	lsls	r2, r2, #8
 80015ac:	d500      	bpl.n	80015b0 <__aeabi_dsub+0x450>
 80015ae:	e08b      	b.n	80016c8 <__aeabi_dsub+0x568>
 80015b0:	4642      	mov	r2, r8
 80015b2:	4322      	orrs	r2, r4
 80015b4:	d000      	beq.n	80015b8 <__aeabi_dsub+0x458>
 80015b6:	e630      	b.n	800121a <__aeabi_dsub+0xba>
 80015b8:	2300      	movs	r3, #0
 80015ba:	2500      	movs	r5, #0
 80015bc:	e74d      	b.n	800145a <__aeabi_dsub+0x2fa>
 80015be:	464a      	mov	r2, r9
 80015c0:	0759      	lsls	r1, r3, #29
 80015c2:	08d2      	lsrs	r2, r2, #3
 80015c4:	430a      	orrs	r2, r1
 80015c6:	08db      	lsrs	r3, r3, #3
 80015c8:	e744      	b.n	8001454 <__aeabi_dsub+0x2f4>
 80015ca:	4642      	mov	r2, r8
 80015cc:	4b9e      	ldr	r3, [pc, #632]	; (8001848 <__aeabi_dsub+0x6e8>)
 80015ce:	0861      	lsrs	r1, r4, #1
 80015d0:	401a      	ands	r2, r3
 80015d2:	0013      	movs	r3, r2
 80015d4:	2201      	movs	r2, #1
 80015d6:	4014      	ands	r4, r2
 80015d8:	430c      	orrs	r4, r1
 80015da:	07da      	lsls	r2, r3, #31
 80015dc:	085b      	lsrs	r3, r3, #1
 80015de:	4698      	mov	r8, r3
 80015e0:	4314      	orrs	r4, r2
 80015e2:	e641      	b.n	8001268 <__aeabi_dsub+0x108>
 80015e4:	001a      	movs	r2, r3
 80015e6:	3e1f      	subs	r6, #31
 80015e8:	40f2      	lsrs	r2, r6
 80015ea:	0016      	movs	r6, r2
 80015ec:	2920      	cmp	r1, #32
 80015ee:	d003      	beq.n	80015f8 <__aeabi_dsub+0x498>
 80015f0:	2240      	movs	r2, #64	; 0x40
 80015f2:	1a51      	subs	r1, r2, r1
 80015f4:	408b      	lsls	r3, r1
 80015f6:	431c      	orrs	r4, r3
 80015f8:	1e62      	subs	r2, r4, #1
 80015fa:	4194      	sbcs	r4, r2
 80015fc:	2300      	movs	r3, #0
 80015fe:	4334      	orrs	r4, r6
 8001600:	4698      	mov	r8, r3
 8001602:	2600      	movs	r6, #0
 8001604:	e71d      	b.n	8001442 <__aeabi_dsub+0x2e2>
 8001606:	000c      	movs	r4, r1
 8001608:	3a20      	subs	r2, #32
 800160a:	40d4      	lsrs	r4, r2
 800160c:	0022      	movs	r2, r4
 800160e:	4664      	mov	r4, ip
 8001610:	2c20      	cmp	r4, #32
 8001612:	d004      	beq.n	800161e <__aeabi_dsub+0x4be>
 8001614:	2740      	movs	r7, #64	; 0x40
 8001616:	1b3f      	subs	r7, r7, r4
 8001618:	40b9      	lsls	r1, r7
 800161a:	4308      	orrs	r0, r1
 800161c:	4680      	mov	r8, r0
 800161e:	4644      	mov	r4, r8
 8001620:	1e61      	subs	r1, r4, #1
 8001622:	418c      	sbcs	r4, r1
 8001624:	4322      	orrs	r2, r4
 8001626:	e5e9      	b.n	80011fc <__aeabi_dsub+0x9c>
 8001628:	464c      	mov	r4, r9
 800162a:	4323      	orrs	r3, r4
 800162c:	001c      	movs	r4, r3
 800162e:	1e63      	subs	r3, r4, #1
 8001630:	419c      	sbcs	r4, r3
 8001632:	1b04      	subs	r4, r0, r4
 8001634:	42a0      	cmp	r0, r4
 8001636:	419b      	sbcs	r3, r3
 8001638:	425b      	negs	r3, r3
 800163a:	1acb      	subs	r3, r1, r3
 800163c:	4698      	mov	r8, r3
 800163e:	465d      	mov	r5, fp
 8001640:	0016      	movs	r6, r2
 8001642:	e5e2      	b.n	800120a <__aeabi_dsub+0xaa>
 8001644:	464e      	mov	r6, r9
 8001646:	431e      	orrs	r6, r3
 8001648:	d100      	bne.n	800164c <__aeabi_dsub+0x4ec>
 800164a:	e0ae      	b.n	80017aa <__aeabi_dsub+0x64a>
 800164c:	1e66      	subs	r6, r4, #1
 800164e:	2c01      	cmp	r4, #1
 8001650:	d100      	bne.n	8001654 <__aeabi_dsub+0x4f4>
 8001652:	e0fd      	b.n	8001850 <__aeabi_dsub+0x6f0>
 8001654:	4f7b      	ldr	r7, [pc, #492]	; (8001844 <__aeabi_dsub+0x6e4>)
 8001656:	42bc      	cmp	r4, r7
 8001658:	d100      	bne.n	800165c <__aeabi_dsub+0x4fc>
 800165a:	e107      	b.n	800186c <__aeabi_dsub+0x70c>
 800165c:	46b4      	mov	ip, r6
 800165e:	e69b      	b.n	8001398 <__aeabi_dsub+0x238>
 8001660:	4664      	mov	r4, ip
 8001662:	2220      	movs	r2, #32
 8001664:	1b12      	subs	r2, r2, r4
 8001666:	000c      	movs	r4, r1
 8001668:	4094      	lsls	r4, r2
 800166a:	0007      	movs	r7, r0
 800166c:	4090      	lsls	r0, r2
 800166e:	46a0      	mov	r8, r4
 8001670:	4664      	mov	r4, ip
 8001672:	1e42      	subs	r2, r0, #1
 8001674:	4190      	sbcs	r0, r2
 8001676:	4662      	mov	r2, ip
 8001678:	40e7      	lsrs	r7, r4
 800167a:	4644      	mov	r4, r8
 800167c:	40d1      	lsrs	r1, r2
 800167e:	433c      	orrs	r4, r7
 8001680:	4304      	orrs	r4, r0
 8001682:	185b      	adds	r3, r3, r1
 8001684:	e6f3      	b.n	800146e <__aeabi_dsub+0x30e>
 8001686:	4c6f      	ldr	r4, [pc, #444]	; (8001844 <__aeabi_dsub+0x6e4>)
 8001688:	42a2      	cmp	r2, r4
 800168a:	d100      	bne.n	800168e <__aeabi_dsub+0x52e>
 800168c:	e0d5      	b.n	800183a <__aeabi_dsub+0x6da>
 800168e:	4448      	add	r0, r9
 8001690:	185b      	adds	r3, r3, r1
 8001692:	4548      	cmp	r0, r9
 8001694:	4189      	sbcs	r1, r1
 8001696:	4249      	negs	r1, r1
 8001698:	185b      	adds	r3, r3, r1
 800169a:	07dc      	lsls	r4, r3, #31
 800169c:	0840      	lsrs	r0, r0, #1
 800169e:	085b      	lsrs	r3, r3, #1
 80016a0:	4698      	mov	r8, r3
 80016a2:	0016      	movs	r6, r2
 80016a4:	4304      	orrs	r4, r0
 80016a6:	e6cc      	b.n	8001442 <__aeabi_dsub+0x2e2>
 80016a8:	2a00      	cmp	r2, #0
 80016aa:	d000      	beq.n	80016ae <__aeabi_dsub+0x54e>
 80016ac:	e082      	b.n	80017b4 <__aeabi_dsub+0x654>
 80016ae:	000a      	movs	r2, r1
 80016b0:	4302      	orrs	r2, r0
 80016b2:	d140      	bne.n	8001736 <__aeabi_dsub+0x5d6>
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	2500      	movs	r5, #0
 80016b8:	031b      	lsls	r3, r3, #12
 80016ba:	e713      	b.n	80014e4 <__aeabi_dsub+0x384>
 80016bc:	074b      	lsls	r3, r1, #29
 80016be:	08c2      	lsrs	r2, r0, #3
 80016c0:	431a      	orrs	r2, r3
 80016c2:	465d      	mov	r5, fp
 80016c4:	08cb      	lsrs	r3, r1, #3
 80016c6:	e6c5      	b.n	8001454 <__aeabi_dsub+0x2f4>
 80016c8:	464a      	mov	r2, r9
 80016ca:	1a84      	subs	r4, r0, r2
 80016cc:	42a0      	cmp	r0, r4
 80016ce:	4192      	sbcs	r2, r2
 80016d0:	1acb      	subs	r3, r1, r3
 80016d2:	4252      	negs	r2, r2
 80016d4:	1a9b      	subs	r3, r3, r2
 80016d6:	4698      	mov	r8, r3
 80016d8:	465d      	mov	r5, fp
 80016da:	e59e      	b.n	800121a <__aeabi_dsub+0xba>
 80016dc:	464a      	mov	r2, r9
 80016de:	0759      	lsls	r1, r3, #29
 80016e0:	08d2      	lsrs	r2, r2, #3
 80016e2:	430a      	orrs	r2, r1
 80016e4:	08db      	lsrs	r3, r3, #3
 80016e6:	e6f9      	b.n	80014dc <__aeabi_dsub+0x37c>
 80016e8:	464a      	mov	r2, r9
 80016ea:	1a14      	subs	r4, r2, r0
 80016ec:	45a1      	cmp	r9, r4
 80016ee:	4192      	sbcs	r2, r2
 80016f0:	1a5b      	subs	r3, r3, r1
 80016f2:	4252      	negs	r2, r2
 80016f4:	1a9b      	subs	r3, r3, r2
 80016f6:	4698      	mov	r8, r3
 80016f8:	2601      	movs	r6, #1
 80016fa:	e586      	b.n	800120a <__aeabi_dsub+0xaa>
 80016fc:	464a      	mov	r2, r9
 80016fe:	0759      	lsls	r1, r3, #29
 8001700:	08d2      	lsrs	r2, r2, #3
 8001702:	430a      	orrs	r2, r1
 8001704:	08db      	lsrs	r3, r3, #3
 8001706:	e6a5      	b.n	8001454 <__aeabi_dsub+0x2f4>
 8001708:	464c      	mov	r4, r9
 800170a:	4323      	orrs	r3, r4
 800170c:	001c      	movs	r4, r3
 800170e:	1e63      	subs	r3, r4, #1
 8001710:	419c      	sbcs	r4, r3
 8001712:	e65b      	b.n	80013cc <__aeabi_dsub+0x26c>
 8001714:	4665      	mov	r5, ip
 8001716:	001e      	movs	r6, r3
 8001718:	3d20      	subs	r5, #32
 800171a:	40ee      	lsrs	r6, r5
 800171c:	2c20      	cmp	r4, #32
 800171e:	d005      	beq.n	800172c <__aeabi_dsub+0x5cc>
 8001720:	2540      	movs	r5, #64	; 0x40
 8001722:	1b2d      	subs	r5, r5, r4
 8001724:	40ab      	lsls	r3, r5
 8001726:	464c      	mov	r4, r9
 8001728:	431c      	orrs	r4, r3
 800172a:	46a2      	mov	sl, r4
 800172c:	4654      	mov	r4, sl
 800172e:	1e63      	subs	r3, r4, #1
 8001730:	419c      	sbcs	r4, r3
 8001732:	4334      	orrs	r4, r6
 8001734:	e77d      	b.n	8001632 <__aeabi_dsub+0x4d2>
 8001736:	074b      	lsls	r3, r1, #29
 8001738:	08c2      	lsrs	r2, r0, #3
 800173a:	431a      	orrs	r2, r3
 800173c:	465d      	mov	r5, fp
 800173e:	08cb      	lsrs	r3, r1, #3
 8001740:	e6cc      	b.n	80014dc <__aeabi_dsub+0x37c>
 8001742:	000a      	movs	r2, r1
 8001744:	4302      	orrs	r2, r0
 8001746:	d100      	bne.n	800174a <__aeabi_dsub+0x5ea>
 8001748:	e736      	b.n	80015b8 <__aeabi_dsub+0x458>
 800174a:	074b      	lsls	r3, r1, #29
 800174c:	08c2      	lsrs	r2, r0, #3
 800174e:	431a      	orrs	r2, r3
 8001750:	465d      	mov	r5, fp
 8001752:	08cb      	lsrs	r3, r1, #3
 8001754:	e681      	b.n	800145a <__aeabi_dsub+0x2fa>
 8001756:	464a      	mov	r2, r9
 8001758:	1a84      	subs	r4, r0, r2
 800175a:	42a0      	cmp	r0, r4
 800175c:	4192      	sbcs	r2, r2
 800175e:	1acb      	subs	r3, r1, r3
 8001760:	4252      	negs	r2, r2
 8001762:	1a9b      	subs	r3, r3, r2
 8001764:	4698      	mov	r8, r3
 8001766:	465d      	mov	r5, fp
 8001768:	2601      	movs	r6, #1
 800176a:	e54e      	b.n	800120a <__aeabi_dsub+0xaa>
 800176c:	074b      	lsls	r3, r1, #29
 800176e:	08c2      	lsrs	r2, r0, #3
 8001770:	431a      	orrs	r2, r3
 8001772:	08cb      	lsrs	r3, r1, #3
 8001774:	e6b2      	b.n	80014dc <__aeabi_dsub+0x37c>
 8001776:	464a      	mov	r2, r9
 8001778:	1a14      	subs	r4, r2, r0
 800177a:	45a1      	cmp	r9, r4
 800177c:	4192      	sbcs	r2, r2
 800177e:	1a5f      	subs	r7, r3, r1
 8001780:	4252      	negs	r2, r2
 8001782:	1aba      	subs	r2, r7, r2
 8001784:	4690      	mov	r8, r2
 8001786:	0212      	lsls	r2, r2, #8
 8001788:	d56b      	bpl.n	8001862 <__aeabi_dsub+0x702>
 800178a:	464a      	mov	r2, r9
 800178c:	1a84      	subs	r4, r0, r2
 800178e:	42a0      	cmp	r0, r4
 8001790:	4192      	sbcs	r2, r2
 8001792:	1acb      	subs	r3, r1, r3
 8001794:	4252      	negs	r2, r2
 8001796:	1a9b      	subs	r3, r3, r2
 8001798:	4698      	mov	r8, r3
 800179a:	465d      	mov	r5, fp
 800179c:	e564      	b.n	8001268 <__aeabi_dsub+0x108>
 800179e:	074b      	lsls	r3, r1, #29
 80017a0:	08c2      	lsrs	r2, r0, #3
 80017a2:	431a      	orrs	r2, r3
 80017a4:	465d      	mov	r5, fp
 80017a6:	08cb      	lsrs	r3, r1, #3
 80017a8:	e698      	b.n	80014dc <__aeabi_dsub+0x37c>
 80017aa:	074b      	lsls	r3, r1, #29
 80017ac:	08c2      	lsrs	r2, r0, #3
 80017ae:	431a      	orrs	r2, r3
 80017b0:	08cb      	lsrs	r3, r1, #3
 80017b2:	e64f      	b.n	8001454 <__aeabi_dsub+0x2f4>
 80017b4:	000a      	movs	r2, r1
 80017b6:	4302      	orrs	r2, r0
 80017b8:	d090      	beq.n	80016dc <__aeabi_dsub+0x57c>
 80017ba:	464a      	mov	r2, r9
 80017bc:	075c      	lsls	r4, r3, #29
 80017be:	08d2      	lsrs	r2, r2, #3
 80017c0:	4314      	orrs	r4, r2
 80017c2:	2280      	movs	r2, #128	; 0x80
 80017c4:	08db      	lsrs	r3, r3, #3
 80017c6:	0312      	lsls	r2, r2, #12
 80017c8:	4213      	tst	r3, r2
 80017ca:	d008      	beq.n	80017de <__aeabi_dsub+0x67e>
 80017cc:	08ce      	lsrs	r6, r1, #3
 80017ce:	4216      	tst	r6, r2
 80017d0:	d105      	bne.n	80017de <__aeabi_dsub+0x67e>
 80017d2:	08c0      	lsrs	r0, r0, #3
 80017d4:	0749      	lsls	r1, r1, #29
 80017d6:	4308      	orrs	r0, r1
 80017d8:	0004      	movs	r4, r0
 80017da:	465d      	mov	r5, fp
 80017dc:	0033      	movs	r3, r6
 80017de:	0f61      	lsrs	r1, r4, #29
 80017e0:	00e2      	lsls	r2, r4, #3
 80017e2:	0749      	lsls	r1, r1, #29
 80017e4:	08d2      	lsrs	r2, r2, #3
 80017e6:	430a      	orrs	r2, r1
 80017e8:	e678      	b.n	80014dc <__aeabi_dsub+0x37c>
 80017ea:	074b      	lsls	r3, r1, #29
 80017ec:	08c2      	lsrs	r2, r0, #3
 80017ee:	431a      	orrs	r2, r3
 80017f0:	08cb      	lsrs	r3, r1, #3
 80017f2:	e632      	b.n	800145a <__aeabi_dsub+0x2fa>
 80017f4:	4448      	add	r0, r9
 80017f6:	185b      	adds	r3, r3, r1
 80017f8:	4548      	cmp	r0, r9
 80017fa:	4192      	sbcs	r2, r2
 80017fc:	4698      	mov	r8, r3
 80017fe:	4252      	negs	r2, r2
 8001800:	4490      	add	r8, r2
 8001802:	4643      	mov	r3, r8
 8001804:	0004      	movs	r4, r0
 8001806:	021b      	lsls	r3, r3, #8
 8001808:	d400      	bmi.n	800180c <__aeabi_dsub+0x6ac>
 800180a:	e61a      	b.n	8001442 <__aeabi_dsub+0x2e2>
 800180c:	4642      	mov	r2, r8
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <__aeabi_dsub+0x6e8>)
 8001810:	2601      	movs	r6, #1
 8001812:	401a      	ands	r2, r3
 8001814:	4690      	mov	r8, r2
 8001816:	e614      	b.n	8001442 <__aeabi_dsub+0x2e2>
 8001818:	4666      	mov	r6, ip
 800181a:	001f      	movs	r7, r3
 800181c:	3e20      	subs	r6, #32
 800181e:	40f7      	lsrs	r7, r6
 8001820:	2c20      	cmp	r4, #32
 8001822:	d005      	beq.n	8001830 <__aeabi_dsub+0x6d0>
 8001824:	2640      	movs	r6, #64	; 0x40
 8001826:	1b36      	subs	r6, r6, r4
 8001828:	40b3      	lsls	r3, r6
 800182a:	464c      	mov	r4, r9
 800182c:	431c      	orrs	r4, r3
 800182e:	46a2      	mov	sl, r4
 8001830:	4654      	mov	r4, sl
 8001832:	1e63      	subs	r3, r4, #1
 8001834:	419c      	sbcs	r4, r3
 8001836:	433c      	orrs	r4, r7
 8001838:	e5c8      	b.n	80013cc <__aeabi_dsub+0x26c>
 800183a:	0011      	movs	r1, r2
 800183c:	2300      	movs	r3, #0
 800183e:	2200      	movs	r2, #0
 8001840:	e532      	b.n	80012a8 <__aeabi_dsub+0x148>
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	000007ff 	.word	0x000007ff
 8001848:	ff7fffff 	.word	0xff7fffff
 800184c:	000007fe 	.word	0x000007fe
 8001850:	464a      	mov	r2, r9
 8001852:	1814      	adds	r4, r2, r0
 8001854:	4284      	cmp	r4, r0
 8001856:	4192      	sbcs	r2, r2
 8001858:	185b      	adds	r3, r3, r1
 800185a:	4698      	mov	r8, r3
 800185c:	4252      	negs	r2, r2
 800185e:	4490      	add	r8, r2
 8001860:	e5e9      	b.n	8001436 <__aeabi_dsub+0x2d6>
 8001862:	4642      	mov	r2, r8
 8001864:	4322      	orrs	r2, r4
 8001866:	d100      	bne.n	800186a <__aeabi_dsub+0x70a>
 8001868:	e6a6      	b.n	80015b8 <__aeabi_dsub+0x458>
 800186a:	e5ea      	b.n	8001442 <__aeabi_dsub+0x2e2>
 800186c:	074b      	lsls	r3, r1, #29
 800186e:	08c2      	lsrs	r2, r0, #3
 8001870:	431a      	orrs	r2, r3
 8001872:	08cb      	lsrs	r3, r1, #3
 8001874:	e632      	b.n	80014dc <__aeabi_dsub+0x37c>
 8001876:	2200      	movs	r2, #0
 8001878:	4901      	ldr	r1, [pc, #4]	; (8001880 <__aeabi_dsub+0x720>)
 800187a:	0013      	movs	r3, r2
 800187c:	e514      	b.n	80012a8 <__aeabi_dsub+0x148>
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	000007ff 	.word	0x000007ff

08001884 <__aeabi_d2iz>:
 8001884:	000a      	movs	r2, r1
 8001886:	b530      	push	{r4, r5, lr}
 8001888:	4c13      	ldr	r4, [pc, #76]	; (80018d8 <__aeabi_d2iz+0x54>)
 800188a:	0053      	lsls	r3, r2, #1
 800188c:	0309      	lsls	r1, r1, #12
 800188e:	0005      	movs	r5, r0
 8001890:	0b09      	lsrs	r1, r1, #12
 8001892:	2000      	movs	r0, #0
 8001894:	0d5b      	lsrs	r3, r3, #21
 8001896:	0fd2      	lsrs	r2, r2, #31
 8001898:	42a3      	cmp	r3, r4
 800189a:	dd04      	ble.n	80018a6 <__aeabi_d2iz+0x22>
 800189c:	480f      	ldr	r0, [pc, #60]	; (80018dc <__aeabi_d2iz+0x58>)
 800189e:	4283      	cmp	r3, r0
 80018a0:	dd02      	ble.n	80018a8 <__aeabi_d2iz+0x24>
 80018a2:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <__aeabi_d2iz+0x5c>)
 80018a4:	18d0      	adds	r0, r2, r3
 80018a6:	bd30      	pop	{r4, r5, pc}
 80018a8:	2080      	movs	r0, #128	; 0x80
 80018aa:	0340      	lsls	r0, r0, #13
 80018ac:	4301      	orrs	r1, r0
 80018ae:	480d      	ldr	r0, [pc, #52]	; (80018e4 <__aeabi_d2iz+0x60>)
 80018b0:	1ac0      	subs	r0, r0, r3
 80018b2:	281f      	cmp	r0, #31
 80018b4:	dd08      	ble.n	80018c8 <__aeabi_d2iz+0x44>
 80018b6:	480c      	ldr	r0, [pc, #48]	; (80018e8 <__aeabi_d2iz+0x64>)
 80018b8:	1ac3      	subs	r3, r0, r3
 80018ba:	40d9      	lsrs	r1, r3
 80018bc:	000b      	movs	r3, r1
 80018be:	4258      	negs	r0, r3
 80018c0:	2a00      	cmp	r2, #0
 80018c2:	d1f0      	bne.n	80018a6 <__aeabi_d2iz+0x22>
 80018c4:	0018      	movs	r0, r3
 80018c6:	e7ee      	b.n	80018a6 <__aeabi_d2iz+0x22>
 80018c8:	4c08      	ldr	r4, [pc, #32]	; (80018ec <__aeabi_d2iz+0x68>)
 80018ca:	40c5      	lsrs	r5, r0
 80018cc:	46a4      	mov	ip, r4
 80018ce:	4463      	add	r3, ip
 80018d0:	4099      	lsls	r1, r3
 80018d2:	000b      	movs	r3, r1
 80018d4:	432b      	orrs	r3, r5
 80018d6:	e7f2      	b.n	80018be <__aeabi_d2iz+0x3a>
 80018d8:	000003fe 	.word	0x000003fe
 80018dc:	0000041d 	.word	0x0000041d
 80018e0:	7fffffff 	.word	0x7fffffff
 80018e4:	00000433 	.word	0x00000433
 80018e8:	00000413 	.word	0x00000413
 80018ec:	fffffbed 	.word	0xfffffbed

080018f0 <__aeabi_i2d>:
 80018f0:	b570      	push	{r4, r5, r6, lr}
 80018f2:	2800      	cmp	r0, #0
 80018f4:	d016      	beq.n	8001924 <__aeabi_i2d+0x34>
 80018f6:	17c3      	asrs	r3, r0, #31
 80018f8:	18c5      	adds	r5, r0, r3
 80018fa:	405d      	eors	r5, r3
 80018fc:	0fc4      	lsrs	r4, r0, #31
 80018fe:	0028      	movs	r0, r5
 8001900:	f000 f88a 	bl	8001a18 <__clzsi2>
 8001904:	4a11      	ldr	r2, [pc, #68]	; (800194c <__aeabi_i2d+0x5c>)
 8001906:	1a12      	subs	r2, r2, r0
 8001908:	280a      	cmp	r0, #10
 800190a:	dc16      	bgt.n	800193a <__aeabi_i2d+0x4a>
 800190c:	0003      	movs	r3, r0
 800190e:	002e      	movs	r6, r5
 8001910:	3315      	adds	r3, #21
 8001912:	409e      	lsls	r6, r3
 8001914:	230b      	movs	r3, #11
 8001916:	1a18      	subs	r0, r3, r0
 8001918:	40c5      	lsrs	r5, r0
 800191a:	0553      	lsls	r3, r2, #21
 800191c:	032d      	lsls	r5, r5, #12
 800191e:	0b2d      	lsrs	r5, r5, #12
 8001920:	0d5b      	lsrs	r3, r3, #21
 8001922:	e003      	b.n	800192c <__aeabi_i2d+0x3c>
 8001924:	2400      	movs	r4, #0
 8001926:	2300      	movs	r3, #0
 8001928:	2500      	movs	r5, #0
 800192a:	2600      	movs	r6, #0
 800192c:	051b      	lsls	r3, r3, #20
 800192e:	432b      	orrs	r3, r5
 8001930:	07e4      	lsls	r4, r4, #31
 8001932:	4323      	orrs	r3, r4
 8001934:	0030      	movs	r0, r6
 8001936:	0019      	movs	r1, r3
 8001938:	bd70      	pop	{r4, r5, r6, pc}
 800193a:	380b      	subs	r0, #11
 800193c:	4085      	lsls	r5, r0
 800193e:	0553      	lsls	r3, r2, #21
 8001940:	032d      	lsls	r5, r5, #12
 8001942:	2600      	movs	r6, #0
 8001944:	0b2d      	lsrs	r5, r5, #12
 8001946:	0d5b      	lsrs	r3, r3, #21
 8001948:	e7f0      	b.n	800192c <__aeabi_i2d+0x3c>
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	0000041e 	.word	0x0000041e

08001950 <__aeabi_ui2d>:
 8001950:	b510      	push	{r4, lr}
 8001952:	1e04      	subs	r4, r0, #0
 8001954:	d010      	beq.n	8001978 <__aeabi_ui2d+0x28>
 8001956:	f000 f85f 	bl	8001a18 <__clzsi2>
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <__aeabi_ui2d+0x48>)
 800195c:	1a1b      	subs	r3, r3, r0
 800195e:	280a      	cmp	r0, #10
 8001960:	dc11      	bgt.n	8001986 <__aeabi_ui2d+0x36>
 8001962:	220b      	movs	r2, #11
 8001964:	0021      	movs	r1, r4
 8001966:	1a12      	subs	r2, r2, r0
 8001968:	40d1      	lsrs	r1, r2
 800196a:	3015      	adds	r0, #21
 800196c:	030a      	lsls	r2, r1, #12
 800196e:	055b      	lsls	r3, r3, #21
 8001970:	4084      	lsls	r4, r0
 8001972:	0b12      	lsrs	r2, r2, #12
 8001974:	0d5b      	lsrs	r3, r3, #21
 8001976:	e001      	b.n	800197c <__aeabi_ui2d+0x2c>
 8001978:	2300      	movs	r3, #0
 800197a:	2200      	movs	r2, #0
 800197c:	051b      	lsls	r3, r3, #20
 800197e:	4313      	orrs	r3, r2
 8001980:	0020      	movs	r0, r4
 8001982:	0019      	movs	r1, r3
 8001984:	bd10      	pop	{r4, pc}
 8001986:	0022      	movs	r2, r4
 8001988:	380b      	subs	r0, #11
 800198a:	4082      	lsls	r2, r0
 800198c:	055b      	lsls	r3, r3, #21
 800198e:	0312      	lsls	r2, r2, #12
 8001990:	2400      	movs	r4, #0
 8001992:	0b12      	lsrs	r2, r2, #12
 8001994:	0d5b      	lsrs	r3, r3, #21
 8001996:	e7f1      	b.n	800197c <__aeabi_ui2d+0x2c>
 8001998:	0000041e 	.word	0x0000041e

0800199c <__aeabi_cdrcmple>:
 800199c:	4684      	mov	ip, r0
 800199e:	1c10      	adds	r0, r2, #0
 80019a0:	4662      	mov	r2, ip
 80019a2:	468c      	mov	ip, r1
 80019a4:	1c19      	adds	r1, r3, #0
 80019a6:	4663      	mov	r3, ip
 80019a8:	e000      	b.n	80019ac <__aeabi_cdcmpeq>
 80019aa:	46c0      	nop			; (mov r8, r8)

080019ac <__aeabi_cdcmpeq>:
 80019ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80019ae:	f000 f90b 	bl	8001bc8 <__ledf2>
 80019b2:	2800      	cmp	r0, #0
 80019b4:	d401      	bmi.n	80019ba <__aeabi_cdcmpeq+0xe>
 80019b6:	2100      	movs	r1, #0
 80019b8:	42c8      	cmn	r0, r1
 80019ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080019bc <__aeabi_dcmpeq>:
 80019bc:	b510      	push	{r4, lr}
 80019be:	f000 f855 	bl	8001a6c <__eqdf2>
 80019c2:	4240      	negs	r0, r0
 80019c4:	3001      	adds	r0, #1
 80019c6:	bd10      	pop	{r4, pc}

080019c8 <__aeabi_dcmplt>:
 80019c8:	b510      	push	{r4, lr}
 80019ca:	f000 f8fd 	bl	8001bc8 <__ledf2>
 80019ce:	2800      	cmp	r0, #0
 80019d0:	db01      	blt.n	80019d6 <__aeabi_dcmplt+0xe>
 80019d2:	2000      	movs	r0, #0
 80019d4:	bd10      	pop	{r4, pc}
 80019d6:	2001      	movs	r0, #1
 80019d8:	bd10      	pop	{r4, pc}
 80019da:	46c0      	nop			; (mov r8, r8)

080019dc <__aeabi_dcmple>:
 80019dc:	b510      	push	{r4, lr}
 80019de:	f000 f8f3 	bl	8001bc8 <__ledf2>
 80019e2:	2800      	cmp	r0, #0
 80019e4:	dd01      	ble.n	80019ea <__aeabi_dcmple+0xe>
 80019e6:	2000      	movs	r0, #0
 80019e8:	bd10      	pop	{r4, pc}
 80019ea:	2001      	movs	r0, #1
 80019ec:	bd10      	pop	{r4, pc}
 80019ee:	46c0      	nop			; (mov r8, r8)

080019f0 <__aeabi_dcmpgt>:
 80019f0:	b510      	push	{r4, lr}
 80019f2:	f000 f877 	bl	8001ae4 <__gedf2>
 80019f6:	2800      	cmp	r0, #0
 80019f8:	dc01      	bgt.n	80019fe <__aeabi_dcmpgt+0xe>
 80019fa:	2000      	movs	r0, #0
 80019fc:	bd10      	pop	{r4, pc}
 80019fe:	2001      	movs	r0, #1
 8001a00:	bd10      	pop	{r4, pc}
 8001a02:	46c0      	nop			; (mov r8, r8)

08001a04 <__aeabi_dcmpge>:
 8001a04:	b510      	push	{r4, lr}
 8001a06:	f000 f86d 	bl	8001ae4 <__gedf2>
 8001a0a:	2800      	cmp	r0, #0
 8001a0c:	da01      	bge.n	8001a12 <__aeabi_dcmpge+0xe>
 8001a0e:	2000      	movs	r0, #0
 8001a10:	bd10      	pop	{r4, pc}
 8001a12:	2001      	movs	r0, #1
 8001a14:	bd10      	pop	{r4, pc}
 8001a16:	46c0      	nop			; (mov r8, r8)

08001a18 <__clzsi2>:
 8001a18:	211c      	movs	r1, #28
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	041b      	lsls	r3, r3, #16
 8001a1e:	4298      	cmp	r0, r3
 8001a20:	d301      	bcc.n	8001a26 <__clzsi2+0xe>
 8001a22:	0c00      	lsrs	r0, r0, #16
 8001a24:	3910      	subs	r1, #16
 8001a26:	0a1b      	lsrs	r3, r3, #8
 8001a28:	4298      	cmp	r0, r3
 8001a2a:	d301      	bcc.n	8001a30 <__clzsi2+0x18>
 8001a2c:	0a00      	lsrs	r0, r0, #8
 8001a2e:	3908      	subs	r1, #8
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	4298      	cmp	r0, r3
 8001a34:	d301      	bcc.n	8001a3a <__clzsi2+0x22>
 8001a36:	0900      	lsrs	r0, r0, #4
 8001a38:	3904      	subs	r1, #4
 8001a3a:	a202      	add	r2, pc, #8	; (adr r2, 8001a44 <__clzsi2+0x2c>)
 8001a3c:	5c10      	ldrb	r0, [r2, r0]
 8001a3e:	1840      	adds	r0, r0, r1
 8001a40:	4770      	bx	lr
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	02020304 	.word	0x02020304
 8001a48:	01010101 	.word	0x01010101
	...

08001a54 <__clzdi2>:
 8001a54:	b510      	push	{r4, lr}
 8001a56:	2900      	cmp	r1, #0
 8001a58:	d103      	bne.n	8001a62 <__clzdi2+0xe>
 8001a5a:	f7ff ffdd 	bl	8001a18 <__clzsi2>
 8001a5e:	3020      	adds	r0, #32
 8001a60:	e002      	b.n	8001a68 <__clzdi2+0x14>
 8001a62:	1c08      	adds	r0, r1, #0
 8001a64:	f7ff ffd8 	bl	8001a18 <__clzsi2>
 8001a68:	bd10      	pop	{r4, pc}
 8001a6a:	46c0      	nop			; (mov r8, r8)

08001a6c <__eqdf2>:
 8001a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6e:	464f      	mov	r7, r9
 8001a70:	4646      	mov	r6, r8
 8001a72:	46d6      	mov	lr, sl
 8001a74:	4694      	mov	ip, r2
 8001a76:	4691      	mov	r9, r2
 8001a78:	031a      	lsls	r2, r3, #12
 8001a7a:	0b12      	lsrs	r2, r2, #12
 8001a7c:	4d18      	ldr	r5, [pc, #96]	; (8001ae0 <__eqdf2+0x74>)
 8001a7e:	b5c0      	push	{r6, r7, lr}
 8001a80:	004c      	lsls	r4, r1, #1
 8001a82:	030f      	lsls	r7, r1, #12
 8001a84:	4692      	mov	sl, r2
 8001a86:	005a      	lsls	r2, r3, #1
 8001a88:	0006      	movs	r6, r0
 8001a8a:	4680      	mov	r8, r0
 8001a8c:	0b3f      	lsrs	r7, r7, #12
 8001a8e:	2001      	movs	r0, #1
 8001a90:	0d64      	lsrs	r4, r4, #21
 8001a92:	0fc9      	lsrs	r1, r1, #31
 8001a94:	0d52      	lsrs	r2, r2, #21
 8001a96:	0fdb      	lsrs	r3, r3, #31
 8001a98:	42ac      	cmp	r4, r5
 8001a9a:	d00a      	beq.n	8001ab2 <__eqdf2+0x46>
 8001a9c:	42aa      	cmp	r2, r5
 8001a9e:	d003      	beq.n	8001aa8 <__eqdf2+0x3c>
 8001aa0:	4294      	cmp	r4, r2
 8001aa2:	d101      	bne.n	8001aa8 <__eqdf2+0x3c>
 8001aa4:	4557      	cmp	r7, sl
 8001aa6:	d00d      	beq.n	8001ac4 <__eqdf2+0x58>
 8001aa8:	bce0      	pop	{r5, r6, r7}
 8001aaa:	46ba      	mov	sl, r7
 8001aac:	46b1      	mov	r9, r6
 8001aae:	46a8      	mov	r8, r5
 8001ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ab2:	003d      	movs	r5, r7
 8001ab4:	4335      	orrs	r5, r6
 8001ab6:	d1f7      	bne.n	8001aa8 <__eqdf2+0x3c>
 8001ab8:	42a2      	cmp	r2, r4
 8001aba:	d1f5      	bne.n	8001aa8 <__eqdf2+0x3c>
 8001abc:	4652      	mov	r2, sl
 8001abe:	4665      	mov	r5, ip
 8001ac0:	432a      	orrs	r2, r5
 8001ac2:	d1f1      	bne.n	8001aa8 <__eqdf2+0x3c>
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	45c8      	cmp	r8, r9
 8001ac8:	d1ee      	bne.n	8001aa8 <__eqdf2+0x3c>
 8001aca:	4299      	cmp	r1, r3
 8001acc:	d006      	beq.n	8001adc <__eqdf2+0x70>
 8001ace:	2c00      	cmp	r4, #0
 8001ad0:	d1ea      	bne.n	8001aa8 <__eqdf2+0x3c>
 8001ad2:	433e      	orrs	r6, r7
 8001ad4:	0030      	movs	r0, r6
 8001ad6:	1e46      	subs	r6, r0, #1
 8001ad8:	41b0      	sbcs	r0, r6
 8001ada:	e7e5      	b.n	8001aa8 <__eqdf2+0x3c>
 8001adc:	2000      	movs	r0, #0
 8001ade:	e7e3      	b.n	8001aa8 <__eqdf2+0x3c>
 8001ae0:	000007ff 	.word	0x000007ff

08001ae4 <__gedf2>:
 8001ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae6:	464e      	mov	r6, r9
 8001ae8:	4645      	mov	r5, r8
 8001aea:	4657      	mov	r7, sl
 8001aec:	46de      	mov	lr, fp
 8001aee:	0004      	movs	r4, r0
 8001af0:	0018      	movs	r0, r3
 8001af2:	b5e0      	push	{r5, r6, r7, lr}
 8001af4:	0016      	movs	r6, r2
 8001af6:	031b      	lsls	r3, r3, #12
 8001af8:	0b1b      	lsrs	r3, r3, #12
 8001afa:	4d32      	ldr	r5, [pc, #200]	; (8001bc4 <__gedf2+0xe0>)
 8001afc:	030f      	lsls	r7, r1, #12
 8001afe:	004a      	lsls	r2, r1, #1
 8001b00:	4699      	mov	r9, r3
 8001b02:	0043      	lsls	r3, r0, #1
 8001b04:	46a4      	mov	ip, r4
 8001b06:	46b0      	mov	r8, r6
 8001b08:	0b3f      	lsrs	r7, r7, #12
 8001b0a:	0d52      	lsrs	r2, r2, #21
 8001b0c:	0fc9      	lsrs	r1, r1, #31
 8001b0e:	0d5b      	lsrs	r3, r3, #21
 8001b10:	0fc0      	lsrs	r0, r0, #31
 8001b12:	42aa      	cmp	r2, r5
 8001b14:	d029      	beq.n	8001b6a <__gedf2+0x86>
 8001b16:	42ab      	cmp	r3, r5
 8001b18:	d018      	beq.n	8001b4c <__gedf2+0x68>
 8001b1a:	2a00      	cmp	r2, #0
 8001b1c:	d12a      	bne.n	8001b74 <__gedf2+0x90>
 8001b1e:	433c      	orrs	r4, r7
 8001b20:	46a3      	mov	fp, r4
 8001b22:	4265      	negs	r5, r4
 8001b24:	4165      	adcs	r5, r4
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d102      	bne.n	8001b30 <__gedf2+0x4c>
 8001b2a:	464c      	mov	r4, r9
 8001b2c:	4326      	orrs	r6, r4
 8001b2e:	d027      	beq.n	8001b80 <__gedf2+0x9c>
 8001b30:	2d00      	cmp	r5, #0
 8001b32:	d115      	bne.n	8001b60 <__gedf2+0x7c>
 8001b34:	4281      	cmp	r1, r0
 8001b36:	d028      	beq.n	8001b8a <__gedf2+0xa6>
 8001b38:	2002      	movs	r0, #2
 8001b3a:	3901      	subs	r1, #1
 8001b3c:	4008      	ands	r0, r1
 8001b3e:	3801      	subs	r0, #1
 8001b40:	bcf0      	pop	{r4, r5, r6, r7}
 8001b42:	46bb      	mov	fp, r7
 8001b44:	46b2      	mov	sl, r6
 8001b46:	46a9      	mov	r9, r5
 8001b48:	46a0      	mov	r8, r4
 8001b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b4c:	464d      	mov	r5, r9
 8001b4e:	432e      	orrs	r6, r5
 8001b50:	d12f      	bne.n	8001bb2 <__gedf2+0xce>
 8001b52:	2a00      	cmp	r2, #0
 8001b54:	d1ee      	bne.n	8001b34 <__gedf2+0x50>
 8001b56:	433c      	orrs	r4, r7
 8001b58:	4265      	negs	r5, r4
 8001b5a:	4165      	adcs	r5, r4
 8001b5c:	2d00      	cmp	r5, #0
 8001b5e:	d0e9      	beq.n	8001b34 <__gedf2+0x50>
 8001b60:	2800      	cmp	r0, #0
 8001b62:	d1ed      	bne.n	8001b40 <__gedf2+0x5c>
 8001b64:	2001      	movs	r0, #1
 8001b66:	4240      	negs	r0, r0
 8001b68:	e7ea      	b.n	8001b40 <__gedf2+0x5c>
 8001b6a:	003d      	movs	r5, r7
 8001b6c:	4325      	orrs	r5, r4
 8001b6e:	d120      	bne.n	8001bb2 <__gedf2+0xce>
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d0eb      	beq.n	8001b4c <__gedf2+0x68>
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1dd      	bne.n	8001b34 <__gedf2+0x50>
 8001b78:	464c      	mov	r4, r9
 8001b7a:	4326      	orrs	r6, r4
 8001b7c:	d1da      	bne.n	8001b34 <__gedf2+0x50>
 8001b7e:	e7db      	b.n	8001b38 <__gedf2+0x54>
 8001b80:	465b      	mov	r3, fp
 8001b82:	2000      	movs	r0, #0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0db      	beq.n	8001b40 <__gedf2+0x5c>
 8001b88:	e7d6      	b.n	8001b38 <__gedf2+0x54>
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	dc0a      	bgt.n	8001ba4 <__gedf2+0xc0>
 8001b8e:	dbe7      	blt.n	8001b60 <__gedf2+0x7c>
 8001b90:	454f      	cmp	r7, r9
 8001b92:	d8d1      	bhi.n	8001b38 <__gedf2+0x54>
 8001b94:	d010      	beq.n	8001bb8 <__gedf2+0xd4>
 8001b96:	2000      	movs	r0, #0
 8001b98:	454f      	cmp	r7, r9
 8001b9a:	d2d1      	bcs.n	8001b40 <__gedf2+0x5c>
 8001b9c:	2900      	cmp	r1, #0
 8001b9e:	d0e1      	beq.n	8001b64 <__gedf2+0x80>
 8001ba0:	0008      	movs	r0, r1
 8001ba2:	e7cd      	b.n	8001b40 <__gedf2+0x5c>
 8001ba4:	4243      	negs	r3, r0
 8001ba6:	4158      	adcs	r0, r3
 8001ba8:	2302      	movs	r3, #2
 8001baa:	4240      	negs	r0, r0
 8001bac:	4018      	ands	r0, r3
 8001bae:	3801      	subs	r0, #1
 8001bb0:	e7c6      	b.n	8001b40 <__gedf2+0x5c>
 8001bb2:	2002      	movs	r0, #2
 8001bb4:	4240      	negs	r0, r0
 8001bb6:	e7c3      	b.n	8001b40 <__gedf2+0x5c>
 8001bb8:	45c4      	cmp	ip, r8
 8001bba:	d8bd      	bhi.n	8001b38 <__gedf2+0x54>
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	45c4      	cmp	ip, r8
 8001bc0:	d2be      	bcs.n	8001b40 <__gedf2+0x5c>
 8001bc2:	e7eb      	b.n	8001b9c <__gedf2+0xb8>
 8001bc4:	000007ff 	.word	0x000007ff

08001bc8 <__ledf2>:
 8001bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bca:	464e      	mov	r6, r9
 8001bcc:	4645      	mov	r5, r8
 8001bce:	4657      	mov	r7, sl
 8001bd0:	46de      	mov	lr, fp
 8001bd2:	0004      	movs	r4, r0
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	b5e0      	push	{r5, r6, r7, lr}
 8001bd8:	0016      	movs	r6, r2
 8001bda:	031b      	lsls	r3, r3, #12
 8001bdc:	0b1b      	lsrs	r3, r3, #12
 8001bde:	4d31      	ldr	r5, [pc, #196]	; (8001ca4 <__ledf2+0xdc>)
 8001be0:	030f      	lsls	r7, r1, #12
 8001be2:	004a      	lsls	r2, r1, #1
 8001be4:	4699      	mov	r9, r3
 8001be6:	0043      	lsls	r3, r0, #1
 8001be8:	46a4      	mov	ip, r4
 8001bea:	46b0      	mov	r8, r6
 8001bec:	0b3f      	lsrs	r7, r7, #12
 8001bee:	0d52      	lsrs	r2, r2, #21
 8001bf0:	0fc9      	lsrs	r1, r1, #31
 8001bf2:	0d5b      	lsrs	r3, r3, #21
 8001bf4:	0fc0      	lsrs	r0, r0, #31
 8001bf6:	42aa      	cmp	r2, r5
 8001bf8:	d011      	beq.n	8001c1e <__ledf2+0x56>
 8001bfa:	42ab      	cmp	r3, r5
 8001bfc:	d014      	beq.n	8001c28 <__ledf2+0x60>
 8001bfe:	2a00      	cmp	r2, #0
 8001c00:	d12f      	bne.n	8001c62 <__ledf2+0x9a>
 8001c02:	433c      	orrs	r4, r7
 8001c04:	46a3      	mov	fp, r4
 8001c06:	4265      	negs	r5, r4
 8001c08:	4165      	adcs	r5, r4
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d114      	bne.n	8001c38 <__ledf2+0x70>
 8001c0e:	464c      	mov	r4, r9
 8001c10:	4326      	orrs	r6, r4
 8001c12:	d111      	bne.n	8001c38 <__ledf2+0x70>
 8001c14:	465b      	mov	r3, fp
 8001c16:	2000      	movs	r0, #0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d017      	beq.n	8001c4c <__ledf2+0x84>
 8001c1c:	e010      	b.n	8001c40 <__ledf2+0x78>
 8001c1e:	003d      	movs	r5, r7
 8001c20:	4325      	orrs	r5, r4
 8001c22:	d112      	bne.n	8001c4a <__ledf2+0x82>
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d11c      	bne.n	8001c62 <__ledf2+0x9a>
 8001c28:	464d      	mov	r5, r9
 8001c2a:	432e      	orrs	r6, r5
 8001c2c:	d10d      	bne.n	8001c4a <__ledf2+0x82>
 8001c2e:	2a00      	cmp	r2, #0
 8001c30:	d104      	bne.n	8001c3c <__ledf2+0x74>
 8001c32:	433c      	orrs	r4, r7
 8001c34:	4265      	negs	r5, r4
 8001c36:	4165      	adcs	r5, r4
 8001c38:	2d00      	cmp	r5, #0
 8001c3a:	d10d      	bne.n	8001c58 <__ledf2+0x90>
 8001c3c:	4281      	cmp	r1, r0
 8001c3e:	d016      	beq.n	8001c6e <__ledf2+0xa6>
 8001c40:	2002      	movs	r0, #2
 8001c42:	3901      	subs	r1, #1
 8001c44:	4008      	ands	r0, r1
 8001c46:	3801      	subs	r0, #1
 8001c48:	e000      	b.n	8001c4c <__ledf2+0x84>
 8001c4a:	2002      	movs	r0, #2
 8001c4c:	bcf0      	pop	{r4, r5, r6, r7}
 8001c4e:	46bb      	mov	fp, r7
 8001c50:	46b2      	mov	sl, r6
 8001c52:	46a9      	mov	r9, r5
 8001c54:	46a0      	mov	r8, r4
 8001c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c58:	2800      	cmp	r0, #0
 8001c5a:	d1f7      	bne.n	8001c4c <__ledf2+0x84>
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	4240      	negs	r0, r0
 8001c60:	e7f4      	b.n	8001c4c <__ledf2+0x84>
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1ea      	bne.n	8001c3c <__ledf2+0x74>
 8001c66:	464c      	mov	r4, r9
 8001c68:	4326      	orrs	r6, r4
 8001c6a:	d1e7      	bne.n	8001c3c <__ledf2+0x74>
 8001c6c:	e7e8      	b.n	8001c40 <__ledf2+0x78>
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	dd06      	ble.n	8001c80 <__ledf2+0xb8>
 8001c72:	4243      	negs	r3, r0
 8001c74:	4158      	adcs	r0, r3
 8001c76:	2302      	movs	r3, #2
 8001c78:	4240      	negs	r0, r0
 8001c7a:	4018      	ands	r0, r3
 8001c7c:	3801      	subs	r0, #1
 8001c7e:	e7e5      	b.n	8001c4c <__ledf2+0x84>
 8001c80:	429a      	cmp	r2, r3
 8001c82:	dbe9      	blt.n	8001c58 <__ledf2+0x90>
 8001c84:	454f      	cmp	r7, r9
 8001c86:	d8db      	bhi.n	8001c40 <__ledf2+0x78>
 8001c88:	d006      	beq.n	8001c98 <__ledf2+0xd0>
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	454f      	cmp	r7, r9
 8001c8e:	d2dd      	bcs.n	8001c4c <__ledf2+0x84>
 8001c90:	2900      	cmp	r1, #0
 8001c92:	d0e3      	beq.n	8001c5c <__ledf2+0x94>
 8001c94:	0008      	movs	r0, r1
 8001c96:	e7d9      	b.n	8001c4c <__ledf2+0x84>
 8001c98:	45c4      	cmp	ip, r8
 8001c9a:	d8d1      	bhi.n	8001c40 <__ledf2+0x78>
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	45c4      	cmp	ip, r8
 8001ca0:	d2d4      	bcs.n	8001c4c <__ledf2+0x84>
 8001ca2:	e7f5      	b.n	8001c90 <__ledf2+0xc8>
 8001ca4:	000007ff 	.word	0x000007ff

08001ca8 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 8001ca8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 8001caa:	f000 fe41 	bl	8002930 <SystemApp_Init>
  SubghzApp_Init();
 8001cae:	f000 f9d3 	bl	8002058 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8001cb2:	bd10      	pop	{r4, pc}

08001cb4 <MX_SubGHz_Phy_Process>:
void MX_SubGHz_Phy_Process(void)
{
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001cb4:	2001      	movs	r0, #1
{
 8001cb6:	b510      	push	{r4, lr}
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001cb8:	4240      	negs	r0, r0
 8001cba:	f005 fc19 	bl	80074f0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 8001cbe:	bd10      	pop	{r4, pc}

08001cc0 <toogleBlueLed>:
    HAL_GPIO_TogglePin(LEDS_PIN_GROUP, GREEN_LED);
}

void toogleBlueLed(void)
{
    HAL_GPIO_TogglePin(LEDS_PIN_GROUP, BLUE_LED);
 8001cc0:	2180      	movs	r1, #128	; 0x80
 8001cc2:	20a0      	movs	r0, #160	; 0xa0
{
 8001cc4:	b510      	push	{r4, lr}
    HAL_GPIO_TogglePin(LEDS_PIN_GROUP, BLUE_LED);
 8001cc6:	00c9      	lsls	r1, r1, #3
 8001cc8:	05c0      	lsls	r0, r0, #23
 8001cca:	f001 fed1 	bl	8003a70 <HAL_GPIO_TogglePin>
}
 8001cce:	bd10      	pop	{r4, pc}

08001cd0 <OnledEvent>:

  /* USER CODE END OnRxError_2 */
}

static void OnledEvent(void *context)
{
 8001cd0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN OnledEvent_1 */

  /* USER CODE END OnledEvent_1 */
  LED_Toggle(LED_GREEN);
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f001 fa00 	bl	80030d8 <BSP_LED_Toggle>
  LED_Toggle(LED_RED1);
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f001 f9fd 	bl	80030d8 <BSP_LED_Toggle>

  UTIL_TIMER_Start(&timerLed);
 8001cde:	4802      	ldr	r0, [pc, #8]	; (8001ce8 <OnledEvent+0x18>)
 8001ce0:	f005 fd68 	bl	80077b4 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnledEvent_2 */

  /* USER CODE END OnledEvent_2 */
}
 8001ce4:	bd10      	pop	{r4, pc}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	200000b0 	.word	0x200000b0

08001cec <PingPong_Process>:
{
 8001cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001cee:	4b84      	ldr	r3, [pc, #528]	; (8001f00 <PingPong_Process+0x214>)
 8001cf0:	7e18      	ldrb	r0, [r3, #24]
 8001cf2:	3801      	subs	r0, #1
 8001cf4:	2804      	cmp	r0, #4
 8001cf6:	d864      	bhi.n	8001dc2 <PingPong_Process+0xd6>
 8001cf8:	f7fe fa2c 	bl	8000154 <__gnu_thumb1_case_uhi>
 8001cfc:	00c80005 	.word	0x00c80005
 8001d00:	00bb00c8 	.word	0x00bb00c8
 8001d04:	00fb      	.short	0x00fb
      if (isMaster == true)
 8001d06:	4d7f      	ldr	r5, [pc, #508]	; (8001f04 <PingPong_Process+0x218>)
 8001d08:	78af      	ldrb	r7, [r5, #2]
 8001d0a:	882b      	ldrh	r3, [r5, #0]
 8001d0c:	2f00      	cmp	r7, #0
 8001d0e:	d05d      	beq.n	8001dcc <PingPong_Process+0xe0>
        if (BufferSize > 0)
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d053      	beq.n	8001dbc <PingPong_Process+0xd0>
          if (strncmp((const char *)Buffer, (const char *)PongMsg, 4) == 0)
 8001d14:	4c7c      	ldr	r4, [pc, #496]	; (8001f08 <PingPong_Process+0x21c>)
 8001d16:	2204      	movs	r2, #4
 8001d18:	0020      	movs	r0, r4
 8001d1a:	497c      	ldr	r1, [pc, #496]	; (8001f0c <PingPong_Process+0x220>)
 8001d1c:	f005 ff72 	bl	8007c04 <strncmp>
 8001d20:	4f7b      	ldr	r7, [pc, #492]	; (8001f10 <PingPong_Process+0x224>)
 8001d22:	1e06      	subs	r6, r0, #0
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	d133      	bne.n	8001d92 <PingPong_Process+0xa6>
            UTIL_TIMER_Stop(&timerLed);
 8001d2a:	4875      	ldr	r0, [pc, #468]	; (8001f00 <PingPong_Process+0x214>)
 8001d2c:	f005 fcee 	bl	800770c <UTIL_TIMER_Stop>
            LED_Off(LED_GREEN);
 8001d30:	0030      	movs	r0, r6
 8001d32:	f001 f9c1 	bl	80030b8 <BSP_LED_Off>
            LED_Toggle(LED_RED1);
 8001d36:	2001      	movs	r0, #1
 8001d38:	f001 f9ce 	bl	80030d8 <BSP_LED_Toggle>
            Buffer[0] = 'P';
 8001d3c:	2350      	movs	r3, #80	; 0x50
 8001d3e:	7023      	strb	r3, [r4, #0]
            Buffer[1] = 'I';
 8001d40:	3b07      	subs	r3, #7
 8001d42:	7063      	strb	r3, [r4, #1]
            Buffer[2] = 'N';
 8001d44:	3305      	adds	r3, #5
 8001d46:	70a3      	strb	r3, [r4, #2]
            for (i = 4; i < BufferSize; i++)
 8001d48:	882a      	ldrh	r2, [r5, #0]
            Buffer[3] = 'G';
 8001d4a:	3b07      	subs	r3, #7
 8001d4c:	70e3      	strb	r3, [r4, #3]
            for (i = 4; i < BufferSize; i++)
 8001d4e:	3b43      	subs	r3, #67	; 0x43
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d319      	bcc.n	8001d88 <PingPong_Process+0x9c>
            APP_LOG(TS_ON, VLEVEL_L, "...PING\n\r");
 8001d54:	2201      	movs	r2, #1
 8001d56:	2100      	movs	r1, #0
 8001d58:	0010      	movs	r0, r2
 8001d5a:	4b6e      	ldr	r3, [pc, #440]	; (8001f14 <PingPong_Process+0x228>)
 8001d5c:	f005 fa74 	bl	8007248 <UTIL_ADV_TRACE_COND_FSend>
            APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 8001d60:	2201      	movs	r2, #1
 8001d62:	2100      	movs	r1, #0
 8001d64:	0010      	movs	r0, r2
 8001d66:	4b6c      	ldr	r3, [pc, #432]	; (8001f18 <PingPong_Process+0x22c>)
 8001d68:	f005 fa6e 	bl	8007248 <UTIL_ADV_TRACE_COND_FSend>
            Radio.SetChannel(RF_FREQUENCY);
 8001d6c:	9b00      	ldr	r3, [sp, #0]
 8001d6e:	486b      	ldr	r0, [pc, #428]	; (8001f1c <PingPong_Process+0x230>)
 8001d70:	4798      	blx	r3
            HAL_Delay(Sx_Board_GetWakeUpTime() + TCXO_WORKAROUND_TIME_MARGIN);
 8001d72:	f001 faa1 	bl	80032b8 <SX126x_RADIO_GetWakeUpTime>
 8001d76:	3032      	adds	r0, #50	; 0x32
 8001d78:	f000 fe62 	bl	8002a40 <HAL_Delay>
            Radio.Send(Buffer, BufferSize);
 8001d7c:	7829      	ldrb	r1, [r5, #0]
 8001d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
        Radio.Send(Buffer, BufferSize);
 8001d80:	0020      	movs	r0, r4
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	4798      	blx	r3
 8001d86:	e019      	b.n	8001dbc <PingPong_Process+0xd0>
              Buffer[i] = i - 4;
 8001d88:	1f19      	subs	r1, r3, #4
 8001d8a:	54e1      	strb	r1, [r4, r3]
            for (i = 4; i < BufferSize; i++)
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	e7de      	b.n	8001d50 <PingPong_Process+0x64>
          else if (strncmp((const char *)Buffer, (const char *)PingMsg, 4) == 0)
 8001d92:	4b5e      	ldr	r3, [pc, #376]	; (8001f0c <PingPong_Process+0x220>)
 8001d94:	0020      	movs	r0, r4
 8001d96:	1d59      	adds	r1, r3, #5
 8001d98:	2204      	movs	r2, #4
 8001d9a:	f005 ff33 	bl	8007c04 <strncmp>
 8001d9e:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8001da0:	1e01      	subs	r1, r0, #0
 8001da2:	d10f      	bne.n	8001dc4 <PingPong_Process+0xd8>
            APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 8001da4:	2201      	movs	r2, #1
 8001da6:	4b5e      	ldr	r3, [pc, #376]	; (8001f20 <PingPong_Process+0x234>)
            isMaster = false;
 8001da8:	70a8      	strb	r0, [r5, #2]
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 8001daa:	0010      	movs	r0, r2
 8001dac:	f005 fa4c 	bl	8007248 <UTIL_ADV_TRACE_COND_FSend>
            Radio.SetChannel(RF_FREQUENCY);
 8001db0:	485a      	ldr	r0, [pc, #360]	; (8001f1c <PingPong_Process+0x230>)
 8001db2:	9b00      	ldr	r3, [sp, #0]
 8001db4:	4798      	blx	r3
            Radio.Rx(RX_TIMEOUT_VALUE);
 8001db6:	20fa      	movs	r0, #250	; 0xfa
 8001db8:	00c0      	lsls	r0, r0, #3
 8001dba:	47a0      	blx	r4
      State = LOWPOWER;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	4a50      	ldr	r2, [pc, #320]	; (8001f00 <PingPong_Process+0x214>)
 8001dc0:	7613      	strb	r3, [r2, #24]
}
 8001dc2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	4b56      	ldr	r3, [pc, #344]	; (8001f24 <PingPong_Process+0x238>)
 8001dca:	e7ee      	b.n	8001daa <PingPong_Process+0xbe>
        if (BufferSize > 0)
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f5      	beq.n	8001dbc <PingPong_Process+0xd0>
          if (strncmp((const char *)Buffer, (const char *)PingMsg, 4) == 0)
 8001dd0:	494e      	ldr	r1, [pc, #312]	; (8001f0c <PingPong_Process+0x220>)
 8001dd2:	4c4d      	ldr	r4, [pc, #308]	; (8001f08 <PingPong_Process+0x21c>)
 8001dd4:	2204      	movs	r2, #4
 8001dd6:	0020      	movs	r0, r4
 8001dd8:	3105      	adds	r1, #5
 8001dda:	f005 ff13 	bl	8007c04 <strncmp>
 8001dde:	4e4c      	ldr	r6, [pc, #304]	; (8001f10 <PingPong_Process+0x224>)
 8001de0:	9001      	str	r0, [sp, #4]
 8001de2:	68f3      	ldr	r3, [r6, #12]
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	2800      	cmp	r0, #0
 8001de8:	d133      	bne.n	8001e52 <PingPong_Process+0x166>
            UTIL_TIMER_Stop(&timerLed);
 8001dea:	4845      	ldr	r0, [pc, #276]	; (8001f00 <PingPong_Process+0x214>)
 8001dec:	f005 fc8e 	bl	800770c <UTIL_TIMER_Stop>
            LED_Off(LED_RED1);
 8001df0:	2001      	movs	r0, #1
 8001df2:	f001 f961 	bl	80030b8 <BSP_LED_Off>
            LED_Toggle(LED_GREEN);
 8001df6:	9801      	ldr	r0, [sp, #4]
 8001df8:	f001 f96e 	bl	80030d8 <BSP_LED_Toggle>
            Buffer[0] = 'P';
 8001dfc:	2350      	movs	r3, #80	; 0x50
 8001dfe:	7023      	strb	r3, [r4, #0]
            Buffer[1] = 'O';
 8001e00:	3b01      	subs	r3, #1
 8001e02:	7063      	strb	r3, [r4, #1]
            Buffer[2] = 'N';
 8001e04:	3b01      	subs	r3, #1
 8001e06:	70a3      	strb	r3, [r4, #2]
            for (i = 4; i < BufferSize; i++)
 8001e08:	882a      	ldrh	r2, [r5, #0]
            Buffer[3] = 'G';
 8001e0a:	3b07      	subs	r3, #7
 8001e0c:	70e3      	strb	r3, [r4, #3]
            for (i = 4; i < BufferSize; i++)
 8001e0e:	3b43      	subs	r3, #67	; 0x43
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d319      	bcc.n	8001e48 <PingPong_Process+0x15c>
            APP_LOG(TS_ON, VLEVEL_L, "Slave  Tx start\n\r");
 8001e14:	2201      	movs	r2, #1
 8001e16:	2100      	movs	r1, #0
 8001e18:	0010      	movs	r0, r2
 8001e1a:	4b43      	ldr	r3, [pc, #268]	; (8001f28 <PingPong_Process+0x23c>)
 8001e1c:	f005 fa14 	bl	8007248 <UTIL_ADV_TRACE_COND_FSend>
            Radio.SetChannel(RF_FREQUENCY);
 8001e20:	9b00      	ldr	r3, [sp, #0]
 8001e22:	483e      	ldr	r0, [pc, #248]	; (8001f1c <PingPong_Process+0x230>)
 8001e24:	4798      	blx	r3
            HAL_Delay(Sx_Board_GetWakeUpTime() + TCXO_WORKAROUND_TIME_MARGIN);
 8001e26:	f001 fa47 	bl	80032b8 <SX126x_RADIO_GetWakeUpTime>
 8001e2a:	3032      	adds	r0, #50	; 0x32
 8001e2c:	f000 fe08 	bl	8002a40 <HAL_Delay>
            Radio.Send(Buffer, BufferSize);
 8001e30:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8001e32:	0020      	movs	r0, r4
 8001e34:	7829      	ldrb	r1, [r5, #0]
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	4798      	blx	r3
            APP_LOG(TS_ON, VLEVEL_L, "...PONG\n\r");
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	0010      	movs	r0, r2
 8001e40:	4b3a      	ldr	r3, [pc, #232]	; (8001f2c <PingPong_Process+0x240>)
 8001e42:	f005 fa01 	bl	8007248 <UTIL_ADV_TRACE_COND_FSend>
 8001e46:	e7b9      	b.n	8001dbc <PingPong_Process+0xd0>
              Buffer[i] = i - 4;
 8001e48:	1f19      	subs	r1, r3, #4
 8001e4a:	54e1      	strb	r1, [r4, r3]
            for (i = 4; i < BufferSize; i++)
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	e7de      	b.n	8001e10 <PingPong_Process+0x124>
            isMaster = true;
 8001e52:	2001      	movs	r0, #1
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 8001e54:	0039      	movs	r1, r7
 8001e56:	0002      	movs	r2, r0
 8001e58:	4b32      	ldr	r3, [pc, #200]	; (8001f24 <PingPong_Process+0x238>)
            isMaster = true;
 8001e5a:	70a8      	strb	r0, [r5, #2]
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 8001e5c:	f005 f9f4 	bl	8007248 <UTIL_ADV_TRACE_COND_FSend>
            Radio.SetChannel(RF_FREQUENCY);
 8001e60:	9b00      	ldr	r3, [sp, #0]
 8001e62:	482e      	ldr	r0, [pc, #184]	; (8001f1c <PingPong_Process+0x230>)
 8001e64:	4798      	blx	r3
            Radio.Rx(RX_TIMEOUT_VALUE);
 8001e66:	6b73      	ldr	r3, [r6, #52]	; 0x34
      Radio.Rx(RX_TIMEOUT_VALUE);
 8001e68:	20fa      	movs	r0, #250	; 0xfa
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	00c0      	lsls	r0, r0, #3
 8001e6e:	4798      	blx	r3
 8001e70:	e7a4      	b.n	8001dbc <PingPong_Process+0xd0>
      Radio.SetChannel(RF_FREQUENCY);
 8001e72:	4c27      	ldr	r4, [pc, #156]	; (8001f10 <PingPong_Process+0x224>)
 8001e74:	4829      	ldr	r0, [pc, #164]	; (8001f1c <PingPong_Process+0x230>)
 8001e76:	68e3      	ldr	r3, [r4, #12]
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	4798      	blx	r3
      APP_LOG(TS_ON, VLEVEL_L, "Rx start\n\r");
 8001e7c:	4b2c      	ldr	r3, [pc, #176]	; (8001f30 <PingPong_Process+0x244>)
      APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 8001e7e:	2201      	movs	r2, #1
 8001e80:	2100      	movs	r1, #0
 8001e82:	0010      	movs	r0, r2
 8001e84:	f005 f9e0 	bl	8007248 <UTIL_ADV_TRACE_COND_FSend>
      Radio.Rx(RX_TIMEOUT_VALUE);
 8001e88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e8a:	e7ed      	b.n	8001e68 <PingPong_Process+0x17c>
      if (isMaster == true)
 8001e8c:	4e1d      	ldr	r6, [pc, #116]	; (8001f04 <PingPong_Process+0x218>)
 8001e8e:	4d20      	ldr	r5, [pc, #128]	; (8001f10 <PingPong_Process+0x224>)
 8001e90:	78b1      	ldrb	r1, [r6, #2]
 8001e92:	68ef      	ldr	r7, [r5, #12]
 8001e94:	2900      	cmp	r1, #0
 8001e96:	d023      	beq.n	8001ee0 <PingPong_Process+0x1f4>
        Buffer[0] = 'P';
 8001e98:	2350      	movs	r3, #80	; 0x50
 8001e9a:	4c1b      	ldr	r4, [pc, #108]	; (8001f08 <PingPong_Process+0x21c>)
        for (i = 4; i < BufferSize; i++)
 8001e9c:	8832      	ldrh	r2, [r6, #0]
        Buffer[0] = 'P';
 8001e9e:	7023      	strb	r3, [r4, #0]
        Buffer[1] = 'I';
 8001ea0:	3b07      	subs	r3, #7
 8001ea2:	7063      	strb	r3, [r4, #1]
        Buffer[2] = 'N';
 8001ea4:	3305      	adds	r3, #5
 8001ea6:	70a3      	strb	r3, [r4, #2]
        Buffer[3] = 'G';
 8001ea8:	3b07      	subs	r3, #7
 8001eaa:	70e3      	strb	r3, [r4, #3]
        for (i = 4; i < BufferSize; i++)
 8001eac:	3b43      	subs	r3, #67	; 0x43
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d311      	bcc.n	8001ed6 <PingPong_Process+0x1ea>
        APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <PingPong_Process+0x22c>)
 8001eb8:	0010      	movs	r0, r2
 8001eba:	f005 f9c5 	bl	8007248 <UTIL_ADV_TRACE_COND_FSend>
        toogleBlueLed();
 8001ebe:	f7ff feff 	bl	8001cc0 <toogleBlueLed>
        Radio.SetChannel(RF_FREQUENCY);
 8001ec2:	4816      	ldr	r0, [pc, #88]	; (8001f1c <PingPong_Process+0x230>)
 8001ec4:	47b8      	blx	r7
        HAL_Delay(Sx_Board_GetWakeUpTime() + TCXO_WORKAROUND_TIME_MARGIN);
 8001ec6:	f001 f9f7 	bl	80032b8 <SX126x_RADIO_GetWakeUpTime>
 8001eca:	3032      	adds	r0, #50	; 0x32
 8001ecc:	f000 fdb8 	bl	8002a40 <HAL_Delay>
        Radio.Send(Buffer, BufferSize);
 8001ed0:	7831      	ldrb	r1, [r6, #0]
 8001ed2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001ed4:	e754      	b.n	8001d80 <PingPong_Process+0x94>
          Buffer[i] = i - 4;
 8001ed6:	1f19      	subs	r1, r3, #4
 8001ed8:	54e1      	strb	r1, [r4, r3]
        for (i = 4; i < BufferSize; i++)
 8001eda:	3301      	adds	r3, #1
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	e7e6      	b.n	8001eae <PingPong_Process+0x1c2>
        APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <PingPong_Process+0x234>)
 8001ee4:	0010      	movs	r0, r2
 8001ee6:	f005 f9af 	bl	8007248 <UTIL_ADV_TRACE_COND_FSend>
        Radio.SetChannel(RF_FREQUENCY);
 8001eea:	480c      	ldr	r0, [pc, #48]	; (8001f1c <PingPong_Process+0x230>)
 8001eec:	47b8      	blx	r7
        Radio.Rx(RX_TIMEOUT_VALUE);
 8001eee:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001ef0:	e7ba      	b.n	8001e68 <PingPong_Process+0x17c>
      Radio.SetChannel(RF_FREQUENCY);
 8001ef2:	4c07      	ldr	r4, [pc, #28]	; (8001f10 <PingPong_Process+0x224>)
 8001ef4:	4809      	ldr	r0, [pc, #36]	; (8001f1c <PingPong_Process+0x230>)
 8001ef6:	68e3      	ldr	r3, [r4, #12]
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	4798      	blx	r3
      APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 8001efc:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <PingPong_Process+0x234>)
 8001efe:	e7be      	b.n	8001e7e <PingPong_Process+0x192>
 8001f00:	200000b0 	.word	0x200000b0
 8001f04:	20000000 	.word	0x20000000
 8001f08:	2000052c 	.word	0x2000052c
 8001f0c:	08008b48 	.word	0x08008b48
 8001f10:	08008d28 	.word	0x08008d28
 8001f14:	08008e38 	.word	0x08008e38
 8001f18:	08008e42 	.word	0x08008e42
 8001f1c:	3689cac0 	.word	0x3689cac0
 8001f20:	08008e54 	.word	0x08008e54
 8001f24:	08008e65 	.word	0x08008e65
 8001f28:	08008e77 	.word	0x08008e77
 8001f2c:	08008e89 	.word	0x08008e89
 8001f30:	08008e5a 	.word	0x08008e5a

08001f34 <OnRxError>:
  APP_LOG(TS_ON, VLEVEL_L, "OnRxError\n\r");
 8001f34:	2201      	movs	r2, #1
{
 8001f36:	b510      	push	{r4, lr}
  APP_LOG(TS_ON, VLEVEL_L, "OnRxError\n\r");
 8001f38:	2100      	movs	r1, #0
 8001f3a:	0010      	movs	r0, r2
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <OnRxError+0x24>)
 8001f3e:	f005 f983 	bl	8007248 <UTIL_ADV_TRACE_COND_FSend>
  Radio.Sleep();
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <OnRxError+0x28>)
 8001f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f46:	4798      	blx	r3
  State = RX_ERROR;
 8001f48:	2203      	movs	r2, #3
 8001f4a:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <OnRxError+0x2c>)
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	2001      	movs	r0, #1
  State = RX_ERROR;
 8001f50:	761a      	strb	r2, [r3, #24]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8001f52:	f005 fa9f 	bl	8007494 <UTIL_SEQ_SetTask>
}
 8001f56:	bd10      	pop	{r4, pc}
 8001f58:	08008e93 	.word	0x08008e93
 8001f5c:	08008d28 	.word	0x08008d28
 8001f60:	200000b0 	.word	0x200000b0

08001f64 <OnRxTimeout>:
  APP_LOG(TS_ON, VLEVEL_L,  "OnRxTimeout\n\r");
 8001f64:	2201      	movs	r2, #1
{
 8001f66:	b510      	push	{r4, lr}
  APP_LOG(TS_ON, VLEVEL_L,  "OnRxTimeout\n\r");
 8001f68:	2100      	movs	r1, #0
 8001f6a:	0010      	movs	r0, r2
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <OnRxTimeout+0x24>)
 8001f6e:	f005 f96b 	bl	8007248 <UTIL_ADV_TRACE_COND_FSend>
  Radio.Sleep();
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <OnRxTimeout+0x28>)
 8001f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f76:	4798      	blx	r3
  State = RX_TIMEOUT;
 8001f78:	2202      	movs	r2, #2
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <OnRxTimeout+0x2c>)
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2001      	movs	r0, #1
  State = RX_TIMEOUT;
 8001f80:	761a      	strb	r2, [r3, #24]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8001f82:	f005 fa87 	bl	8007494 <UTIL_SEQ_SetTask>
}
 8001f86:	bd10      	pop	{r4, pc}
 8001f88:	08008e9f 	.word	0x08008e9f
 8001f8c:	08008d28 	.word	0x08008d28
 8001f90:	200000b0 	.word	0x200000b0

08001f94 <OnTxTimeout>:
  APP_LOG(TS_ON, VLEVEL_L,  "OnTxTimeout\n\r");
 8001f94:	2201      	movs	r2, #1
{
 8001f96:	b510      	push	{r4, lr}
  APP_LOG(TS_ON, VLEVEL_L,  "OnTxTimeout\n\r");
 8001f98:	2100      	movs	r1, #0
 8001f9a:	0010      	movs	r0, r2
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <OnTxTimeout+0x24>)
 8001f9e:	f005 f953 	bl	8007248 <UTIL_ADV_TRACE_COND_FSend>
  Radio.Sleep();
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <OnTxTimeout+0x28>)
 8001fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa6:	4798      	blx	r3
  State = TX_TIMEOUT;
 8001fa8:	2205      	movs	r2, #5
 8001faa:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <OnTxTimeout+0x2c>)
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8001fac:	2100      	movs	r1, #0
 8001fae:	2001      	movs	r0, #1
  State = TX_TIMEOUT;
 8001fb0:	761a      	strb	r2, [r3, #24]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8001fb2:	f005 fa6f 	bl	8007494 <UTIL_SEQ_SetTask>
}
 8001fb6:	bd10      	pop	{r4, pc}
 8001fb8:	08008ead 	.word	0x08008ead
 8001fbc:	08008d28 	.word	0x08008d28
 8001fc0:	200000b0 	.word	0x200000b0

08001fc4 <OnTxDone>:
  APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");
 8001fc4:	2201      	movs	r2, #1
{
 8001fc6:	b510      	push	{r4, lr}
  APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");
 8001fc8:	2100      	movs	r1, #0
 8001fca:	0010      	movs	r0, r2
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <OnTxDone+0x24>)
 8001fce:	f005 f93b 	bl	8007248 <UTIL_ADV_TRACE_COND_FSend>
  Radio.Sleep();
 8001fd2:	4b06      	ldr	r3, [pc, #24]	; (8001fec <OnTxDone+0x28>)
 8001fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd6:	4798      	blx	r3
  State = TX;
 8001fd8:	2204      	movs	r2, #4
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <OnTxDone+0x2c>)
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8001fdc:	2100      	movs	r1, #0
 8001fde:	2001      	movs	r0, #1
  State = TX;
 8001fe0:	761a      	strb	r2, [r3, #24]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8001fe2:	f005 fa57 	bl	8007494 <UTIL_SEQ_SetTask>
}
 8001fe6:	bd10      	pop	{r4, pc}
 8001fe8:	08008ebb 	.word	0x08008ebb
 8001fec:	08008d28 	.word	0x08008d28
 8001ff0:	200000b0 	.word	0x200000b0

08001ff4 <OnRxDone>:
{
 8001ff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ff6:	0015      	movs	r5, r2
  APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
 8001ff8:	2201      	movs	r2, #1
{
 8001ffa:	000e      	movs	r6, r1
 8001ffc:	0007      	movs	r7, r0
 8001ffe:	001c      	movs	r4, r3
  APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
 8002000:	2100      	movs	r1, #0
 8002002:	0010      	movs	r0, r2
 8002004:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <OnRxDone+0x4c>)
 8002006:	f005 f91f 	bl	8007248 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_L,  "RssiValue=%d dBm, SnrValue=%d\n\r", rssi, snr);
 800200a:	2201      	movs	r2, #1
 800200c:	2100      	movs	r1, #0
 800200e:	0010      	movs	r0, r2
 8002010:	9500      	str	r5, [sp, #0]
 8002012:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <OnRxDone+0x50>)
 8002014:	9401      	str	r4, [sp, #4]
 8002016:	f005 f917 	bl	8007248 <UTIL_ADV_TRACE_COND_FSend>
  Radio.Sleep();
 800201a:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <OnRxDone+0x54>)
 800201c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201e:	4798      	blx	r3
  BufferSize = size;
 8002020:	4b0a      	ldr	r3, [pc, #40]	; (800204c <OnRxDone+0x58>)
  memcpy(Buffer, payload, BufferSize);
 8002022:	0032      	movs	r2, r6
 8002024:	0039      	movs	r1, r7
 8002026:	480a      	ldr	r0, [pc, #40]	; (8002050 <OnRxDone+0x5c>)
  BufferSize = size;
 8002028:	801e      	strh	r6, [r3, #0]
  memcpy(Buffer, payload, BufferSize);
 800202a:	f005 fdbf 	bl	8007bac <memcpy>
  State = RX;
 800202e:	2001      	movs	r0, #1
  RssiValue = rssi;
 8002030:	4b08      	ldr	r3, [pc, #32]	; (8002054 <OnRxDone+0x60>)
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8002032:	2100      	movs	r1, #0
  RssiValue = rssi;
 8002034:	765d      	strb	r5, [r3, #25]
  SnrValue = snr;
 8002036:	769c      	strb	r4, [r3, #26]
  State = RX;
 8002038:	7618      	strb	r0, [r3, #24]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 800203a:	f005 fa2b 	bl	8007494 <UTIL_SEQ_SetTask>
}
 800203e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002040:	08008ec6 	.word	0x08008ec6
 8002044:	08008ed1 	.word	0x08008ed1
 8002048:	08008d28 	.word	0x08008d28
 800204c:	20000000 	.word	0x20000000
 8002050:	2000052c 	.word	0x2000052c
 8002054:	200000b0 	.word	0x200000b0

08002058 <SubghzApp_Init>:
{
 8002058:	b5f0      	push	{r4, r5, r6, r7, lr}
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION= V%X.%X.%X\r\n", (uint8_t)(__APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
 800205a:	2400      	movs	r4, #0
 800205c:	2501      	movs	r5, #1
{
 800205e:	b08b      	sub	sp, #44	; 0x2c
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION= V%X.%X.%X\r\n", (uint8_t)(__APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
 8002060:	0022      	movs	r2, r4
 8002062:	0021      	movs	r1, r4
 8002064:	4b30      	ldr	r3, [pc, #192]	; (8002128 <SubghzApp_Init+0xd0>)
 8002066:	9402      	str	r4, [sp, #8]
 8002068:	9401      	str	r4, [sp, #4]
 800206a:	9500      	str	r5, [sp, #0]
 800206c:	2002      	movs	r0, #2
 800206e:	f005 f8eb 	bl	8007248 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&timerLed, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnledEvent, NULL);
 8002072:	4e2e      	ldr	r6, [pc, #184]	; (800212c <SubghzApp_Init+0xd4>)
 8002074:	0022      	movs	r2, r4
 8002076:	4b2e      	ldr	r3, [pc, #184]	; (8002130 <SubghzApp_Init+0xd8>)
 8002078:	4269      	negs	r1, r5
 800207a:	0030      	movs	r0, r6
 800207c:	9400      	str	r4, [sp, #0]
 800207e:	f005 fae5 	bl	800764c <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&timerLed, LED_PERIOD_MS);
 8002082:	21c8      	movs	r1, #200	; 0xc8
 8002084:	0030      	movs	r0, r6
 8002086:	f005 fbd7 	bl	8007838 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&timerLed);
 800208a:	0030      	movs	r0, r6
 800208c:	f005 fb92 	bl	80077b4 <UTIL_TIMER_Start>
  Radio.Init(&RadioEvents);
 8002090:	0030      	movs	r0, r6
  RadioEvents.TxDone = OnTxDone;
 8002092:	4b28      	ldr	r3, [pc, #160]	; (8002134 <SubghzApp_Init+0xdc>)
  Radio.Init(&RadioEvents);
 8002094:	301c      	adds	r0, #28
  RadioEvents.TxDone = OnTxDone;
 8002096:	61f3      	str	r3, [r6, #28]
  RadioEvents.RxDone = OnRxDone;
 8002098:	4b27      	ldr	r3, [pc, #156]	; (8002138 <SubghzApp_Init+0xe0>)
 800209a:	6273      	str	r3, [r6, #36]	; 0x24
  RadioEvents.TxTimeout = OnTxTimeout;
 800209c:	4b27      	ldr	r3, [pc, #156]	; (800213c <SubghzApp_Init+0xe4>)
 800209e:	6233      	str	r3, [r6, #32]
  RadioEvents.RxTimeout = OnRxTimeout;
 80020a0:	4b27      	ldr	r3, [pc, #156]	; (8002140 <SubghzApp_Init+0xe8>)
 80020a2:	62b3      	str	r3, [r6, #40]	; 0x28
  RadioEvents.RxError = OnRxError;
 80020a4:	4b27      	ldr	r3, [pc, #156]	; (8002144 <SubghzApp_Init+0xec>)
 80020a6:	62f3      	str	r3, [r6, #44]	; 0x2c
  Radio.Init(&RadioEvents);
 80020a8:	4e27      	ldr	r6, [pc, #156]	; (8002148 <SubghzApp_Init+0xf0>)
 80020aa:	6833      	ldr	r3, [r6, #0]
 80020ac:	4798      	blx	r3
  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 80020ae:	4b27      	ldr	r3, [pc, #156]	; (800214c <SubghzApp_Init+0xf4>)
 80020b0:	0022      	movs	r2, r4
 80020b2:	9308      	str	r3, [sp, #32]
 80020b4:	2308      	movs	r3, #8
 80020b6:	9302      	str	r3, [sp, #8]
 80020b8:	3b01      	subs	r3, #1
 80020ba:	0028      	movs	r0, r5
 80020bc:	69f7      	ldr	r7, [r6, #28]
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	210e      	movs	r1, #14
 80020c2:	0023      	movs	r3, r4
 80020c4:	9407      	str	r4, [sp, #28]
 80020c6:	9406      	str	r4, [sp, #24]
 80020c8:	9405      	str	r4, [sp, #20]
 80020ca:	9504      	str	r5, [sp, #16]
 80020cc:	9403      	str	r4, [sp, #12]
 80020ce:	9501      	str	r5, [sp, #4]
 80020d0:	47b8      	blx	r7
  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 80020d2:	2305      	movs	r3, #5
 80020d4:	9302      	str	r3, [sp, #8]
 80020d6:	3303      	adds	r3, #3
 80020d8:	2207      	movs	r2, #7
 80020da:	0021      	movs	r1, r4
 80020dc:	0028      	movs	r0, r5
 80020de:	9301      	str	r3, [sp, #4]
 80020e0:	69b7      	ldr	r7, [r6, #24]
 80020e2:	002b      	movs	r3, r5
 80020e4:	9509      	str	r5, [sp, #36]	; 0x24
 80020e6:	9408      	str	r4, [sp, #32]
 80020e8:	9407      	str	r4, [sp, #28]
 80020ea:	9406      	str	r4, [sp, #24]
 80020ec:	9505      	str	r5, [sp, #20]
 80020ee:	9404      	str	r4, [sp, #16]
 80020f0:	9403      	str	r4, [sp, #12]
 80020f2:	9400      	str	r4, [sp, #0]
 80020f4:	47b8      	blx	r7
  Radio.SetMaxPayloadLength(MODEM_LORA, BUFFER_SIZE);
 80020f6:	2140      	movs	r1, #64	; 0x40
 80020f8:	0028      	movs	r0, r5
 80020fa:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80020fc:	4798      	blx	r3
  Radio.SetChannel(RF_FREQUENCY);
 80020fe:	68f3      	ldr	r3, [r6, #12]
 8002100:	4813      	ldr	r0, [pc, #76]	; (8002150 <SubghzApp_Init+0xf8>)
 8002102:	4798      	blx	r3
  LED_Init(LED_GREEN);
 8002104:	0020      	movs	r0, r4
 8002106:	f000 ff95 	bl	8003034 <BSP_LED_Init>
  LED_Init(LED_RED1);
 800210a:	0028      	movs	r0, r5
 800210c:	f000 ff92 	bl	8003034 <BSP_LED_Init>
  Radio.Rx(RX_TIMEOUT_VALUE);
 8002110:	20fa      	movs	r0, #250	; 0xfa
 8002112:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8002114:	00c0      	lsls	r0, r0, #3
 8002116:	4798      	blx	r3
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_PingPong_Process), UTIL_SEQ_RFU, PingPong_Process);
 8002118:	0021      	movs	r1, r4
 800211a:	0028      	movs	r0, r5
 800211c:	4a0d      	ldr	r2, [pc, #52]	; (8002154 <SubghzApp_Init+0xfc>)
 800211e:	f005 fa4d 	bl	80075bc <UTIL_SEQ_RegTask>
}
 8002122:	b00b      	add	sp, #44	; 0x2c
 8002124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	08008ef1 	.word	0x08008ef1
 800212c:	200000b0 	.word	0x200000b0
 8002130:	08001cd1 	.word	0x08001cd1
 8002134:	08001fc5 	.word	0x08001fc5
 8002138:	08001ff5 	.word	0x08001ff5
 800213c:	08001f95 	.word	0x08001f95
 8002140:	08001f65 	.word	0x08001f65
 8002144:	08001f35 	.word	0x08001f35
 8002148:	08008d28 	.word	0x08008d28
 800214c:	00000bb8 	.word	0x00000bb8
 8002150:	3689cac0 	.word	0x3689cac0
 8002154:	08001ced 	.word	0x08001ced

08002158 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002158:	b510      	push	{r4, lr}
 800215a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800215c:	2220      	movs	r2, #32
 800215e:	2100      	movs	r1, #0
 8002160:	a808      	add	r0, sp, #32
 8002162:	f005 fd2c 	bl	8007bbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002166:	2214      	movs	r2, #20
 8002168:	2100      	movs	r1, #0
 800216a:	a801      	add	r0, sp, #4
 800216c:	f005 fd27 	bl	8007bbe <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
 8002170:	2300      	movs	r3, #0
 8002172:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 8002174:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	031b      	lsls	r3, r3, #12
 800217a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 800217c:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 800217e:	2202      	movs	r2, #2
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8002180:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002182:	2410      	movs	r4, #16
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8002184:	041b      	lsls	r3, r3, #16

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002186:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8002188:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800218a:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800218c:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 800218e:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8002190:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002192:	f001 fe71 	bl	8003e78 <HAL_RCC_OscConfig>
 8002196:	2800      	cmp	r0, #0
 8002198:	d000      	beq.n	800219c <SystemClock_Config+0x44>
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 800219a:	e7fe      	b.n	800219a <SystemClock_Config+0x42>
  __HAL_RCC_PWR_CLK_ENABLE();
 800219c:	2380      	movs	r3, #128	; 0x80
 800219e:	4a11      	ldr	r2, [pc, #68]	; (80021e4 <SystemClock_Config+0x8c>)
 80021a0:	055b      	lsls	r3, r3, #21
 80021a2:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80021a4:	430b      	orrs	r3, r1
 80021a6:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021a8:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <SystemClock_Config+0x90>)
 80021aa:	4910      	ldr	r1, [pc, #64]	; (80021ec <SystemClock_Config+0x94>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	4011      	ands	r1, r2
 80021b0:	2280      	movs	r2, #128	; 0x80
 80021b2:	0112      	lsls	r2, r2, #4
 80021b4:	430a      	orrs	r2, r1
 80021b6:	601a      	str	r2, [r3, #0]
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 80021b8:	6859      	ldr	r1, [r3, #4]
 80021ba:	000a      	movs	r2, r1
 80021bc:	4022      	ands	r2, r4
 80021be:	4221      	tst	r1, r4
 80021c0:	d1fa      	bne.n	80021b8 <SystemClock_Config+0x60>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80021c2:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021c4:	2101      	movs	r1, #1
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80021c6:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021c8:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ca:	3b0c      	subs	r3, #12
 80021cc:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021ce:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021d0:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021d2:	9205      	str	r2, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021d4:	f002 f8dc 	bl	8004390 <HAL_RCC_ClockConfig>
 80021d8:	2800      	cmp	r0, #0
 80021da:	d000      	beq.n	80021de <SystemClock_Config+0x86>
  while (1)
 80021dc:	e7fe      	b.n	80021dc <SystemClock_Config+0x84>
}
 80021de:	b014      	add	sp, #80	; 0x50
 80021e0:	bd10      	pop	{r4, pc}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	40021000 	.word	0x40021000
 80021e8:	40007000 	.word	0x40007000
 80021ec:	ffffe7ff 	.word	0xffffe7ff

080021f0 <main>:
{
 80021f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f2:	2602      	movs	r6, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f4:	2701      	movs	r7, #1
{
 80021f6:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 80021f8:	f001 f924 	bl	8003444 <HAL_Init>
  SystemClock_Config();
 80021fc:	f7ff ffac 	bl	8002158 <SystemClock_Config>
  MX_SubGHz_Phy_Init();
 8002200:	f7ff fd52 	bl	8001ca8 <MX_SubGHz_Phy_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	2214      	movs	r2, #20
 8002206:	2100      	movs	r1, #0
 8002208:	a803      	add	r0, sp, #12
 800220a:	f005 fcd8 	bl	8007bbe <memset>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800220e:	2180      	movs	r1, #128	; 0x80
 8002210:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002212:	4b3c      	ldr	r3, [pc, #240]	; (8002304 <main+0x114>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002214:	0089      	lsls	r1, r1, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002218:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800221a:	4332      	orrs	r2, r6
 800221c:	62da      	str	r2, [r3, #44]	; 0x2c
 800221e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002222:	4032      	ands	r2, r6
 8002224:	9201      	str	r2, [sp, #4]
 8002226:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800222a:	433a      	orrs	r2, r7
 800222c:	62da      	str	r2, [r3, #44]	; 0x2c
 800222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002230:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002232:	403b      	ands	r3, r7
 8002234:	9302      	str	r3, [sp, #8]
 8002236:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002238:	f001 fc14 	bl	8003a64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800223c:	2180      	movs	r1, #128	; 0x80
 800223e:	20a0      	movs	r0, #160	; 0xa0
 8002240:	2200      	movs	r2, #0
 8002242:	00c9      	lsls	r1, r1, #3
 8002244:	05c0      	lsls	r0, r0, #23
 8002246:	f001 fc0d 	bl	8003a64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800224a:	2180      	movs	r1, #128	; 0x80
 800224c:	20a0      	movs	r0, #160	; 0xa0
 800224e:	2200      	movs	r2, #0
 8002250:	0109      	lsls	r1, r1, #4
 8002252:	05c0      	lsls	r0, r0, #23
 8002254:	f001 fc06 	bl	8003a64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002258:	2180      	movs	r1, #128	; 0x80
 800225a:	20a0      	movs	r0, #160	; 0xa0
 800225c:	2200      	movs	r2, #0
 800225e:	0149      	lsls	r1, r1, #5
 8002260:	05c0      	lsls	r0, r0, #23
 8002262:	f001 fbff 	bl	8003a64 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002266:	23f0      	movs	r3, #240	; 0xf0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002268:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800226a:	015b      	lsls	r3, r3, #5
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226c:	a903      	add	r1, sp, #12
 800226e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002270:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002272:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002276:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002278:	f001 faae 	bl	80037d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 800227c:	23e2      	movs	r3, #226	; 0xe2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227e:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8002280:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002282:	4b21      	ldr	r3, [pc, #132]	; (8002308 <main+0x118>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002284:	a903      	add	r1, sp, #12
 8002286:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002288:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800228a:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228c:	f001 faa4 	bl	80037d8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002290:	0022      	movs	r2, r4
 8002292:	0021      	movs	r1, r4
 8002294:	2005      	movs	r0, #5
 8002296:	f001 f8f5 	bl	8003484 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800229a:	2005      	movs	r0, #5
 800229c:	f001 f91c 	bl	80034d8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80022a0:	0022      	movs	r2, r4
 80022a2:	0021      	movs	r1, r4
 80022a4:	2007      	movs	r0, #7
 80022a6:	f001 f8ed 	bl	8003484 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80022aa:	2007      	movs	r0, #7
 80022ac:	f001 f914 	bl	80034d8 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 80022b0:	4d16      	ldr	r5, [pc, #88]	; (800230c <main+0x11c>)
 80022b2:	4b17      	ldr	r3, [pc, #92]	; (8002310 <main+0x120>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022b4:	0028      	movs	r0, r5
  hi2c1.Instance = I2C1;
 80022b6:	602b      	str	r3, [r5, #0]
  hi2c1.Init.Timing = 0x00000708;
 80022b8:	23e1      	movs	r3, #225	; 0xe1
 80022ba:	00db      	lsls	r3, r3, #3
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022bc:	60ef      	str	r7, [r5, #12]
  hi2c1.Init.Timing = 0x00000708;
 80022be:	606b      	str	r3, [r5, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80022c0:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022c2:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80022c4:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80022c6:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022c8:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022ca:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022cc:	f001 fc02 	bl	8003ad4 <HAL_I2C_Init>
    for(i=1; i<128; i++)
 80022d0:	37ff      	adds	r7, #255	; 0xff
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022d2:	42a0      	cmp	r0, r4
 80022d4:	d000      	beq.n	80022d8 <main+0xe8>
  while (1)
 80022d6:	e7fe      	b.n	80022d6 <main+0xe6>
    MX_SubGHz_Phy_Process();
 80022d8:	f7ff fcec 	bl	8001cb4 <MX_SubGHz_Phy_Process>
 80022dc:	0034      	movs	r4, r6
    	ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 80022de:	2305      	movs	r3, #5
 80022e0:	2203      	movs	r2, #3
 80022e2:	0021      	movs	r1, r4
 80022e4:	0028      	movs	r0, r5
 80022e6:	f001 fc4b 	bl	8003b80 <HAL_I2C_IsDeviceReady>
    	if (ret != HAL_OK) /* No ACK Received At That Address */
 80022ea:	2800      	cmp	r0, #0
 80022ec:	d007      	beq.n	80022fe <main+0x10e>
    		printf("I2C device not found");
 80022ee:	4809      	ldr	r0, [pc, #36]	; (8002314 <main+0x124>)
 80022f0:	3402      	adds	r4, #2
 80022f2:	b2a4      	uxth	r4, r4
    		printf("I2C device found");
 80022f4:	f005 fc6c 	bl	8007bd0 <iprintf>
    for(i=1; i<128; i++)
 80022f8:	42bc      	cmp	r4, r7
 80022fa:	d1f0      	bne.n	80022de <main+0xee>
 80022fc:	e7ec      	b.n	80022d8 <main+0xe8>
    		printf("I2C device found");
 80022fe:	4806      	ldr	r0, [pc, #24]	; (8002318 <main+0x128>)
 8002300:	e7f6      	b.n	80022f0 <main+0x100>
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	40021000 	.word	0x40021000
 8002308:	10110000 	.word	0x10110000
 800230c:	2000056c 	.word	0x2000056c
 8002310:	40005400 	.word	0x40005400
 8002314:	08008f0a 	.word	0x08008f0a
 8002318:	08008f1f 	.word	0x08008f1f

0800231c <Error_Handler>:
  while (1)
 800231c:	e7fe      	b.n	800231c <Error_Handler>
	...

08002320 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002320:	b530      	push	{r4, r5, lr}
  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 8002322:	2400      	movs	r4, #0
{
 8002324:	b091      	sub	sp, #68	; 0x44
  RTC_TimeTypeDef sTime = {0};
 8002326:	2214      	movs	r2, #20
 8002328:	2100      	movs	r1, #0
 800232a:	a801      	add	r0, sp, #4
 800232c:	f005 fc47 	bl	8007bbe <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 8002330:	2228      	movs	r2, #40	; 0x28
 8002332:	0021      	movs	r1, r4
 8002334:	a806      	add	r0, sp, #24
  RTC_DateTypeDef sDate = {0};
 8002336:	9400      	str	r4, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002338:	f005 fc41 	bl	8007bbe <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800233c:	4d24      	ldr	r5, [pc, #144]	; (80023d0 <MX_RTC_Init+0xb0>)
 800233e:	4b25      	ldr	r3, [pc, #148]	; (80023d4 <MX_RTC_Init+0xb4>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002340:	0028      	movs	r0, r5
  hrtc.Instance = RTC;
 8002342:	602b      	str	r3, [r5, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8002344:	231f      	movs	r3, #31
 8002346:	60ab      	str	r3, [r5, #8]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8002348:	4b23      	ldr	r3, [pc, #140]	; (80023d8 <MX_RTC_Init+0xb8>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800234a:	606c      	str	r4, [r5, #4]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 800234c:	60eb      	str	r3, [r5, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800234e:	612c      	str	r4, [r5, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002350:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002352:	61ac      	str	r4, [r5, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002354:	61ec      	str	r4, [r5, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002356:	f002 faaf 	bl	80048b8 <HAL_RTC_Init>
 800235a:	42a0      	cmp	r0, r4
 800235c:	d001      	beq.n	8002362 <MX_RTC_Init+0x42>
  {
    Error_Handler();
 800235e:	f7ff ffdd 	bl	800231c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8002362:	466b      	mov	r3, sp
  sTime.Minutes = 0;
  sTime.Seconds = 0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002364:	2200      	movs	r2, #0
 8002366:	0028      	movs	r0, r5
  sTime.Hours = 0;
 8002368:	809c      	strh	r4, [r3, #4]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800236a:	a901      	add	r1, sp, #4
  sTime.Seconds = 0;
 800236c:	719c      	strb	r4, [r3, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800236e:	9404      	str	r4, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002370:	9405      	str	r4, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002372:	f002 fb09 	bl	8004988 <HAL_RTC_SetTime>
 8002376:	2800      	cmp	r0, #0
 8002378:	d001      	beq.n	800237e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800237a:	f7ff ffcf 	bl	800231c <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800237e:	4b17      	ldr	r3, [pc, #92]	; (80023dc <MX_RTC_Init+0xbc>)
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 1;
  sDate.Year = 0;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002380:	2200      	movs	r2, #0
 8002382:	4669      	mov	r1, sp
 8002384:	0028      	movs	r0, r5
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002386:	9300      	str	r3, [sp, #0]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002388:	f002 fb84 	bl	8004a94 <HAL_RTC_SetDate>
 800238c:	2800      	cmp	r0, #0
 800238e:	d001      	beq.n	8002394 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002390:	f7ff ffc4 	bl	800231c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8002394:	2200      	movs	r2, #0
 8002396:	466b      	mov	r3, sp
 8002398:	831a      	strh	r2, [r3, #24]
  sAlarm.AlarmTime.Minutes = 0;
  sAlarm.AlarmTime.Seconds = 0;
 800239a:	769a      	strb	r2, [r3, #26]
  sAlarm.AlarmTime.SubSeconds = 0;
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 800239c:	23a0      	movs	r3, #160	; 0xa0
 800239e:	051b      	lsls	r3, r3, #20
 80023a0:	930c      	str	r3, [sp, #48]	; 0x30
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
  sAlarm.AlarmDateWeekDay = 30;
 80023a2:	2319      	movs	r3, #25
 80023a4:	211e      	movs	r1, #30
 80023a6:	446b      	add	r3, sp
 80023a8:	77d9      	strb	r1, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 80023aa:	2380      	movs	r3, #128	; 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80023ac:	0028      	movs	r0, r5
  sAlarm.Alarm = RTC_ALARM_A;
 80023ae:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80023b0:	a906      	add	r1, sp, #24
  sAlarm.AlarmTime.SubSeconds = 0;
 80023b2:	9207      	str	r2, [sp, #28]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80023b4:	9209      	str	r2, [sp, #36]	; 0x24
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80023b6:	920a      	str	r2, [sp, #40]	; 0x28
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80023b8:	920b      	str	r2, [sp, #44]	; 0x2c
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80023ba:	920d      	str	r2, [sp, #52]	; 0x34
  sAlarm.Alarm = RTC_ALARM_A;
 80023bc:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80023be:	f002 fbd5 	bl	8004b6c <HAL_RTC_SetAlarm_IT>
 80023c2:	2800      	cmp	r0, #0
 80023c4:	d001      	beq.n	80023ca <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 80023c6:	f7ff ffa9 	bl	800231c <Error_Handler>
  }

}
 80023ca:	b011      	add	sp, #68	; 0x44
 80023cc:	bd30      	pop	{r4, r5, pc}
 80023ce:	46c0      	nop			; (mov r8, r8)
 80023d0:	200005b8 	.word	0x200005b8
 80023d4:	40002800 	.word	0x40002800
 80023d8:	000003ff 	.word	0x000003ff
 80023dc:	00010101 	.word	0x00010101

080023e0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 80023e0:	b510      	push	{r4, lr}
 80023e2:	0004      	movs	r4, r0
 80023e4:	b08e      	sub	sp, #56	; 0x38

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023e6:	2238      	movs	r2, #56	; 0x38
 80023e8:	2100      	movs	r1, #0
 80023ea:	4668      	mov	r0, sp
 80023ec:	f005 fbe7 	bl	8007bbe <memset>
  if (rtcHandle->Instance == RTC)
 80023f0:	4b11      	ldr	r3, [pc, #68]	; (8002438 <HAL_RTC_MspInit+0x58>)
 80023f2:	6822      	ldr	r2, [r4, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d11c      	bne.n	8002432 <HAL_RTC_MspInit+0x52>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 80023f8:	2304      	movs	r3, #4
 80023fa:	9300      	str	r3, [sp, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80023fc:	33fc      	adds	r3, #252	; 0xfc
 80023fe:	9302      	str	r3, [sp, #8]
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
 8002400:	2300      	movs	r3, #0
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002402:	4668      	mov	r0, sp
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
 8002404:	9305      	str	r3, [sp, #20]
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 8002406:	9301      	str	r3, [sp, #4]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002408:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800240a:	f001 fd35 	bl	8003e78 <HAL_RCC_OscConfig>
 800240e:	2800      	cmp	r0, #0
 8002410:	d001      	beq.n	8002416 <HAL_RTC_MspInit+0x36>
    {
      Error_Handler();
 8002412:	f7ff ff83 	bl	800231c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002416:	2380      	movs	r3, #128	; 0x80
 8002418:	4a08      	ldr	r2, [pc, #32]	; (800243c <HAL_RTC_MspInit+0x5c>)
 800241a:	02db      	lsls	r3, r3, #11
 800241c:	6d11      	ldr	r1, [r2, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800241e:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 8002420:	430b      	orrs	r3, r1
 8002422:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8002424:	2200      	movs	r2, #0
 8002426:	0011      	movs	r1, r2
 8002428:	f001 f82c 	bl	8003484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800242c:	2002      	movs	r0, #2
 800242e:	f001 f853 	bl	80034d8 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 8002432:	b00e      	add	sp, #56	; 0x38
 8002434:	bd10      	pop	{r4, pc}
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	40002800 	.word	0x40002800
 800243c:	40021000 	.word	0x40021000

08002440 <RTC_IF_GetTimerContext>:

uint32_t RTC_IF_GetTimerContext(void)
{
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8002440:	4b01      	ldr	r3, [pc, #4]	; (8002448 <RTC_IF_GetTimerContext+0x8>)
 8002442:	6818      	ldr	r0, [r3, #0]
}
 8002444:	4770      	bx	lr
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	200000e8 	.word	0x200000e8

0800244c <RTC_IF_GetMinimumTimeout>:
}

uint32_t RTC_IF_GetMinimumTimeout(void)
{
  return (MIN_ALARM_DELAY);
}
 800244c:	2003      	movs	r0, #3
 800244e:	4770      	bx	lr

08002450 <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002450:	b510      	push	{r4, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8002452:	0e41      	lsrs	r1, r0, #25
 8002454:	227d      	movs	r2, #125	; 0x7d
 8002456:	2300      	movs	r3, #0
 8002458:	01c0      	lsls	r0, r0, #7
 800245a:	f7fd fffb 	bl	8000454 <__aeabi_uldivmod>
}
 800245e:	bd10      	pop	{r4, pc}

08002460 <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 8002460:	b510      	push	{r4, lr}
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8002462:	227d      	movs	r2, #125	; 0x7d
 8002464:	2300      	movs	r3, #0
 8002466:	2100      	movs	r1, #0
 8002468:	f7fe f814 	bl	8000494 <__aeabi_lmul>
 800246c:	0649      	lsls	r1, r1, #25
 800246e:	09c0      	lsrs	r0, r0, #7
 8002470:	4308      	orrs	r0, r1
}
 8002472:	bd10      	pop	{r4, pc}

08002474 <RTC_IF_StopTimer>:
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002474:	4806      	ldr	r0, [pc, #24]	; (8002490 <RTC_IF_StopTimer+0x1c>)
 8002476:	4b07      	ldr	r3, [pc, #28]	; (8002494 <RTC_IF_StopTimer+0x20>)
 8002478:	6801      	ldr	r1, [r0, #0]
{
 800247a:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800247c:	68ca      	ldr	r2, [r1, #12]
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	4313      	orrs	r3, r2
 8002482:	60cb      	str	r3, [r1, #12]
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002484:	2180      	movs	r1, #128	; 0x80
 8002486:	0049      	lsls	r1, r1, #1
 8002488:	f002 f94e 	bl	8004728 <HAL_RTC_DeactivateAlarm>
}
 800248c:	2000      	movs	r0, #0
 800248e:	bd10      	pop	{r4, pc}
 8002490:	200005b8 	.word	0x200005b8
 8002494:	fffffe7f 	.word	0xfffffe7f

08002498 <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 8002498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t calendarValue = 0;
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 800249a:	4e25      	ldr	r6, [pc, #148]	; (8002530 <RTC_GetCalendarValue+0x98>)
{
 800249c:	0005      	movs	r5, r0
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 800249e:	2200      	movs	r2, #0
 80024a0:	0030      	movs	r0, r6
{
 80024a2:	000c      	movs	r4, r1
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 80024a4:	f002 fc42 	bl	8004d2c <HAL_RTC_GetTime>
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80024a8:	4f22      	ldr	r7, [pc, #136]	; (8002534 <RTC_GetCalendarValue+0x9c>)

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 80024aa:	2200      	movs	r2, #0
 80024ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ae:	0029      	movs	r1, r5
 80024b0:	0030      	movs	r0, r6
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	f002 fc64 	bl	8004d80 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 80024b8:	2200      	movs	r2, #0
 80024ba:	0021      	movs	r1, r4
 80024bc:	0030      	movs	r0, r6
 80024be:	f002 fc35 	bl	8004d2c <HAL_RTC_GetTime>
 80024c2:	466b      	mov	r3, sp
 80024c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024c6:	889b      	ldrh	r3, [r3, #4]
 80024c8:	b292      	uxth	r2, r2

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d1ec      	bne.n	80024a8 <RTC_GetCalendarValue+0x10>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 80024ce:	2103      	movs	r1, #3
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 80024d0:	78ea      	ldrb	r2, [r5, #3]
 80024d2:	4e19      	ldr	r6, [pc, #100]	; (8002538 <RTC_GetCalendarValue+0xa0>)

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80024d4:	786f      	ldrb	r7, [r5, #1]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 80024d6:	4356      	muls	r6, r2
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 80024d8:	400a      	ands	r2, r1
 80024da:	4253      	negs	r3, r2
 80024dc:	4153      	adcs	r3, r2
 80024de:	4a17      	ldr	r2, [pc, #92]	; (800253c <RTC_GetCalendarValue+0xa4>)
 80024e0:	425b      	negs	r3, r3
 80024e2:	4013      	ands	r3, r2
 80024e4:	4a16      	ldr	r2, [pc, #88]	; (8002540 <RTC_GetCalendarValue+0xa8>)
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80024e6:	3f01      	subs	r7, #1
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 80024e8:	189b      	adds	r3, r3, r2
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80024ea:	223d      	movs	r2, #61	; 0x3d
 80024ec:	437a      	muls	r2, r7
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 80024ee:	007f      	lsls	r7, r7, #1
 80024f0:	40fb      	lsrs	r3, r7
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80024f2:	3201      	adds	r2, #1
 80024f4:	0fd0      	lsrs	r0, r2, #31
 80024f6:	1882      	adds	r2, r0, r2

  calendarValue += (RTC_DateStruct->Date - 1);
 80024f8:	78a8      	ldrb	r0, [r5, #2]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 80024fa:	3603      	adds	r6, #3
 80024fc:	3801      	subs	r0, #1
 80024fe:	08b6      	lsrs	r6, r6, #2
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8002500:	1052      	asrs	r2, r2, #1
 8002502:	1986      	adds	r6, r0, r6
 8002504:	1996      	adds	r6, r2, r6

  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;
 8002506:	480f      	ldr	r0, [pc, #60]	; (8002544 <RTC_GetCalendarValue+0xac>)
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8002508:	400b      	ands	r3, r1
  calendarValue += (RTC_DateStruct->Date - 1);
 800250a:	1af3      	subs	r3, r6, r3
  calendarValue *= SECONDS_IN_1DAY;
 800250c:	4343      	muls	r3, r0

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 800250e:	20e1      	movs	r0, #225	; 0xe1
 8002510:	7822      	ldrb	r2, [r4, #0]
 8002512:	0100      	lsls	r0, r0, #4
 8002514:	4350      	muls	r0, r2
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8002516:	223c      	movs	r2, #60	; 0x3c
 8002518:	7861      	ldrb	r1, [r4, #1]
 800251a:	434a      	muls	r2, r1
 800251c:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 800251e:	78a2      	ldrb	r2, [r4, #2]
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8002520:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8002522:	18c0      	adds	r0, r0, r3

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 8002524:	6863      	ldr	r3, [r4, #4]
 8002526:	0280      	lsls	r0, r0, #10
 8002528:	1ac0      	subs	r0, r0, r3
 800252a:	4b07      	ldr	r3, [pc, #28]	; (8002548 <RTC_GetCalendarValue+0xb0>)
 800252c:	18c0      	adds	r0, r0, r3

  return (calendarValue);
}
 800252e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002530:	200005b8 	.word	0x200005b8
 8002534:	40002800 	.word	0x40002800
 8002538:	000005b5 	.word	0x000005b5
 800253c:	ffaaaab0 	.word	0xffaaaab0
 8002540:	0099aaa0 	.word	0x0099aaa0
 8002544:	00015180 	.word	0x00015180
 8002548:	000003ff 	.word	0x000003ff

0800254c <RTC_IF_SetTimerContext>:
{
 800254c:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 800254e:	4c04      	ldr	r4, [pc, #16]	; (8002560 <RTC_IF_SetTimerContext+0x14>)
 8002550:	0020      	movs	r0, r4
 8002552:	1d21      	adds	r1, r4, #4
 8002554:	3018      	adds	r0, #24
 8002556:	f7ff ff9f 	bl	8002498 <RTC_GetCalendarValue>
 800255a:	6020      	str	r0, [r4, #0]
}
 800255c:	bd10      	pop	{r4, pc}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	200000e8 	.word	0x200000e8

08002564 <RTC_IF_GetTimerElapsedTime>:
{
 8002564:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8002566:	4668      	mov	r0, sp
 8002568:	a901      	add	r1, sp, #4
 800256a:	f7ff ff95 	bl	8002498 <RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 800256e:	4b02      	ldr	r3, [pc, #8]	; (8002578 <RTC_IF_GetTimerElapsedTime+0x14>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	1ac0      	subs	r0, r0, r3
}
 8002574:	b007      	add	sp, #28
 8002576:	bd00      	pop	{pc}
 8002578:	200000e8 	.word	0x200000e8

0800257c <RTC_IF_StartTimer>:
{
 800257c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800257e:	b087      	sub	sp, #28
 8002580:	0006      	movs	r6, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8002582:	f7ff ffef 	bl	8002564 <RTC_IF_GetTimerElapsedTime>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 8002586:	2100      	movs	r1, #0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8002588:	1a30      	subs	r0, r6, r0
 800258a:	2803      	cmp	r0, #3
 800258c:	d800      	bhi.n	8002590 <RTC_IF_StartTimer+0x14>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 800258e:	2101      	movs	r1, #1
 8002590:	2002      	movs	r0, #2
 8002592:	f004 ff11 	bl	80073b8 <UTIL_LPM_SetStopMode>
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 8002596:	f004 ff3b 	bl	8007410 <UTIL_LPM_GetMode>
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 800259a:	4c41      	ldr	r4, [pc, #260]	; (80026a0 <RTC_IF_StartTimer+0x124>)
 800259c:	7963      	ldrb	r3, [r4, #5]
 800259e:	68a7      	ldr	r7, [r4, #8]
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	79a3      	ldrb	r3, [r4, #6]
 80025a4:	7925      	ldrb	r5, [r4, #4]
 80025a6:	9301      	str	r3, [sp, #4]
 80025a8:	79e3      	ldrb	r3, [r4, #7]
 80025aa:	9302      	str	r3, [sp, #8]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 80025ac:	7e63      	ldrb	r3, [r4, #25]
 80025ae:	9303      	str	r3, [sp, #12]
 80025b0:	7ea3      	ldrb	r3, [r4, #26]
 80025b2:	9304      	str	r3, [sp, #16]
 80025b4:	7ee3      	ldrb	r3, [r4, #27]
 80025b6:	9305      	str	r3, [sp, #20]
  RTC_IF_StopTimer();
 80025b8:	f7ff ff5c 	bl	8002474 <RTC_IF_StopTimer>
  rtcAlarmDays =  RTC_DateStruct.Date;
 80025bc:	4669      	mov	r1, sp
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 80025be:	4a39      	ldr	r2, [pc, #228]	; (80026a4 <RTC_IF_StartTimer+0x128>)
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 80025c0:	05b3      	lsls	r3, r6, #22
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 80025c2:	1bd7      	subs	r7, r2, r7
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 80025c4:	0d9b      	lsrs	r3, r3, #22
  rtcAlarmDays =  RTC_DateStruct.Date;
 80025c6:	8a08      	ldrh	r0, [r1, #16]
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	9204      	str	r2, [sp, #16]
  while (timeoutValue >= SECONDS_IN_1DAY)
 80025cc:	4a36      	ldr	r2, [pc, #216]	; (80026a8 <RTC_IF_StartTimer+0x12c>)
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 80025ce:	b29b      	uxth	r3, r3
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 80025d0:	0ab6      	lsrs	r6, r6, #10
  while (timeoutValue >= SECONDS_IN_1DAY)
 80025d2:	4296      	cmp	r6, r2
 80025d4:	d843      	bhi.n	800265e <RTC_IF_StartTimer+0xe2>
  while (timeoutValue >= SECONDS_IN_1HOUR)
 80025d6:	22e1      	movs	r2, #225	; 0xe1
  rtcAlarmHours = RTC_TimeStruct.Hours;
 80025d8:	b2ad      	uxth	r5, r5
  while (timeoutValue >= SECONDS_IN_1HOUR)
 80025da:	0112      	lsls	r2, r2, #4
 80025dc:	4296      	cmp	r6, r2
 80025de:	d243      	bcs.n	8002668 <RTC_IF_StartTimer+0xec>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 80025e0:	466a      	mov	r2, sp
 80025e2:	8817      	ldrh	r7, [r2, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 80025e4:	2e3b      	cmp	r6, #59	; 0x3b
 80025e6:	d844      	bhi.n	8002672 <RTC_IF_StartTimer+0xf6>
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 80025e8:	0a9a      	lsrs	r2, r3, #10
 80025ea:	0291      	lsls	r1, r2, #10
 80025ec:	1a5b      	subs	r3, r3, r1
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	9b01      	ldr	r3, [sp, #4]
 80025f4:	18d2      	adds	r2, r2, r3
 80025f6:	1996      	adds	r6, r2, r6
 80025f8:	b2b6      	uxth	r6, r6
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 80025fa:	2e3b      	cmp	r6, #59	; 0x3b
 80025fc:	d83d      	bhi.n	800267a <RTC_IF_StartTimer+0xfe>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 80025fe:	2f3b      	cmp	r7, #59	; 0x3b
 8002600:	d840      	bhi.n	8002684 <RTC_IF_StartTimer+0x108>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8002602:	2d17      	cmp	r5, #23
 8002604:	d843      	bhi.n	800268e <RTC_IF_StartTimer+0x112>
  if (RTC_DateStruct.Year % 4 == 0)
 8002606:	9a03      	ldr	r2, [sp, #12]
 8002608:	9905      	ldr	r1, [sp, #20]
 800260a:	4b28      	ldr	r3, [pc, #160]	; (80026ac <RTC_IF_StartTimer+0x130>)
 800260c:	3a01      	subs	r2, #1
 800260e:	0789      	lsls	r1, r1, #30
 8002610:	d142      	bne.n	8002698 <RTC_IF_StartTimer+0x11c>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8002612:	5c99      	ldrb	r1, [r3, r2]
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8002614:	4288      	cmp	r0, r1
 8002616:	d902      	bls.n	800261e <RTC_IF_StartTimer+0xa2>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8002618:	f7fd ff16 	bl	8000448 <__aeabi_idivmod>
 800261c:	b288      	uxth	r0, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 800261e:	9a00      	ldr	r2, [sp, #0]
 8002620:	9b04      	ldr	r3, [sp, #16]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 8002622:	7725      	strb	r5, [r4, #28]
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8002624:	1a9b      	subs	r3, r3, r2
 8002626:	6223      	str	r3, [r4, #32]
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 8002628:	23a0      	movs	r3, #160	; 0xa0
 800262a:	051b      	lsls	r3, r3, #20
 800262c:	6363      	str	r3, [r4, #52]	; 0x34
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 800262e:	0023      	movs	r3, r4
 8002630:	333c      	adds	r3, #60	; 0x3c
 8002632:	7018      	strb	r0, [r3, #0]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8002634:	9b02      	ldr	r3, [sp, #8]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002636:	2500      	movs	r5, #0
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8002638:	77e3      	strb	r3, [r4, #31]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 800263a:	0021      	movs	r1, r4
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 800263c:	2380      	movs	r3, #128	; 0x80
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 800263e:	002a      	movs	r2, r5
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8002640:	005b      	lsls	r3, r3, #1
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 8002642:	311c      	adds	r1, #28
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8002644:	481a      	ldr	r0, [pc, #104]	; (80026b0 <RTC_IF_StartTimer+0x134>)
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8002646:	77a6      	strb	r6, [r4, #30]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 8002648:	7767      	strb	r7, [r4, #29]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800264a:	63a5      	str	r5, [r4, #56]	; 0x38
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 800264c:	6325      	str	r5, [r4, #48]	; 0x30
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 800264e:	6423      	str	r3, [r4, #64]	; 0x40
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002650:	62a5      	str	r5, [r4, #40]	; 0x28
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002652:	62e5      	str	r5, [r4, #44]	; 0x2c
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8002654:	f002 fa8a 	bl	8004b6c <HAL_RTC_SetAlarm_IT>
}
 8002658:	0028      	movs	r0, r5
 800265a:	b007      	add	sp, #28
 800265c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    timeoutValue -= SECONDS_IN_1DAY;
 800265e:	4915      	ldr	r1, [pc, #84]	; (80026b4 <RTC_IF_StartTimer+0x138>)
    rtcAlarmDays++;
 8002660:	3001      	adds	r0, #1
    timeoutValue -= SECONDS_IN_1DAY;
 8002662:	1876      	adds	r6, r6, r1
    rtcAlarmDays++;
 8002664:	b280      	uxth	r0, r0
 8002666:	e7b4      	b.n	80025d2 <RTC_IF_StartTimer+0x56>
    timeoutValue -= SECONDS_IN_1HOUR;
 8002668:	4913      	ldr	r1, [pc, #76]	; (80026b8 <RTC_IF_StartTimer+0x13c>)
    rtcAlarmHours++;
 800266a:	3501      	adds	r5, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 800266c:	1876      	adds	r6, r6, r1
    rtcAlarmHours++;
 800266e:	b2ad      	uxth	r5, r5
 8002670:	e7b4      	b.n	80025dc <RTC_IF_StartTimer+0x60>
    rtcAlarmMinutes++;
 8002672:	3701      	adds	r7, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 8002674:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmMinutes++;
 8002676:	b2bf      	uxth	r7, r7
 8002678:	e7b4      	b.n	80025e4 <RTC_IF_StartTimer+0x68>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 800267a:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmMinutes++;
 800267c:	3701      	adds	r7, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 800267e:	b2b6      	uxth	r6, r6
    rtcAlarmMinutes++;
 8002680:	b2bf      	uxth	r7, r7
 8002682:	e7ba      	b.n	80025fa <RTC_IF_StartTimer+0x7e>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8002684:	3f3c      	subs	r7, #60	; 0x3c
    rtcAlarmHours++;
 8002686:	3501      	adds	r5, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8002688:	b2bf      	uxth	r7, r7
    rtcAlarmHours++;
 800268a:	b2ad      	uxth	r5, r5
 800268c:	e7b7      	b.n	80025fe <RTC_IF_StartTimer+0x82>
    rtcAlarmHours -= HOURS_IN_1DAY;
 800268e:	3d18      	subs	r5, #24
    rtcAlarmDays++;
 8002690:	3001      	adds	r0, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 8002692:	b2ad      	uxth	r5, r5
    rtcAlarmDays++;
 8002694:	b280      	uxth	r0, r0
 8002696:	e7b4      	b.n	8002602 <RTC_IF_StartTimer+0x86>
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8002698:	189b      	adds	r3, r3, r2
 800269a:	7b19      	ldrb	r1, [r3, #12]
 800269c:	e7ba      	b.n	8002614 <RTC_IF_StartTimer+0x98>
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	200000e8 	.word	0x200000e8
 80026a4:	000003ff 	.word	0x000003ff
 80026a8:	0001517f 	.word	0x0001517f
 80026ac:	08008b54 	.word	0x08008b54
 80026b0:	200005b8 	.word	0x200005b8
 80026b4:	fffeae80 	.word	0xfffeae80
 80026b8:	fffff1f0 	.word	0xfffff1f0

080026bc <RTC_IF_GetTime>:
{
 80026bc:	b530      	push	{r4, r5, lr}
 80026be:	b087      	sub	sp, #28
 80026c0:	0005      	movs	r5, r0
  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 80026c2:	a901      	add	r1, sp, #4
 80026c4:	4668      	mov	r0, sp
 80026c6:	f7ff fee7 	bl	8002498 <RTC_GetCalendarValue>
 80026ca:	0004      	movs	r4, r0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 80026cc:	0580      	lsls	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 80026ce:	227d      	movs	r2, #125	; 0x7d
 80026d0:	2300      	movs	r3, #0
 80026d2:	2100      	movs	r1, #0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 80026d4:	0d80      	lsrs	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 80026d6:	f7fd fedd 	bl	8000494 <__aeabi_lmul>
 80026da:	09c0      	lsrs	r0, r0, #7
  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 80026dc:	8028      	strh	r0, [r5, #0]
  uint32_t seconds = (uint32_t)(calendarValue >> RTC_N_PREDIV_S);
 80026de:	0aa0      	lsrs	r0, r4, #10
}
 80026e0:	b007      	add	sp, #28
 80026e2:	bd30      	pop	{r4, r5, pc}

080026e4 <RTC_IF_BkUp_Write_Seconds>:
{
 80026e4:	b510      	push	{r4, lr}
 80026e6:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80026e8:	2100      	movs	r1, #0
 80026ea:	4802      	ldr	r0, [pc, #8]	; (80026f4 <RTC_IF_BkUp_Write_Seconds+0x10>)
 80026ec:	f002 fb6a 	bl	8004dc4 <HAL_RTCEx_BKUPWrite>
}
 80026f0:	bd10      	pop	{r4, pc}
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	200005b8 	.word	0x200005b8

080026f8 <RTC_IF_BkUp_Write_SubSeconds>:
{
 80026f8:	b510      	push	{r4, lr}
 80026fa:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80026fc:	2101      	movs	r1, #1
 80026fe:	4802      	ldr	r0, [pc, #8]	; (8002708 <RTC_IF_BkUp_Write_SubSeconds+0x10>)
 8002700:	f002 fb60 	bl	8004dc4 <HAL_RTCEx_BKUPWrite>
}
 8002704:	bd10      	pop	{r4, pc}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	200005b8 	.word	0x200005b8

0800270c <RTC_IF_BkUp_Read_Seconds>:
{
 800270c:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800270e:	2100      	movs	r1, #0
 8002710:	4801      	ldr	r0, [pc, #4]	; (8002718 <RTC_IF_BkUp_Read_Seconds+0xc>)
 8002712:	f002 fb5d 	bl	8004dd0 <HAL_RTCEx_BKUPRead>
}
 8002716:	bd10      	pop	{r4, pc}
 8002718:	200005b8 	.word	0x200005b8

0800271c <RTC_IF_BkUp_Read_SubSeconds>:
{
 800271c:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800271e:	2101      	movs	r1, #1
 8002720:	4801      	ldr	r0, [pc, #4]	; (8002728 <RTC_IF_BkUp_Read_SubSeconds+0xc>)
 8002722:	f002 fb55 	bl	8004dd0 <HAL_RTCEx_BKUPRead>
}
 8002726:	bd10      	pop	{r4, pc}
 8002728:	200005b8 	.word	0x200005b8

0800272c <RTC_IF_Init>:
{
 800272c:	b530      	push	{r4, r5, lr}
  if (RTC_Initalized == false)
 800272e:	4c11      	ldr	r4, [pc, #68]	; (8002774 <RTC_IF_Init+0x48>)
{
 8002730:	b08b      	sub	sp, #44	; 0x2c
  if (RTC_Initalized == false)
 8002732:	3444      	adds	r4, #68	; 0x44
 8002734:	7823      	ldrb	r3, [r4, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d119      	bne.n	800276e <RTC_IF_Init+0x42>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800273a:	3320      	adds	r3, #32
 800273c:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800273e:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002740:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002742:	025b      	lsls	r3, r3, #9
 8002744:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002746:	f001 ff11 	bl	800456c <HAL_RCCEx_PeriphCLKConfig>
 800274a:	2800      	cmp	r0, #0
 800274c:	d000      	beq.n	8002750 <RTC_IF_Init+0x24>
      while (1);
 800274e:	e7fe      	b.n	800274e <RTC_IF_Init+0x22>
    MX_RTC_Init();
 8002750:	f7ff fde6 	bl	8002320 <MX_RTC_Init>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002754:	2180      	movs	r1, #128	; 0x80
 8002756:	4d08      	ldr	r5, [pc, #32]	; (8002778 <RTC_IF_Init+0x4c>)
 8002758:	0049      	lsls	r1, r1, #1
 800275a:	0028      	movs	r0, r5
 800275c:	f001 ffe4 	bl	8004728 <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002760:	0028      	movs	r0, r5
 8002762:	f002 fb3b 	bl	8004ddc <HAL_RTCEx_EnableBypassShadow>
    RTC_IF_SetTimerContext();
 8002766:	f7ff fef1 	bl	800254c <RTC_IF_SetTimerContext>
    RTC_Initalized = true;
 800276a:	2301      	movs	r3, #1
 800276c:	7023      	strb	r3, [r4, #0]
}
 800276e:	2000      	movs	r0, #0
 8002770:	b00b      	add	sp, #44	; 0x2c
 8002772:	bd30      	pop	{r4, r5, pc}
 8002774:	200000e8 	.word	0x200000e8
 8002778:	200005b8 	.word	0x200005b8

0800277c <RTC_IF_GetTimerValue>:
{
 800277c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = 0;
 800277e:	2000      	movs	r0, #0
  if (RTC_Initalized == true)
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <RTC_IF_GetTimerValue+0x1c>)
 8002782:	3344      	adds	r3, #68	; 0x44
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	4283      	cmp	r3, r0
 8002788:	d003      	beq.n	8002792 <RTC_IF_GetTimerValue+0x16>
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800278a:	4668      	mov	r0, sp
 800278c:	a901      	add	r1, sp, #4
 800278e:	f7ff fe83 	bl	8002498 <RTC_GetCalendarValue>
}
 8002792:	b007      	add	sp, #28
 8002794:	bd00      	pop	{pc}
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	200000e8 	.word	0x200000e8

0800279c <RTC_IF_DelayMs>:
{
 800279c:	b570      	push	{r4, r5, r6, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 800279e:	227d      	movs	r2, #125	; 0x7d
 80027a0:	2300      	movs	r3, #0
 80027a2:	0e41      	lsrs	r1, r0, #25
 80027a4:	01c0      	lsls	r0, r0, #7
 80027a6:	f7fd fe55 	bl	8000454 <__aeabi_uldivmod>
 80027aa:	0004      	movs	r4, r0
  timeout = RTC_IF_GetTimerValue();
 80027ac:	f7ff ffe6 	bl	800277c <RTC_IF_GetTimerValue>
 80027b0:	0005      	movs	r5, r0
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 80027b2:	f7ff ffe3 	bl	800277c <RTC_IF_GetTimerValue>
 80027b6:	1b40      	subs	r0, r0, r5
 80027b8:	42a0      	cmp	r0, r4
 80027ba:	d300      	bcc.n	80027be <RTC_IF_DelayMs+0x22>
}
 80027bc:	bd70      	pop	{r4, r5, r6, pc}
    __NOP();
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	e7f7      	b.n	80027b2 <RTC_IF_DelayMs+0x16>

080027c2 <HAL_RTC_AlarmAEventCallback>:
{
 80027c2:	b510      	push	{r4, lr}
  UTIL_TIMER_IRQ_Handler();
 80027c4:	f005 f854 	bl	8007870 <UTIL_TIMER_IRQ_Handler>
}
 80027c8:	bd10      	pop	{r4, pc}

080027ca <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80027ca:	4770      	bx	lr

080027cc <PWR_EnterStopMode>:

  /* USER CODE END ExitOffMode_1 */
}

void PWR_EnterStopMode(void)
{
 80027cc:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ce:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80027d2:	b672      	cpsid	i
  UTILS_ENTER_CRITICAL_SECTION();

  Sx_Board_IoDeInit();
 80027d4:	f000 fd28 	bl	8003228 <SX126x_RADIO_IoDeInit>

  UTIL_ADV_TRACE_IoDeInit();//@Murata DeInit the trace io when enter stop mode
 80027d8:	f004 fce0 	bl	800719c <UTIL_ADV_TRACE_IoDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 80027dc:	2304      	movs	r3, #4
 80027de:	4a05      	ldr	r2, [pc, #20]	; (80027f4 <PWR_EnterStopMode+0x28>)
 80027e0:	6811      	ldr	r1, [r2, #0]
 80027e2:	430b      	orrs	r3, r1
 80027e4:	6013      	str	r3, [r2, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e6:	f384 8810 	msr	PRIMASK, r4

  UTILS_EXIT_CRITICAL_SECTION();

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80027ea:	2101      	movs	r1, #1
 80027ec:	0008      	movs	r0, r1
 80027ee:	f001 faab 	bl	8003d48 <HAL_PWR_EnterSTOPMode>
}
 80027f2:	bd10      	pop	{r4, pc}
 80027f4:	40007000 	.word	0x40007000

080027f8 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80027f8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027fa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80027fe:	b672      	cpsid	i

  UTILS_ENTER_CRITICAL_SECTION();

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 8002800:	2201      	movs	r2, #1
 8002802:	4b11      	ldr	r3, [pc, #68]	; (8002848 <PWR_ExitStopMode+0x50>)
 8002804:	6819      	ldr	r1, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 800280a:	2204      	movs	r2, #4
 800280c:	6819      	ldr	r1, [r3, #0]
 800280e:	4211      	tst	r1, r2
 8002810:	d0fc      	beq.n	800280c <PWR_ExitStopMode+0x14>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 8002812:	2280      	movs	r2, #128	; 0x80
 8002814:	6819      	ldr	r1, [r3, #0]
 8002816:	0452      	lsls	r2, r2, #17
 8002818:	430a      	orrs	r2, r1
 800281a:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 800281c:	2280      	movs	r2, #128	; 0x80
 800281e:	0492      	lsls	r2, r2, #18
 8002820:	6819      	ldr	r1, [r3, #0]
 8002822:	4211      	tst	r1, r2
 8002824:	d0fc      	beq.n	8002820 <PWR_ExitStopMode+0x28>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 8002826:	2203      	movs	r2, #3
 8002828:	68d9      	ldr	r1, [r3, #12]
 800282a:	430a      	orrs	r2, r1

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 800282c:	210c      	movs	r1, #12
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 800282e:	60da      	str	r2, [r3, #12]
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	400a      	ands	r2, r1
 8002834:	2a0c      	cmp	r2, #12
 8002836:	d1fb      	bne.n	8002830 <PWR_ExitStopMode+0x38>

  /* initializes the peripherals */
  Sx_Board_IoInit();
 8002838:	f000 fc5c 	bl	80030f4 <SX126x_RADIO_IoInit>
  UTIL_ADV_TRACE_IoInit();//@Murata Init the trace io when exit stop mode
 800283c:	f004 fca6 	bl	800718c <UTIL_ADV_TRACE_IoInit>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002840:	f384 8810 	msr	PRIMASK, r4

  UTILS_EXIT_CRITICAL_SECTION();
}
 8002844:	bd10      	pop	{r4, pc}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	40021000 	.word	0x40021000

0800284c <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 800284c:	b510      	push	{r4, lr}
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800284e:	2101      	movs	r1, #1
 8002850:	2000      	movs	r0, #0
 8002852:	f001 fa41 	bl	8003cd8 <HAL_PWR_EnterSLEEPMode>
}
 8002856:	bd10      	pop	{r4, pc}

08002858 <PWR_ExitSleepMode>:
 8002858:	4770      	bx	lr

0800285a <PWR_ExitOffMode>:
 800285a:	4770      	bx	lr

0800285c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	4a09      	ldr	r2, [pc, #36]	; (8002884 <HAL_MspInit+0x28>)
 8002860:	055b      	lsls	r3, r3, #21
 8002862:	6b91      	ldr	r1, [r2, #56]	; 0x38
{
 8002864:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002866:	430b      	orrs	r3, r1
 8002868:	6393      	str	r3, [r2, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 800286a:	f001 fa2d 	bl	8003cc8 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 800286e:	f001 fab1 	bl	8003dd4 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 8002872:	2308      	movs	r3, #8
 8002874:	4a04      	ldr	r2, [pc, #16]	; (8002888 <HAL_MspInit+0x2c>)
 8002876:	6811      	ldr	r1, [r2, #0]
 8002878:	430b      	orrs	r3, r1
 800287a:	6013      	str	r3, [r2, #0]
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 800287c:	f001 faa0 	bl	8003dc0 <HAL_PWREx_EnableFastWakeUp>
#endif

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002880:	bd10      	pop	{r4, pc}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	40021000 	.word	0x40021000
 8002888:	40022000 	.word	0x40022000

0800288c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800288c:	4770      	bx	lr

0800288e <HardFault_Handler>:

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    __NOP();
 800288e:	46c0      	nop			; (mov r8, r8)
  while (1)
 8002890:	e7fd      	b.n	800288e <HardFault_Handler>

08002892 <SVC_Handler>:
 8002892:	4770      	bx	lr

08002894 <PendSV_Handler>:
 8002894:	4770      	bx	lr

08002896 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002896:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002898:	f000 fde8 	bl	800346c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800289c:	bd10      	pop	{r4, pc}
	...

080028a0 <EXTI0_1_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void EXTI0_1_IRQHandler(void)
{
 80028a0:	b510      	push	{r4, lr}
   HAL_EXTI_IRQHandler(&H_EXTI_0);
 80028a2:	4802      	ldr	r0, [pc, #8]	; (80028ac <EXTI0_1_IRQHandler+0xc>)
 80028a4:	f000 ff86 	bl	80037b4 <HAL_EXTI_IRQHandler>
}
 80028a8:	bd10      	pop	{r4, pc}
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	20000704 	.word	0x20000704

080028b0 <EXTI2_3_IRQHandler>:
 80028b0:	4770      	bx	lr

080028b2 <EXTI4_15_IRQHandler>:
 80028b2:	4770      	bx	lr

080028b4 <DMA1_Channel4_5_6_7_IRQHandler>:

  /* USER CODE END DMA1_Channel2_3_IRQHandler 1 */
}
#else
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80028b4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(husart2.hdmatx);
 80028b6:	4b02      	ldr	r3, [pc, #8]	; (80028c0 <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 80028b8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80028ba:	f000 ff22 	bl	8003702 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80028be:	bd10      	pop	{r4, pc}
 80028c0:	20000624 	.word	0x20000624

080028c4 <USART2_IRQHandler>:
#else
  /**
    * @brief This function handles USART2 Interrupt.
    */
  void USART2_IRQHandler(void)
  {
 80028c4:	b510      	push	{r4, lr}
    /* USER CODE BEGIN USART2_IRQn 0 */
  
    /* USER CODE END USART2_IRQn 0 */
    HAL_UART_IRQHandler(&husart2);
 80028c6:	4802      	ldr	r0, [pc, #8]	; (80028d0 <USART2_IRQHandler+0xc>)
 80028c8:	f002 fd54 	bl	8005374 <HAL_UART_IRQHandler>
    /* USER CODE BEGIN USART2_IRQn 1 */
  
    /* USER CODE END USART2_IRQn 1 */
  }
 80028cc:	bd10      	pop	{r4, pc}
 80028ce:	46c0      	nop			; (mov r8, r8)
 80028d0:	20000624 	.word	0x20000624

080028d4 <RTC_IRQHandler>:
#endif


void RTC_IRQHandler(void)
{
 80028d4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80028d6:	4802      	ldr	r0, [pc, #8]	; (80028e0 <RTC_IRQHandler+0xc>)
 80028d8:	f001 ff88 	bl	80047ec <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80028dc:	bd10      	pop	{r4, pc}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	200005b8 	.word	0x200005b8

080028e4 <tiny_snprintf_like.constprop.0>:
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
 80028e4:	b40c      	push	{r2, r3}
 80028e6:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80028e8:	2110      	movs	r1, #16
  va_start(vaArgs, strFormat);
 80028ea:	ab05      	add	r3, sp, #20
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80028ec:	4a03      	ldr	r2, [pc, #12]	; (80028fc <tiny_snprintf_like.constprop.0+0x18>)
  va_start(vaArgs, strFormat);
 80028ee:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80028f0:	f005 f804 	bl	80078fc <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80028f4:	b003      	add	sp, #12
 80028f6:	bc08      	pop	{r3}
 80028f8:	b002      	add	sp, #8
 80028fa:	4718      	bx	r3
 80028fc:	08008f30 	.word	0x08008f30

08002900 <TimestampNow>:
{
 8002900:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002902:	0004      	movs	r4, r0
  SysTime_t curtime = SysTimeGet();
 8002904:	ae02      	add	r6, sp, #8
 8002906:	0030      	movs	r0, r6
{
 8002908:	000d      	movs	r5, r1
  SysTime_t curtime = SysTimeGet();
 800290a:	f004 fe67 	bl	80075dc <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800290e:	2204      	movs	r2, #4
 8002910:	5eb3      	ldrsh	r3, [r6, r2]
 8002912:	2110      	movs	r1, #16
 8002914:	0020      	movs	r0, r4
 8002916:	4a05      	ldr	r2, [pc, #20]	; (800292c <TimestampNow+0x2c>)
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	9b02      	ldr	r3, [sp, #8]
 800291c:	f7ff ffe2 	bl	80028e4 <tiny_snprintf_like.constprop.0>
  *size = strlen((char *)buff);
 8002920:	0020      	movs	r0, r4
 8002922:	f7fd fbf1 	bl	8000108 <strlen>
 8002926:	8028      	strh	r0, [r5, #0]
}
 8002928:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	08008f30 	.word	0x08008f30

08002930 <SystemApp_Init>:
{
 8002930:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002932:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002934:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002936:	2704      	movs	r7, #4
{
 8002938:	b08b      	sub	sp, #44	; 0x2c
  UTIL_TIMER_Init();
 800293a:	f004 fe7b 	bl	8007634 <UTIL_TIMER_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293e:	2208      	movs	r2, #8
 8002940:	2100      	movs	r1, #0
 8002942:	a808      	add	r0, sp, #32
 8002944:	f005 f93b 	bl	8007bbe <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002948:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800294a:	4c2b      	ldr	r4, [pc, #172]	; (80029f8 <SystemApp_Init+0xc8>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294c:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800294e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002950:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002952:	432b      	orrs	r3, r5
 8002954:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002956:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002958:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800295a:	402b      	ands	r3, r5
 800295c:	9301      	str	r3, [sp, #4]
 800295e:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002960:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002962:	4333      	orrs	r3, r6
 8002964:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002966:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002968:	4033      	ands	r3, r6
 800296a:	9302      	str	r3, [sp, #8]
 800296c:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800296e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002970:	433b      	orrs	r3, r7
 8002972:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002974:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002976:	403b      	ands	r3, r7
 8002978:	9303      	str	r3, [sp, #12]
 800297a:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800297c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800297e:	4313      	orrs	r3, r2
 8002980:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002982:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002984:	4013      	ands	r3, r2
 8002986:	9304      	str	r3, [sp, #16]
 8002988:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800298a:	2303      	movs	r3, #3
 800298c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 8002992:	4b1a      	ldr	r3, [pc, #104]	; (80029fc <SystemApp_Init+0xcc>)
 8002994:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002996:	f000 ff1f 	bl	80037d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 800299a:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <SystemApp_Init+0xd0>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299c:	a905      	add	r1, sp, #20
 800299e:	4819      	ldr	r0, [pc, #100]	; (8002a04 <SystemApp_Init+0xd4>)
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 80029a0:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a2:	f000 ff19 	bl	80037d8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a6:	a905      	add	r1, sp, #20
 80029a8:	4817      	ldr	r0, [pc, #92]	; (8002a08 <SystemApp_Init+0xd8>)
 80029aa:	f000 ff15 	bl	80037d8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80029ae:	a905      	add	r1, sp, #20
 80029b0:	4816      	ldr	r0, [pc, #88]	; (8002a0c <SystemApp_Init+0xdc>)
 80029b2:	f000 ff11 	bl	80037d8 <HAL_GPIO_Init>
  __HAL_RCC_GPIOH_CLK_DISABLE();
 80029b6:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_DISABLE();
 80029b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80029ba:	43ab      	bics	r3, r5
 80029bc:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 80029be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80029c0:	43b3      	bics	r3, r6
 80029c2:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 80029c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80029c6:	43bb      	bics	r3, r7
 80029c8:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 80029ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80029cc:	4393      	bics	r3, r2
 80029ce:	62e3      	str	r3, [r4, #44]	; 0x2c
  UTIL_ADV_TRACE_Init();
 80029d0:	f004 fbc2 	bl	8007158 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80029d4:	480e      	ldr	r0, [pc, #56]	; (8002a10 <SystemApp_Init+0xe0>)
 80029d6:	f004 fbe9 	bl	80071ac <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80029da:	0030      	movs	r0, r6
 80029dc:	f004 fbec 	bl	80071b8 <UTIL_ADV_TRACE_SetVerboseLevel>
  Sx_Board_Bus_Init();
 80029e0:	f000 fcd5 	bl	800338e <SX126x_RADIO_Bus_Init>
  Sx_Board_IoInit();
 80029e4:	f000 fb86 	bl	80030f4 <SX126x_RADIO_IoInit>
  UTIL_LPM_Init();
 80029e8:	f004 fcde 	bl	80073a8 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80029ec:	0029      	movs	r1, r5
 80029ee:	0028      	movs	r0, r5
 80029f0:	f004 fcf8 	bl	80073e4 <UTIL_LPM_SetOffMode>
}
 80029f4:	b00b      	add	sp, #44	; 0x2c
 80029f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029f8:	40021000 	.word	0x40021000
 80029fc:	00009fff 	.word	0x00009fff
 8002a00:	0000ffff 	.word	0x0000ffff
 8002a04:	50000400 	.word	0x50000400
 8002a08:	50000800 	.word	0x50000800
 8002a0c:	50001c00 	.word	0x50001c00
 8002a10:	08002901 	.word	0x08002901

08002a14 <UTIL_SEQ_Idle>:
{
 8002a14:	b510      	push	{r4, lr}
  UTIL_LPM_EnterLowPower();
 8002a16:	f004 fd0d 	bl	8007434 <UTIL_LPM_EnterLowPower>
}
 8002a1a:	bd10      	pop	{r4, pc}

08002a1c <UTIL_ADV_TRACE_PreSendHook>:
{
 8002a1c:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002a1e:	2101      	movs	r1, #1
 8002a20:	2004      	movs	r0, #4
 8002a22:	f004 fcc9 	bl	80073b8 <UTIL_LPM_SetStopMode>
}
 8002a26:	bd10      	pop	{r4, pc}

08002a28 <UTIL_ADV_TRACE_PostSendHook>:
{
 8002a28:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	2004      	movs	r0, #4
 8002a2e:	f004 fcc3 	bl	80073b8 <UTIL_LPM_SetStopMode>
}
 8002a32:	bd10      	pop	{r4, pc}

08002a34 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8002a34:	2000      	movs	r0, #0
 8002a36:	4770      	bx	lr

08002a38 <HAL_GetTick>:
  * @brief Provide a tick value in millisecond measured using RTC
  * @note This function overwrites the __weak one from HAL
  * @retval tick value
  */
uint32_t HAL_GetTick(void)
{
 8002a38:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 8002a3a:	f7ff fe9f 	bl	800277c <RTC_IF_GetTimerValue>
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8002a3e:	bd10      	pop	{r4, pc}

08002a40 <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002a40:	b507      	push	{r0, r1, r2, lr}
 8002a42:	9001      	str	r0, [sp, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 8002a44:	9801      	ldr	r0, [sp, #4]
 8002a46:	f7ff fea9 	bl	800279c <RTC_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002a4a:	bd07      	pop	{r0, r1, r2, pc}

08002a4c <MX_USART2_Init>:
/* USART2 init function */

void MX_USART2_Init(void)
{

  husart2.Instance        = USART2;
 8002a4c:	480a      	ldr	r0, [pc, #40]	; (8002a78 <MX_USART2_Init+0x2c>)
 8002a4e:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <MX_USART2_Init+0x30>)
{
 8002a50:	b510      	push	{r4, lr}
  husart2.Instance        = USART2;
 8002a52:	6003      	str	r3, [r0, #0]
  husart2.Init.BaudRate   = USART_BAUDRATE;
 8002a54:	23e1      	movs	r3, #225	; 0xe1
 8002a56:	025b      	lsls	r3, r3, #9
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
  husart2.Init.StopBits   = UART_STOPBITS_1;
  husart2.Init.Parity     = UART_PARITY_NONE;
  husart2.Init.Mode       = UART_MODE_TX_RX;
 8002a58:	220c      	movs	r2, #12
  husart2.Init.BaudRate   = USART_BAUDRATE;
 8002a5a:	6043      	str	r3, [r0, #4]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a5c:	2300      	movs	r3, #0
  husart2.Init.Mode       = UART_MODE_TX_RX;
 8002a5e:	6142      	str	r2, [r0, #20]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a60:	6083      	str	r3, [r0, #8]
  husart2.Init.StopBits   = UART_STOPBITS_1;
 8002a62:	60c3      	str	r3, [r0, #12]
  husart2.Init.Parity     = UART_PARITY_NONE;
 8002a64:	6103      	str	r3, [r0, #16]
  husart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8002a66:	6183      	str	r3, [r0, #24]

  if (HAL_UART_Init(&husart2) != HAL_OK)
 8002a68:	f003 f81c 	bl	8005aa4 <HAL_UART_Init>
 8002a6c:	2800      	cmp	r0, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_USART2_Init+0x28>
  {
    Error_Handler();
 8002a70:	f7ff fc54 	bl	800231c <Error_Handler>
  }
}
 8002a74:	bd10      	pop	{r4, pc}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	20000624 	.word	0x20000624
 8002a7c:	40004400 	.word	0x40004400

08002a80 <HAL_UART_MspInit>:

#endif

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8002a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a82:	0005      	movs	r5, r0
 8002a84:	b095      	sub	sp, #84	; 0x54

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a86:	2214      	movs	r2, #20
 8002a88:	2100      	movs	r1, #0
 8002a8a:	a806      	add	r0, sp, #24
 8002a8c:	f005 f897 	bl	8007bbe <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a90:	2224      	movs	r2, #36	; 0x24
 8002a92:	2100      	movs	r1, #0
 8002a94:	a80b      	add	r0, sp, #44	; 0x2c
 8002a96:	f005 f892 	bl	8007bbe <memset>
  if (uartHandle->Instance == USART1)
 8002a9a:	682b      	ldr	r3, [r5, #0]
 8002a9c:	4a4d      	ldr	r2, [pc, #308]	; (8002bd4 <HAL_UART_MspInit+0x154>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d169      	bne.n	8002b76 <HAL_UART_MspInit+0xf6>

    /* USER CODE END USART1_MspInit 0 */

    /* Enable peripherals and GPIO Clocks */
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	4b4c      	ldr	r3, [pc, #304]	; (8002bd8 <HAL_UART_MspInit+0x158>)
 8002aa6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002aa8:	4311      	orrs	r1, r2
 8002aaa:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002aac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002aae:	4011      	ands	r1, r2
 8002ab0:	9100      	str	r1, [sp, #0]
 8002ab2:	9900      	ldr	r1, [sp, #0]
    USARTx_RX_GPIO_CLK_ENABLE();
 8002ab4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ab6:	4311      	orrs	r1, r2
 8002ab8:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002aba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002abc:	4011      	ands	r1, r2
 8002abe:	9101      	str	r1, [sp, #4]
 8002ac0:	9901      	ldr	r1, [sp, #4]

    /* Enable USARTx clock */
    __USART1_CLK_ENABLE();
 8002ac2:	2180      	movs	r1, #128	; 0x80
 8002ac4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002ac6:	01c9      	lsls	r1, r1, #7
 8002ac8:	4308      	orrs	r0, r1
 8002aca:	6358      	str	r0, [r3, #52]	; 0x34

    /* Enable DMA clock */
    DMAx_CLK_ENABLE();
 8002acc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ace:	4310      	orrs	r0, r2
 8002ad0:	6318      	str	r0, [r3, #48]	; 0x30
 8002ad2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ad4:	4010      	ands	r0, r2
 8002ad6:	9002      	str	r0, [sp, #8]
 8002ad8:	9802      	ldr	r0, [sp, #8]

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ada:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002adc:	4301      	orrs	r1, r0
 8002ade:	6359      	str	r1, [r3, #52]	; 0x34

    /* Select SYSTEM clock for USART1 commuincation TX/RX */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ae0:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ae2:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8002ae4:	920d      	str	r2, [sp, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ae6:	f001 fd41 	bl	800456c <HAL_RCCEx_PeriphCLKConfig>
 8002aea:	2800      	cmp	r0, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_UART_MspInit+0x72>
    {
      Error_Handler();
 8002aee:	f7ff fc15 	bl	800231c <Error_Handler>

    /**USART2 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
      */
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 8002af2:	2604      	movs	r6, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8002af4:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af6:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002af8:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afa:	2702      	movs	r7, #2
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8002afc:	a906      	add	r1, sp, #24
 8002afe:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002b00:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 8002b02:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b04:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b06:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8002b08:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8002b0a:	f000 fe65 	bl	80037d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8002b0e:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8002b10:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8002b12:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8002b14:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002b16:	3b05      	subs	r3, #5
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8002b18:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002b1a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1c:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8002b20:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8002b22:	f000 fe59 	bl	80037d8 <HAL_GPIO_Init>


    /* USART1 DMA Init */
    /* USART1_TX Init */
    /* Configure the DMA handler for Transmission process */
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8002b26:	482d      	ldr	r0, [pc, #180]	; (8002bdc <HAL_UART_MspInit+0x15c>)
 8002b28:	4b2d      	ldr	r3, [pc, #180]	; (8002be0 <HAL_UART_MspInit+0x160>)
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 8002b2a:	6046      	str	r6, [r0, #4]
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8002b2c:	6003      	str	r3, [r0, #0]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8002b2e:	2310      	movs	r3, #16
 8002b30:	6083      	str	r3, [r0, #8]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8002b32:	3370      	adds	r3, #112	; 0x70
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002b34:	60c4      	str	r4, [r0, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8002b36:	6103      	str	r3, [r0, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b38:	6144      	str	r4, [r0, #20]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8002b3a:	6184      	str	r4, [r0, #24]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 8002b3c:	61c4      	str	r4, [r0, #28]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8002b3e:	6204      	str	r4, [r0, #32]

    if (HAL_DMA_Init(&hdma_tx) != HAL_OK)
 8002b40:	f000 fce6 	bl	8003510 <HAL_DMA_Init>
 8002b44:	42a0      	cmp	r0, r4
 8002b46:	d001      	beq.n	8002b4c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002b48:	f7ff fbe8 	bl	800231c <Error_Handler>
    }


    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);
 8002b4c:	4b23      	ldr	r3, [pc, #140]	; (8002bdc <HAL_UART_MspInit+0x15c>)

    /* Configure the NVIC for DMA */
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8002b4e:	2201      	movs	r2, #1
 8002b50:	2100      	movs	r1, #0
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);
 8002b52:	66eb      	str	r3, [r5, #108]	; 0x6c
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8002b54:	200b      	movs	r0, #11
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);
 8002b56:	629d      	str	r5, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8002b58:	f000 fc94 	bl	8003484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8002b5c:	200b      	movs	r0, #11
 8002b5e:	f000 fcbb 	bl	80034d8 <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 8002b62:	201c      	movs	r0, #28
 8002b64:	2201      	movs	r2, #1
 8002b66:	2100      	movs	r1, #0
 8002b68:	f000 fc8c 	bl	8003484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8002b6c:	201c      	movs	r0, #28
 8002b6e:	f000 fcb3 	bl	80034d8 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
}
 8002b72:	b015      	add	sp, #84	; 0x54
 8002b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (uartHandle->Instance == USART2)
 8002b76:	4a1b      	ldr	r2, [pc, #108]	; (8002be4 <HAL_UART_MspInit+0x164>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d1fa      	bne.n	8002b72 <HAL_UART_MspInit+0xf2>
    USARTx_TX_GPIO_CLK_ENABLE();
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <HAL_UART_MspInit+0x158>)
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8002b80:	2604      	movs	r6, #4
    USARTx_TX_GPIO_CLK_ENABLE();
 8002b82:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b84:	4311      	orrs	r1, r2
 8002b86:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002b88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b8a:	4011      	ands	r1, r2
 8002b8c:	9103      	str	r1, [sp, #12]
 8002b8e:	9903      	ldr	r1, [sp, #12]
    USARTx_RX_GPIO_CLK_ENABLE();
 8002b90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b92:	4311      	orrs	r1, r2
 8002b94:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002b96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b98:	4011      	ands	r1, r2
 8002b9a:	9104      	str	r1, [sp, #16]
 8002b9c:	9904      	ldr	r1, [sp, #16]
    __USART2_CLK_ENABLE();
 8002b9e:	2180      	movs	r1, #128	; 0x80
 8002ba0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ba2:	0289      	lsls	r1, r1, #10
 8002ba4:	4308      	orrs	r0, r1
 8002ba6:	6398      	str	r0, [r3, #56]	; 0x38
    DMAx_CLK_ENABLE();
 8002ba8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002baa:	4310      	orrs	r0, r2
 8002bac:	6318      	str	r0, [r3, #48]	; 0x30
 8002bae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002bb0:	4002      	ands	r2, r0
 8002bb2:	9205      	str	r2, [sp, #20]
 8002bb4:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bb8:	a80b      	add	r0, sp, #44	; 0x2c
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bba:	4311      	orrs	r1, r2
 8002bbc:	6399      	str	r1, [r3, #56]	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002bbe:	2302      	movs	r3, #2
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8002bc0:	960e      	str	r6, [sp, #56]	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002bc2:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bc4:	f001 fcd2 	bl	800456c <HAL_RCCEx_PeriphCLKConfig>
 8002bc8:	2800      	cmp	r0, #0
 8002bca:	d100      	bne.n	8002bce <HAL_UART_MspInit+0x14e>
 8002bcc:	e792      	b.n	8002af4 <HAL_UART_MspInit+0x74>
      Error_Handler();
 8002bce:	f7ff fba5 	bl	800231c <Error_Handler>
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 8002bd2:	e78f      	b.n	8002af4 <HAL_UART_MspInit+0x74>
 8002bd4:	40013800 	.word	0x40013800
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	200005dc 	.word	0x200005dc
 8002be0:	40020080 	.word	0x40020080
 8002be4:	40004400 	.word	0x40004400

08002be8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{
  if (uartHandle->Instance == USART1)
 8002be8:	6803      	ldr	r3, [r0, #0]
 8002bea:	4a14      	ldr	r2, [pc, #80]	; (8002c3c <HAL_UART_MspDeInit+0x54>)
{
 8002bec:	b510      	push	{r4, lr}
 8002bee:	0004      	movs	r4, r0
  if (uartHandle->Instance == USART1)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d110      	bne.n	8002c16 <HAL_UART_MspDeInit+0x2e>

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8002bf4:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_DISABLE();
 8002bf6:	4a12      	ldr	r2, [pc, #72]	; (8002c40 <HAL_UART_MspDeInit+0x58>)
 8002bf8:	4912      	ldr	r1, [pc, #72]	; (8002c44 <HAL_UART_MspDeInit+0x5c>)
 8002bfa:	6b53      	ldr	r3, [r2, #52]	; 0x34
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8002bfc:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART1_CLK_DISABLE();
 8002bfe:	400b      	ands	r3, r1
 8002c00:	6353      	str	r3, [r2, #52]	; 0x34
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8002c02:	210c      	movs	r1, #12
 8002c04:	f000 fea8 	bl	8003958 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002c08:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002c0a:	f000 fcc5 	bl	8003598 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002c0e:	201b      	movs	r0, #27

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002c10:	f000 fc6e 	bl	80034f0 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002c14:	bd10      	pop	{r4, pc}
  else if (uartHandle->Instance == USART2)
 8002c16:	4a0c      	ldr	r2, [pc, #48]	; (8002c48 <HAL_UART_MspDeInit+0x60>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d1fb      	bne.n	8002c14 <HAL_UART_MspDeInit+0x2c>
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8002c1c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_DISABLE();
 8002c1e:	4a08      	ldr	r2, [pc, #32]	; (8002c40 <HAL_UART_MspDeInit+0x58>)
 8002c20:	490a      	ldr	r1, [pc, #40]	; (8002c4c <HAL_UART_MspDeInit+0x64>)
 8002c22:	6b93      	ldr	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8002c24:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_DISABLE();
 8002c26:	400b      	ands	r3, r1
 8002c28:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8002c2a:	210c      	movs	r1, #12
 8002c2c:	f000 fe94 	bl	8003958 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002c30:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002c32:	f000 fcb1 	bl	8003598 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002c36:	201c      	movs	r0, #28
 8002c38:	e7ea      	b.n	8002c10 <HAL_UART_MspDeInit+0x28>
 8002c3a:	46c0      	nop			; (mov r8, r8)
 8002c3c:	40013800 	.word	0x40013800
 8002c40:	40021000 	.word	0x40021000
 8002c44:	ffffbfff 	.word	0xffffbfff
 8002c48:	40004400 	.word	0x40004400
 8002c4c:	fffdffff 	.word	0xfffdffff

08002c50 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002c50:	b510      	push	{r4, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002c52:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <vcom_Init+0x10>)
 8002c54:	6018      	str	r0, [r3, #0]
#ifdef USE_USART1
    MX_USART1_Init();
#else
    MX_USART2_Init();
 8002c56:	f7ff fef9 	bl	8002a4c <MX_USART2_Init>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	bd10      	pop	{r4, pc}
 8002c5e:	46c0      	nop			; (mov r8, r8)
 8002c60:	20000130 	.word	0x20000130

08002c64 <vcom_DeInit>:

#ifdef USE_USART1
  __HAL_RCC_USART1_FORCE_RESET();
  __HAL_RCC_USART1_RELEASE_RESET();
#else
  __HAL_RCC_USART2_FORCE_RESET();
 8002c64:	2280      	movs	r2, #128	; 0x80
 8002c66:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <vcom_DeInit+0x28>)
 8002c68:	0292      	lsls	r2, r2, #10
 8002c6a:	6a99      	ldr	r1, [r3, #40]	; 0x28
{
 8002c6c:	b510      	push	{r4, lr}
  __HAL_RCC_USART2_FORCE_RESET();
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_USART2_RELEASE_RESET();
 8002c72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c74:	4906      	ldr	r1, [pc, #24]	; (8002c90 <vcom_DeInit+0x2c>)
#endif

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&UartHandle);
 8002c76:	4807      	ldr	r0, [pc, #28]	; (8002c94 <vcom_DeInit+0x30>)
  __HAL_RCC_USART2_RELEASE_RESET();
 8002c78:	400a      	ands	r2, r1
 8002c7a:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_UART_MspDeInit(&UartHandle);
 8002c7c:	f7ff ffb4 	bl	8002be8 <HAL_UART_MspDeInit>
  /* USER CODE BEGIN 1 */
#ifdef USE_USART1
    HAL_NVIC_DisableIRQ(DMA1_Channel2_3_IRQn);

#else
    HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8002c80:	200b      	movs	r0, #11
 8002c82:	f000 fc35 	bl	80034f0 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002c86:	2000      	movs	r0, #0
 8002c88:	bd10      	pop	{r4, pc}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	fffdffff 	.word	0xfffdffff
 8002c94:	20000624 	.word	0x20000624

08002c98 <vcom_IoInit>:
UTIL_ADV_TRACE_Status_t vcom_IoInit(void)
{
 8002c98:	b530      	push	{r4, r5, lr}
    /* at that point, MCU has been awoken. Wake Up based on RXNE flag successful */
    HAL_UARTEx_DisableStopMode(&UartHandle);
 8002c9a:	4c1b      	ldr	r4, [pc, #108]	; (8002d08 <vcom_IoInit+0x70>)
{
 8002c9c:	b089      	sub	sp, #36	; 0x24
    HAL_UARTEx_DisableStopMode(&UartHandle);
 8002c9e:	0020      	movs	r0, r4
 8002ca0:	f003 f806 	bl	8005cb0 <HAL_UARTEx_DisableStopMode>

    /* Disable the UART Wake UP from stop mode Interrupt */
    __HAL_UART_DISABLE_IT(&UartHandle, UART_IT_WUF);
 8002ca4:	6822      	ldr	r2, [r4, #0]
 8002ca6:	4919      	ldr	r1, [pc, #100]	; (8002d0c <vcom_IoInit+0x74>)
 8002ca8:	6893      	ldr	r3, [r2, #8]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull      = GPIO_PULLUP;
    GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_TX_AF;

    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8002caa:	25a0      	movs	r5, #160	; 0xa0
    __HAL_UART_DISABLE_IT(&UartHandle, UART_IT_WUF);
 8002cac:	400b      	ands	r3, r1
 8002cae:	6093      	str	r3, [r2, #8]
    __HAL_DMA_ENABLE(UartHandle.hdmatx);
 8002cb0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    GPIO_InitStruct.Pin       = USARTx_TX_Pin;
 8002cb2:	2404      	movs	r4, #4
    __HAL_DMA_ENABLE(UartHandle.hdmatx);
 8002cb4:	6819      	ldr	r1, [r3, #0]
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	680a      	ldr	r2, [r1, #0]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8002cba:	05ed      	lsls	r5, r5, #23
    __HAL_DMA_ENABLE(UartHandle.hdmatx);
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	600a      	str	r2, [r1, #0]
    USARTx_TX_GPIO_CLK_ENABLE();
 8002cc0:	4a13      	ldr	r2, [pc, #76]	; (8002d10 <vcom_IoInit+0x78>)
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8002cc2:	0028      	movs	r0, r5
    USARTx_TX_GPIO_CLK_ENABLE();
 8002cc4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002cc6:	4319      	orrs	r1, r3
 8002cc8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002cca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ccc:	4019      	ands	r1, r3
 8002cce:	9101      	str	r1, [sp, #4]
 8002cd0:	9901      	ldr	r1, [sp, #4]
    USARTx_RX_GPIO_CLK_ENABLE();
 8002cd2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002cd4:	4319      	orrs	r1, r3
 8002cd6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002cd8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8002cda:	a903      	add	r1, sp, #12
    USARTx_RX_GPIO_CLK_ENABLE();
 8002cdc:	401a      	ands	r2, r3
 8002cde:	9202      	str	r2, [sp, #8]
 8002ce0:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002ce2:	2202      	movs	r2, #2
    GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8002ce4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8002ce6:	189b      	adds	r3, r3, r2
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002ce8:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8002cea:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin       = USARTx_TX_Pin;
 8002cec:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8002cee:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8002cf0:	f000 fd72 	bl	80037d8 <HAL_GPIO_Init>

    /* UART RX GPIO pin configuration  */
    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8002cf4:	2308      	movs	r3, #8
    GPIO_InitStruct.Alternate = USARTx_RX_AF;

    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8002cf6:	0028      	movs	r0, r5
 8002cf8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8002cfa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8002cfc:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8002cfe:	f000 fd6b 	bl	80037d8 <HAL_GPIO_Init>
		
    return UTIL_ADV_TRACE_OK;
}
 8002d02:	2000      	movs	r0, #0
 8002d04:	b009      	add	sp, #36	; 0x24
 8002d06:	bd30      	pop	{r4, r5, pc}
 8002d08:	20000624 	.word	0x20000624
 8002d0c:	ffbfffff 	.word	0xffbfffff
 8002d10:	40021000 	.word	0x40021000

08002d14 <vcom_IoDeInit>:
 *****************************************************************************/

UTIL_ADV_TRACE_Status_t vcom_IoDeInit(void)
{
    /* make sure that no UART transfer is on-going */
    while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 8002d14:	2280      	movs	r2, #128	; 0x80
{
 8002d16:	b510      	push	{r4, lr}
    while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 8002d18:	4c24      	ldr	r4, [pc, #144]	; (8002dac <vcom_IoDeInit+0x98>)
{
 8002d1a:	b08a      	sub	sp, #40	; 0x28
    while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	0252      	lsls	r2, r2, #9
 8002d20:	69d9      	ldr	r1, [r3, #28]
 8002d22:	4211      	tst	r1, r2
 8002d24:	d1fc      	bne.n	8002d20 <vcom_IoDeInit+0xc>

    /* make sure that UART is ready to receive
    * (test carried out again later in HAL_UARTEx_StopModeWakeUpSourceConfig) */
    while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_REACK) == RESET);
 8002d26:	2280      	movs	r2, #128	; 0x80
 8002d28:	03d2      	lsls	r2, r2, #15
 8002d2a:	69d9      	ldr	r1, [r3, #28]
 8002d2c:	4211      	tst	r1, r2
 8002d2e:	d0fc      	beq.n	8002d2a <vcom_IoDeInit+0x16>

    /* disable dma */
    __HAL_DMA_DISABLE(UartHandle.hdmatx);
 8002d30:	2101      	movs	r1, #1
 8002d32:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    UART_WakeUpTypeDef wakeup =
    {
        .WakeUpEvent = UART_WAKEUP_ON_STARTBIT
    };

    if (HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, wakeup) != HAL_OK)
 8002d34:	0020      	movs	r0, r4
    __HAL_DMA_DISABLE(UartHandle.hdmatx);
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	6813      	ldr	r3, [r2, #0]
 8002d3a:	438b      	bics	r3, r1
    UART_WakeUpTypeDef wakeup =
 8002d3c:	2180      	movs	r1, #128	; 0x80
    __HAL_DMA_DISABLE(UartHandle.hdmatx);
 8002d3e:	6013      	str	r3, [r2, #0]
    UART_WakeUpTypeDef wakeup =
 8002d40:	2200      	movs	r2, #0
 8002d42:	0389      	lsls	r1, r1, #14
 8002d44:	9204      	str	r2, [sp, #16]
 8002d46:	9103      	str	r1, [sp, #12]
    if (HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, wakeup) != HAL_OK)
 8002d48:	f002 ff5e 	bl	8005c08 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 8002d4c:	2800      	cmp	r0, #0
 8002d4e:	d001      	beq.n	8002d54 <vcom_IoDeInit+0x40>
    {
        Error_Handler();
 8002d50:	f7ff fae4 	bl	800231c <Error_Handler>
    }

    /* Enable the UART Wake UP from stop mode Interrupt */
    __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 8002d54:	2380      	movs	r3, #128	; 0x80
 8002d56:	6822      	ldr	r2, [r4, #0]
 8002d58:	03db      	lsls	r3, r3, #15
 8002d5a:	6891      	ldr	r1, [r2, #8]

    /* enable MCU wake-up by UART */
    HAL_UARTEx_EnableStopMode(&UartHandle);
 8002d5c:	0020      	movs	r0, r4
    __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 8002d5e:	430b      	orrs	r3, r1
 8002d60:	6093      	str	r3, [r2, #8]
    HAL_UARTEx_EnableStopMode(&UartHandle);
 8002d62:	f002 ff95 	bl	8005c90 <HAL_UARTEx_EnableStopMode>

    /* Disable USARTx */
    GPIO_InitTypeDef GPIO_InitStructure = {0};
 8002d66:	2208      	movs	r2, #8
 8002d68:	2100      	movs	r1, #0
 8002d6a:	a808      	add	r0, sp, #32
 8002d6c:	f004 ff27 	bl	8007bbe <memset>

    USARTx_TX_GPIO_CLK_ENABLE();
 8002d70:	2201      	movs	r2, #1
 8002d72:	4b0f      	ldr	r3, [pc, #60]	; (8002db0 <vcom_IoDeInit+0x9c>)

    GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStructure.Pull = GPIO_NOPULL;
  
    GPIO_InitStructure.Pin =  USARTx_TX_Pin ;
    HAL_GPIO_Init(  USARTx_TX_GPIO_Port, &GPIO_InitStructure );
 8002d74:	20a0      	movs	r0, #160	; 0xa0
    USARTx_TX_GPIO_CLK_ENABLE();
 8002d76:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002d78:	2400      	movs	r4, #0
    USARTx_TX_GPIO_CLK_ENABLE();
 8002d7a:	4311      	orrs	r1, r2
 8002d7c:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002d7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    HAL_GPIO_Init(  USARTx_TX_GPIO_Port, &GPIO_InitStructure );
 8002d80:	05c0      	lsls	r0, r0, #23
    USARTx_TX_GPIO_CLK_ENABLE();
 8002d82:	4011      	ands	r1, r2
 8002d84:	9101      	str	r1, [sp, #4]
 8002d86:	9901      	ldr	r1, [sp, #4]
    USARTx_RX_GPIO_CLK_ENABLE();
 8002d88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d8a:	4311      	orrs	r1, r2
 8002d8c:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(  USARTx_TX_GPIO_Port, &GPIO_InitStructure );
 8002d90:	a905      	add	r1, sp, #20
    USARTx_RX_GPIO_CLK_ENABLE();
 8002d92:	401a      	ands	r2, r3
 8002d94:	9202      	str	r2, [sp, #8]
 8002d96:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	9306      	str	r3, [sp, #24]
    GPIO_InitStructure.Pin =  USARTx_TX_Pin ;
 8002d9c:	3301      	adds	r3, #1
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002d9e:	9407      	str	r4, [sp, #28]
    GPIO_InitStructure.Pin =  USARTx_TX_Pin ;
 8002da0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(  USARTx_TX_GPIO_Port, &GPIO_InitStructure );
 8002da2:	f000 fd19 	bl	80037d8 <HAL_GPIO_Init>
		
    return UTIL_ADV_TRACE_OK;
}
 8002da6:	0020      	movs	r0, r4
 8002da8:	b00a      	add	sp, #40	; 0x28
 8002daa:	bd10      	pop	{r4, pc}
 8002dac:	20000624 	.word	0x20000624
 8002db0:	40021000 	.word	0x40021000

08002db4 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002db4:	b510      	push	{r4, lr}
 8002db6:	000a      	movs	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 8002db8:	0001      	movs	r1, r0
 8002dba:	4802      	ldr	r0, [pc, #8]	; (8002dc4 <vcom_Trace_DMA+0x10>)
 8002dbc:	f002 fa30 	bl	8005220 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	bd10      	pop	{r4, pc}
 8002dc4:	20000624 	.word	0x20000624

08002dc8 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002dc8:	b513      	push	{r0, r1, r4, lr}

  /*record call back*/
  RxCpltCallback = RxCb;

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002dca:	2180      	movs	r1, #128	; 0x80
  RxCpltCallback = RxCb;
 8002dcc:	4b10      	ldr	r3, [pc, #64]	; (8002e10 <vcom_ReceiveInit+0x48>)

  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8002dce:	4c11      	ldr	r4, [pc, #68]	; (8002e14 <vcom_ReceiveInit+0x4c>)
  RxCpltCallback = RxCb;
 8002dd0:	6058      	str	r0, [r3, #4]
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8002dd2:	9a01      	ldr	r2, [sp, #4]
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002dd4:	0389      	lsls	r1, r1, #14
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8002dd6:	0020      	movs	r0, r4
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002dd8:	9100      	str	r1, [sp, #0]
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8002dda:	f002 ff15 	bl	8005c08 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 8002dde:	2280      	movs	r2, #128	; 0x80
 8002de0:	6823      	ldr	r3, [r4, #0]
 8002de2:	0252      	lsls	r2, r2, #9
 8002de4:	69d9      	ldr	r1, [r3, #28]
 8002de6:	4211      	tst	r1, r2
 8002de8:	d1fc      	bne.n	8002de4 <vcom_ReceiveInit+0x1c>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_REACK) == RESET);
 8002dea:	2280      	movs	r2, #128	; 0x80
 8002dec:	03d2      	lsls	r2, r2, #15
 8002dee:	69d9      	ldr	r1, [r3, #28]
 8002df0:	4211      	tst	r1, r2
 8002df2:	d0fc      	beq.n	8002dee <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 8002df4:	6899      	ldr	r1, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&UartHandle);
 8002df6:	0020      	movs	r0, r4
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	609a      	str	r2, [r3, #8]
  HAL_UARTEx_EnableStopMode(&UartHandle);
 8002dfc:	f002 ff48 	bl	8005c90 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&UartHandle, &charRx, 1);
 8002e00:	2201      	movs	r2, #1
 8002e02:	0020      	movs	r0, r4
 8002e04:	4904      	ldr	r1, [pc, #16]	; (8002e18 <vcom_ReceiveInit+0x50>)
 8002e06:	f002 fec9 	bl	8005b9c <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	bd16      	pop	{r1, r2, r4, pc}
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	20000130 	.word	0x20000130
 8002e14:	20000624 	.word	0x20000624
 8002e18:	200006a8 	.word	0x200006a8

08002e1c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8002e1c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8002e1e:	4b02      	ldr	r3, [pc, #8]	; (8002e28 <HAL_UART_TxCpltCallback+0xc>)
 8002e20:	2000      	movs	r0, #0
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002e26:	bd10      	pop	{r4, pc}
 8002e28:	20000130 	.word	0x20000130

08002e2c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8002e2c:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <HAL_UART_RxCpltCallback+0x28>)
{
 8002e2e:	b570      	push	{r4, r5, r6, lr}
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8002e30:	685b      	ldr	r3, [r3, #4]
{
 8002e32:	0004      	movs	r4, r0
 8002e34:	4d08      	ldr	r5, [pc, #32]	; (8002e58 <HAL_UART_RxCpltCallback+0x2c>)
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d006      	beq.n	8002e48 <HAL_UART_RxCpltCallback+0x1c>
 8002e3a:	1d02      	adds	r2, r0, #4
 8002e3c:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002e3e:	2a00      	cmp	r2, #0
 8002e40:	d102      	bne.n	8002e48 <HAL_UART_RxCpltCallback+0x1c>
  {
    RxCpltCallback(&charRx, 1, 0);
 8002e42:	2101      	movs	r1, #1
 8002e44:	0028      	movs	r0, r5
 8002e46:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(UartHandle, &charRx, 1);
 8002e48:	0029      	movs	r1, r5
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	0020      	movs	r0, r4
 8002e4e:	f002 fea5 	bl	8005b9c <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002e52:	bd70      	pop	{r4, r5, r6, pc}
 8002e54:	20000130 	.word	0x20000130
 8002e58:	200006a8 	.word	0x200006a8

08002e5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002e5c:	480d      	ldr	r0, [pc, #52]	; (8002e94 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002e5e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e60:	480d      	ldr	r0, [pc, #52]	; (8002e98 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e62:	490e      	ldr	r1, [pc, #56]	; (8002e9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e64:	4a0e      	ldr	r2, [pc, #56]	; (8002ea0 <LoopForever+0xe>)
  movs r3, #0
 8002e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e68:	e002      	b.n	8002e70 <LoopCopyDataInit>

08002e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e6e:	3304      	adds	r3, #4

08002e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e74:	d3f9      	bcc.n	8002e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e76:	4a0b      	ldr	r2, [pc, #44]	; (8002ea4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e78:	4c0b      	ldr	r4, [pc, #44]	; (8002ea8 <LoopForever+0x16>)
  movs r3, #0
 8002e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e7c:	e001      	b.n	8002e82 <LoopFillZerobss>

08002e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e80:	3204      	adds	r2, #4

08002e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e84:	d3fb      	bcc.n	8002e7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002e86:	f000 faaf 	bl	80033e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e8a:	f004 fe6b 	bl	8007b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e8e:	f7ff f9af 	bl	80021f0 <main>

08002e92 <LoopForever>:

LoopForever:
    b LoopForever
 8002e92:	e7fe      	b.n	8002e92 <LoopForever>
   ldr   r0, =_estack
 8002e94:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e9c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002ea0:	0800906c 	.word	0x0800906c
  ldr r2, =_sbss
 8002ea4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002ea8:	200008a0 	.word	0x200008a0

08002eac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002eac:	e7fe      	b.n	8002eac <ADC1_COMP_IRQHandler>

08002eae <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002eae:	b570      	push	{r4, r5, r6, lr}
 8002eb0:	000e      	movs	r6, r1
 8002eb2:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb4:	2500      	movs	r5, #0
 8002eb6:	42a5      	cmp	r5, r4
 8002eb8:	db01      	blt.n	8002ebe <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8002eba:	0020      	movs	r0, r4
 8002ebc:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002ebe:	e000      	b.n	8002ec2 <_read+0x14>
 8002ec0:	bf00      	nop
 8002ec2:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec4:	3501      	adds	r5, #1
 8002ec6:	e7f6      	b.n	8002eb6 <_read+0x8>

08002ec8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ec8:	b570      	push	{r4, r5, r6, lr}
 8002eca:	000e      	movs	r6, r1
 8002ecc:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ece:	2500      	movs	r5, #0
 8002ed0:	42a5      	cmp	r5, r4
 8002ed2:	db01      	blt.n	8002ed8 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8002ed4:	0020      	movs	r0, r4
 8002ed6:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8002ed8:	5d70      	ldrb	r0, [r6, r5]
 8002eda:	e000      	b.n	8002ede <_write+0x16>
 8002edc:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ede:	3501      	adds	r5, #1
 8002ee0:	e7f6      	b.n	8002ed0 <_write+0x8>
	...

08002ee4 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002ee4:	4a0a      	ldr	r2, [pc, #40]	; (8002f10 <_sbrk+0x2c>)
{
 8002ee6:	0003      	movs	r3, r0
	if (heap_end == 0)
 8002ee8:	6811      	ldr	r1, [r2, #0]
{
 8002eea:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8002eec:	2900      	cmp	r1, #0
 8002eee:	d101      	bne.n	8002ef4 <_sbrk+0x10>
		heap_end = &end;
 8002ef0:	4908      	ldr	r1, [pc, #32]	; (8002f14 <_sbrk+0x30>)
 8002ef2:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002ef4:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8002ef6:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002ef8:	18c3      	adds	r3, r0, r3
 8002efa:	428b      	cmp	r3, r1
 8002efc:	d906      	bls.n	8002f0c <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002efe:	f004 fe2b 	bl	8007b58 <__errno>
 8002f02:	230c      	movs	r3, #12
 8002f04:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002f06:	2001      	movs	r0, #1
 8002f08:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8002f0a:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8002f0c:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8002f0e:	e7fc      	b.n	8002f0a <_sbrk+0x26>
 8002f10:	20000138 	.word	0x20000138
 8002f14:	200008a0 	.word	0x200008a0

08002f18 <_close>:

int _close(int file)
{
	return -1;
 8002f18:	2001      	movs	r0, #1
}
 8002f1a:	4240      	negs	r0, r0
 8002f1c:	4770      	bx	lr

08002f1e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002f1e:	2380      	movs	r3, #128	; 0x80
 8002f20:	019b      	lsls	r3, r3, #6
	return 0;
}
 8002f22:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8002f24:	604b      	str	r3, [r1, #4]
}
 8002f26:	4770      	bx	lr

08002f28 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002f28:	2001      	movs	r0, #1
 8002f2a:	4770      	bx	lr

08002f2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	4770      	bx	lr

08002f30 <BSP_SPI2_SendRecv>:
  */
int32_t BSP_SPI2_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;

  if (HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8002f30:	23fa      	movs	r3, #250	; 0xfa
{
 8002f32:	b513      	push	{r0, r1, r4, lr}
  if (HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8002f34:	009b      	lsls	r3, r3, #2
{
 8002f36:	0014      	movs	r4, r2
  if (HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	0013      	movs	r3, r2
 8002f3c:	000a      	movs	r2, r1
 8002f3e:	0001      	movs	r1, r0
 8002f40:	4804      	ldr	r0, [pc, #16]	; (8002f54 <BSP_SPI2_SendRecv+0x24>)
 8002f42:	f002 f859 	bl	8004ff8 <HAL_SPI_TransmitReceive>
 8002f46:	2800      	cmp	r0, #0
 8002f48:	d101      	bne.n	8002f4e <BSP_SPI2_SendRecv+0x1e>
  {
    ret = len;
 8002f4a:	0020      	movs	r0, r4
  }
  return ret;
}
 8002f4c:	bd16      	pop	{r1, r2, r4, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002f4e:	2006      	movs	r0, #6
 8002f50:	4240      	negs	r0, r0
  return ret;
 8002f52:	e7fb      	b.n	8002f4c <BSP_SPI2_SendRecv+0x1c>
 8002f54:	200006ac 	.word	0x200006ac

08002f58 <MX_SPI2_Init>:
/* SPI2 init function */

__weak HAL_StatusTypeDef MX_SPI2_Init(SPI_HandleTypeDef *hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI2;
 8002f58:	4b14      	ldr	r3, [pc, #80]	; (8002fac <MX_SPI2_Init+0x54>)
{
 8002f5a:	b570      	push	{r4, r5, r6, lr}
  hspi->Instance = SPI2;
 8002f5c:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002f5e:	2382      	movs	r3, #130	; 0x82
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002f60:	2500      	movs	r5, #0
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	6043      	str	r3, [r0, #4]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 8002f66:	33fc      	adds	r3, #252	; 0xfc
 8002f68:	6183      	str	r3, [r0, #24]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002f6a:	6085      	str	r5, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8002f6c:	60c5      	str	r5, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f6e:	6105      	str	r5, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f70:	6145      	str	r5, [r0, #20]
{
 8002f72:	0004      	movs	r4, r0
  /* SPI2 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8002f74:	f001 faea 	bl	800454c <HAL_RCC_GetPCLK2Freq>
  /* USER CODE END SPI2_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
  uint32_t divisor = 0;
 8002f78:	002b      	movs	r3, r5
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 8002f7a:	4a0d      	ldr	r2, [pc, #52]	; (8002fb0 <MX_SPI2_Init+0x58>)
  {
    presc = baudrate[divisor];
 8002f7c:	490d      	ldr	r1, [pc, #52]	; (8002fb4 <MX_SPI2_Init+0x5c>)
  while (spi_clk > baudrate_mbps)
 8002f7e:	4290      	cmp	r0, r2
 8002f80:	d80d      	bhi.n	8002f9e <MX_SPI2_Init+0x46>
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f82:	2300      	movs	r3, #0
 8002f84:	6223      	str	r3, [r4, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002f86:	6263      	str	r3, [r4, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f88:	62a3      	str	r3, [r4, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8002f8a:	3307      	adds	r3, #7
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8002f8c:	61e5      	str	r5, [r4, #28]
  hspi->Init.CRCPolynomial = 7;
 8002f8e:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8002f90:	0020      	movs	r0, r4
 8002f92:	f001 ffcf 	bl	8004f34 <HAL_SPI_Init>
 8002f96:	1e43      	subs	r3, r0, #1
 8002f98:	4198      	sbcs	r0, r3
  return ret;
 8002f9a:	b2c0      	uxtb	r0, r0
}
 8002f9c:	bd70      	pop	{r4, r5, r6, pc}
    presc = baudrate[divisor];
 8002f9e:	009d      	lsls	r5, r3, #2
    if (++divisor > 7)
 8002fa0:	3301      	adds	r3, #1
    presc = baudrate[divisor];
 8002fa2:	586d      	ldr	r5, [r5, r1]
    if (++divisor > 7)
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d0ec      	beq.n	8002f82 <MX_SPI2_Init+0x2a>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 8002fa8:	0840      	lsrs	r0, r0, #1
 8002faa:	e7e8      	b.n	8002f7e <MX_SPI2_Init+0x26>
 8002fac:	40003800 	.word	0x40003800
 8002fb0:	00989680 	.word	0x00989680
 8002fb4:	08008bdc 	.word	0x08008bdc

08002fb8 <BSP_SPI2_Init>:
{
 8002fb8:	b570      	push	{r4, r5, r6, lr}
  hspi2.Instance  = SPI2;
 8002fba:	4d1a      	ldr	r5, [pc, #104]	; (8003024 <BSP_SPI2_Init+0x6c>)
 8002fbc:	4b1a      	ldr	r3, [pc, #104]	; (8003028 <BSP_SPI2_Init+0x70>)
  if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_RESET)
 8002fbe:	0028      	movs	r0, r5
{
 8002fc0:	b086      	sub	sp, #24
  hspi2.Instance  = SPI2;
 8002fc2:	602b      	str	r3, [r5, #0]
  if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_RESET)
 8002fc4:	f002 f90d 	bl	80051e2 <HAL_SPI_GetState>
 8002fc8:	1e04      	subs	r4, r0, #0
 8002fca:	d002      	beq.n	8002fd2 <BSP_SPI2_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8002fcc:	2000      	movs	r0, #0
}
 8002fce:	b006      	add	sp, #24
 8002fd0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_RCC_SPI2_CLK_ENABLE();
 8002fd2:	2680      	movs	r6, #128	; 0x80
 8002fd4:	4a15      	ldr	r2, [pc, #84]	; (800302c <BSP_SPI2_Init+0x74>)
 8002fd6:	01f6      	lsls	r6, r6, #7
 8002fd8:	6b93      	ldr	r3, [r2, #56]	; 0x38
  HAL_GPIO_Init(BUS_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002fda:	a901      	add	r1, sp, #4
  __HAL_RCC_SPI2_CLK_ENABLE();
 8002fdc:	4333      	orrs	r3, r6
 8002fde:	6393      	str	r3, [r2, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = BUS_SPI2_MOSI_GPIO_PIN;
 8002fe8:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fea:	9003      	str	r0, [sp, #12]
  GPIO_InitStruct.Pin = BUS_SPI2_MOSI_GPIO_PIN;
 8002fec:	021b      	lsls	r3, r3, #8
  GPIO_InitStruct.Alternate = BUS_SPI2_MOSI_GPIO_AF;
 8002fee:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(BUS_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002ff0:	480f      	ldr	r0, [pc, #60]	; (8003030 <BSP_SPI2_Init+0x78>)
  GPIO_InitStruct.Pin = BUS_SPI2_MOSI_GPIO_PIN;
 8002ff2:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002ff4:	f000 fbf0 	bl	80037d8 <HAL_GPIO_Init>
  HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002ff8:	480d      	ldr	r0, [pc, #52]	; (8003030 <BSP_SPI2_Init+0x78>)
 8002ffa:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = BUS_SPI2_MISO_GPIO_AF;
 8002ffc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = BUS_SPI2_MISO_GPIO_PIN;
 8002ffe:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003000:	f000 fbea 	bl	80037d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 8003004:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(BUS_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003006:	480a      	ldr	r0, [pc, #40]	; (8003030 <BSP_SPI2_Init+0x78>)
  GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 8003008:	019b      	lsls	r3, r3, #6
  HAL_GPIO_Init(BUS_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 800300a:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = BUS_SPI2_SCK_GPIO_AF;
 800300c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 800300e:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003010:	f000 fbe2 	bl	80037d8 <HAL_GPIO_Init>
    if (MX_SPI2_Init(&hspi2) != HAL_OK)
 8003014:	0028      	movs	r0, r5
 8003016:	f7ff ff9f 	bl	8002f58 <MX_SPI2_Init>
 800301a:	2800      	cmp	r0, #0
 800301c:	d0d6      	beq.n	8002fcc <BSP_SPI2_Init+0x14>
      ret = BSP_ERROR_BUS_FAILURE;
 800301e:	2008      	movs	r0, #8
 8003020:	4240      	negs	r0, r0
  return ret;
 8003022:	e7d4      	b.n	8002fce <BSP_SPI2_Init+0x16>
 8003024:	200006ac 	.word	0x200006ac
 8003028:	40003800 	.word	0x40003800
 800302c:	40021000 	.word	0x40021000
 8003030:	50000400 	.word	0x50000400

08003034 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003034:	b500      	push	{lr}
 8003036:	b08b      	sub	sp, #44	; 0x2c
 8003038:	2803      	cmp	r0, #3
 800303a:	d80c      	bhi.n	8003056 <BSP_LED_Init+0x22>
 800303c:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <BSP_LED_Init+0x78>)
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800303e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003040:	f7fd f874 	bl	800012c <__gnu_thumb1_case_uqi>
 8003044:	2b231b02 	.word	0x2b231b02
 8003048:	2102      	movs	r1, #2
 800304a:	430a      	orrs	r2, r1
 800304c:	62da      	str	r2, [r3, #44]	; 0x2c
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	400b      	ands	r3, r1
 8003052:	9301      	str	r3, [sp, #4]
 8003054:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8003056:	4b16      	ldr	r3, [pc, #88]	; (80030b0 <BSP_LED_Init+0x7c>)
 8003058:	0042      	lsls	r2, r0, #1
 800305a:	5ad3      	ldrh	r3, [r2, r3]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800305c:	0080      	lsls	r0, r0, #2
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800305e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003060:	2301      	movs	r3, #1
 8003062:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003064:	2300      	movs	r3, #0
 8003066:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003068:	3303      	adds	r3, #3
 800306a:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800306c:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <BSP_LED_Init+0x80>)
 800306e:	a905      	add	r1, sp, #20
 8003070:	58c0      	ldr	r0, [r0, r3]
 8003072:	f000 fbb1 	bl	80037d8 <HAL_GPIO_Init>
}
 8003076:	b00b      	add	sp, #44	; 0x2c
 8003078:	bd00      	pop	{pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 800307a:	2101      	movs	r1, #1
 800307c:	430a      	orrs	r2, r1
 800307e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003082:	400b      	ands	r3, r1
 8003084:	9302      	str	r3, [sp, #8]
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	e7e5      	b.n	8003056 <BSP_LED_Init+0x22>
 800308a:	2102      	movs	r1, #2
 800308c:	430a      	orrs	r2, r1
 800308e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003092:	400b      	ands	r3, r1
 8003094:	9303      	str	r3, [sp, #12]
 8003096:	9b03      	ldr	r3, [sp, #12]
 8003098:	e7dd      	b.n	8003056 <BSP_LED_Init+0x22>
 800309a:	2102      	movs	r1, #2
 800309c:	430a      	orrs	r2, r1
 800309e:	62da      	str	r2, [r3, #44]	; 0x2c
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	400b      	ands	r3, r1
 80030a4:	9304      	str	r3, [sp, #16]
 80030a6:	9b04      	ldr	r3, [sp, #16]
 80030a8:	e7d5      	b.n	8003056 <BSP_LED_Init+0x22>
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	40021000 	.word	0x40021000
 80030b0:	08008bfc 	.word	0x08008bfc
 80030b4:	20000004 	.word	0x20000004

080030b8 <BSP_LED_Off>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80030b8:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <BSP_LED_Off+0x18>)
{
 80030ba:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80030bc:	0042      	lsls	r2, r0, #1
 80030be:	5ad1      	ldrh	r1, [r2, r3]
 80030c0:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <BSP_LED_Off+0x1c>)
 80030c2:	0080      	lsls	r0, r0, #2
 80030c4:	2200      	movs	r2, #0
 80030c6:	58c0      	ldr	r0, [r0, r3]
 80030c8:	f000 fccc 	bl	8003a64 <HAL_GPIO_WritePin>
}
 80030cc:	bd10      	pop	{r4, pc}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	08008bfc 	.word	0x08008bfc
 80030d4:	20000004 	.word	0x20000004

080030d8 <BSP_LED_Toggle>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80030d8:	4b04      	ldr	r3, [pc, #16]	; (80030ec <BSP_LED_Toggle+0x14>)
{
 80030da:	b510      	push	{r4, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80030dc:	0042      	lsls	r2, r0, #1
 80030de:	5ad1      	ldrh	r1, [r2, r3]
 80030e0:	4b03      	ldr	r3, [pc, #12]	; (80030f0 <BSP_LED_Toggle+0x18>)
 80030e2:	0080      	lsls	r0, r0, #2
 80030e4:	58c0      	ldr	r0, [r0, r3]
 80030e6:	f000 fcc3 	bl	8003a70 <HAL_GPIO_TogglePin>
}
 80030ea:	bd10      	pop	{r4, pc}
 80030ec:	08008bfc 	.word	0x08008bfc
 80030f0:	20000004 	.word	0x20000004

080030f4 <SX126x_RADIO_IoInit>:
static void SX126x_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle);
static void SX126x_RADIO_SPI_IoDeInit(void);
/* Exported functions --------------------------------------------------------*/

void SX126x_RADIO_IoInit(void)
{
 80030f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef initStruct = {0};
 80030f6:	2600      	movs	r6, #0
  SPI_HandleTypeDef dummy_hspi;

  /* DIO IO Init */

//   Set DioIrqHandler port in IT_RISING mode
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 80030f8:	2202      	movs	r2, #2
{
 80030fa:	b093      	sub	sp, #76	; 0x4c
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 80030fc:	4c46      	ldr	r4, [pc, #280]	; (8003218 <SX126x_RADIO_IoInit+0x124>)
  GPIO_InitTypeDef initStruct = {0};
 80030fe:	960c      	str	r6, [sp, #48]	; 0x30
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8003100:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Mode = GPIO_MODE_IT_RISING;
  initStruct.Pull = GPIO_NOPULL;
  initStruct.Speed = GPIO_SPEED_HIGH;
  initStruct.Pin = RADIO_DIO_1_PIN;
 8003102:	2501      	movs	r5, #1
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8003104:	4313      	orrs	r3, r2
 8003106:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003108:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 800310a:	4f44      	ldr	r7, [pc, #272]	; (800321c <SX126x_RADIO_IoInit+0x128>)
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 800310c:	4013      	ands	r3, r2
 800310e:	9301      	str	r3, [sp, #4]
 8003110:	9b01      	ldr	r3, [sp, #4]
  initStruct.Mode = GPIO_MODE_IT_RISING;
 8003112:	4b43      	ldr	r3, [pc, #268]	; (8003220 <SX126x_RADIO_IoInit+0x12c>)
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 8003114:	0038      	movs	r0, r7
  initStruct.Mode = GPIO_MODE_IT_RISING;
 8003116:	9309      	str	r3, [sp, #36]	; 0x24
  initStruct.Speed = GPIO_SPEED_HIGH;
 8003118:	2303      	movs	r3, #3
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 800311a:	a908      	add	r1, sp, #32
  initStruct.Speed = GPIO_SPEED_HIGH;
 800311c:	930b      	str	r3, [sp, #44]	; 0x2c
  initStruct.Pull = GPIO_NOPULL;
 800311e:	960a      	str	r6, [sp, #40]	; 0x28
  initStruct.Pin = RADIO_DIO_1_PIN;
 8003120:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 8003122:	f000 fb59 	bl	80037d8 <HAL_GPIO_Init>

  /* Radio IO Init */
  RADIO_DEV_SEL_CLK_ENABLE();
 8003126:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Mode = GPIO_MODE_INPUT;
  initStruct.Pull = GPIO_NOPULL;
  //initStruct.Pin = DEVICE_SEL_PIN;
  //HAL_GPIO_Init(DEVICE_SEL_PORT, &initStruct);
  initStruct.Pin = RADIO_BUSY_PIN;
  HAL_GPIO_Init(RADIO_BUSY_PORT, &initStruct);
 8003128:	a908      	add	r1, sp, #32
  RADIO_DEV_SEL_CLK_ENABLE();
 800312a:	432b      	orrs	r3, r5
 800312c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800312e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_BUSY_PORT, &initStruct);
 8003130:	483c      	ldr	r0, [pc, #240]	; (8003224 <SX126x_RADIO_IoInit+0x130>)
  RADIO_DEV_SEL_CLK_ENABLE();
 8003132:	402b      	ands	r3, r5
 8003134:	9302      	str	r3, [sp, #8]
 8003136:	9b02      	ldr	r3, [sp, #8]
  RADIO_BUSY_CLK_ENABLE();
 8003138:	2304      	movs	r3, #4
 800313a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800313c:	431a      	orrs	r2, r3
 800313e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8003140:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  initStruct.Pin = RADIO_BUSY_PIN;
 8003142:	9308      	str	r3, [sp, #32]
  RADIO_BUSY_CLK_ENABLE();
 8003144:	401a      	ands	r2, r3
 8003146:	9203      	str	r2, [sp, #12]
 8003148:	9a03      	ldr	r2, [sp, #12]
  initStruct.Mode = GPIO_MODE_INPUT;
 800314a:	9609      	str	r6, [sp, #36]	; 0x24
  initStruct.Pull = GPIO_NOPULL;
 800314c:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(RADIO_BUSY_PORT, &initStruct);
 800314e:	f000 fb43 	bl	80037d8 <HAL_GPIO_Init>

  /* Antenna IO Init */
  RADIO_ANT_SWITCH_RX_CLK_ENABLE();
  initStruct.Pull = GPIO_NOPULL;
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
  initStruct.Pin = RADIO_ANT_SWITCH_RX_PIN;
 8003152:	2180      	movs	r1, #128	; 0x80
  RADIO_ANT_SWITCH_RX_CLK_ENABLE();
 8003154:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_ANT_SWITCH_RX_PORT, &initStruct);
 8003156:	a808      	add	r0, sp, #32
  RADIO_ANT_SWITCH_RX_CLK_ENABLE();
 8003158:	432b      	orrs	r3, r5
 800315a:	62e3      	str	r3, [r4, #44]	; 0x2c
  initStruct.Pin = RADIO_ANT_SWITCH_RX_PIN;
 800315c:	0209      	lsls	r1, r1, #8
  RADIO_ANT_SWITCH_RX_CLK_ENABLE();
 800315e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Pin = RADIO_ANT_SWITCH_RX_PIN;
 8003160:	9108      	str	r1, [sp, #32]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_RX_PORT, &initStruct);
 8003162:	0001      	movs	r1, r0
 8003164:	20a0      	movs	r0, #160	; 0xa0
  RADIO_ANT_SWITCH_RX_CLK_ENABLE();
 8003166:	402b      	ands	r3, r5
 8003168:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_RX_PORT, &initStruct);
 800316a:	05c0      	lsls	r0, r0, #23
  RADIO_ANT_SWITCH_RX_CLK_ENABLE();
 800316c:	9b04      	ldr	r3, [sp, #16]
  initStruct.Pull = GPIO_NOPULL;
 800316e:	960a      	str	r6, [sp, #40]	; 0x28
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003170:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(RADIO_ANT_SWITCH_RX_PORT, &initStruct);
 8003172:	f000 fb31 	bl	80037d8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_ANT_SWITCH_RX_PORT, RADIO_ANT_SWITCH_RX_PIN, GPIO_PIN_RESET);
 8003176:	2180      	movs	r1, #128	; 0x80
 8003178:	20a0      	movs	r0, #160	; 0xa0
 800317a:	0032      	movs	r2, r6
 800317c:	0209      	lsls	r1, r1, #8
 800317e:	05c0      	lsls	r0, r0, #23
 8003180:	f000 fc70 	bl	8003a64 <HAL_GPIO_WritePin>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8003184:	2202      	movs	r2, #2
 8003186:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8003188:	2180      	movs	r1, #128	; 0x80
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 800318a:	4313      	orrs	r3, r2
 800318c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800318e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8003190:	0209      	lsls	r1, r1, #8
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8003192:	4013      	ands	r3, r2
 8003194:	9305      	str	r3, [sp, #20]
 8003196:	9b05      	ldr	r3, [sp, #20]
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8003198:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800319a:	0038      	movs	r0, r7
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 800319c:	4313      	orrs	r3, r2
 800319e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80031a2:	4013      	ands	r3, r2
 80031a4:	9306      	str	r3, [sp, #24]
 80031a6:	9b06      	ldr	r3, [sp, #24]
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 80031a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80031aa:	4313      	orrs	r3, r2
 80031ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 80031b0:	910d      	str	r1, [sp, #52]	; 0x34
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 80031b2:	4013      	ands	r3, r2
 80031b4:	9307      	str	r3, [sp, #28]
 80031b6:	9b07      	ldr	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b8:	2303      	movs	r3, #3
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80031ba:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031bc:	920e      	str	r2, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80031be:	920f      	str	r2, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031c0:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 80031c2:	9611      	str	r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80031c4:	f000 fb08 	bl	80037d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 80031c8:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80031ca:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 80031cc:	01db      	lsls	r3, r3, #7
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80031ce:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 80031d0:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 80031d2:	9611      	str	r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80031d4:	f000 fb00 	bl	80037d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 80031d8:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80031da:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 80031dc:	019b      	lsls	r3, r3, #6
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80031de:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 80031e0:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 80031e2:	9611      	str	r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80031e4:	f000 faf8 	bl	80037d8 <HAL_GPIO_Init>
  RADIO_NSS_CLK_ENABLE();
 80031e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT,  &initStruct);
 80031ea:	0038      	movs	r0, r7
  RADIO_NSS_CLK_ENABLE();
 80031ec:	432b      	orrs	r3, r5
 80031ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Pin = RADIO_NSS_PIN;
 80031f2:	2480      	movs	r4, #128	; 0x80
  RADIO_NSS_CLK_ENABLE();
 80031f4:	402b      	ands	r3, r5
 80031f6:	930d      	str	r3, [sp, #52]	; 0x34
  initStruct.Pin = RADIO_NSS_PIN;
 80031f8:	0164      	lsls	r4, r4, #5
  HAL_GPIO_Init(RADIO_NSS_PORT,  &initStruct);
 80031fa:	a908      	add	r1, sp, #32
  RADIO_NSS_CLK_ENABLE();
 80031fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031fe:	9509      	str	r5, [sp, #36]	; 0x24
  initStruct.Pull = GPIO_NOPULL;
 8003200:	960a      	str	r6, [sp, #40]	; 0x28
  initStruct.Pin = RADIO_NSS_PIN;
 8003202:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(RADIO_NSS_PORT,  &initStruct);
 8003204:	f000 fae8 	bl	80037d8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN,  GPIO_PIN_SET);
 8003208:	002a      	movs	r2, r5
 800320a:	0021      	movs	r1, r4
 800320c:	0038      	movs	r0, r7
 800320e:	f000 fc29 	bl	8003a64 <HAL_GPIO_WritePin>
}
 8003212:	b013      	add	sp, #76	; 0x4c
 8003214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	40021000 	.word	0x40021000
 800321c:	50000400 	.word	0x50000400
 8003220:	10110000 	.word	0x10110000
 8003224:	50000800 	.word	0x50000800

08003228 <SX126x_RADIO_IoDeInit>:
{
 8003228:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800322a:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 800322c:	2780      	movs	r7, #128	; 0x80
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 800322e:	2680      	movs	r6, #128	; 0x80
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8003230:	2580      	movs	r5, #128	; 0x80
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003232:	4c14      	ldr	r4, [pc, #80]	; (8003284 <SX126x_RADIO_IoDeInit+0x5c>)
{
 8003234:	b087      	sub	sp, #28
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003236:	0020      	movs	r0, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003238:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 800323a:	023f      	lsls	r7, r7, #8
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800323c:	18db      	adds	r3, r3, r3
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800323e:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003240:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8003242:	01f6      	lsls	r6, r6, #7
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8003244:	9701      	str	r7, [sp, #4]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003246:	f000 fac7 	bl	80037d8 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 800324a:	0020      	movs	r0, r4
 800324c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 800324e:	01ad      	lsls	r5, r5, #6
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8003250:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003252:	f000 fac1 	bl	80037d8 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003256:	0020      	movs	r0, r4
 8003258:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 800325a:	9501      	str	r5, [sp, #4]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 800325c:	f000 fabc 	bl	80037d8 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 8003260:	0039      	movs	r1, r7
 8003262:	0020      	movs	r0, r4
 8003264:	2200      	movs	r2, #0
 8003266:	f000 fbfd 	bl	8003a64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 800326a:	0031      	movs	r1, r6
 800326c:	0020      	movs	r0, r4
 800326e:	2200      	movs	r2, #0
 8003270:	f000 fbf8 	bl	8003a64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 8003274:	2200      	movs	r2, #0
 8003276:	0029      	movs	r1, r5
 8003278:	0020      	movs	r0, r4
 800327a:	f000 fbf3 	bl	8003a64 <HAL_GPIO_WritePin>
}
 800327e:	b007      	add	sp, #28
 8003280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	50000400 	.word	0x50000400

08003288 <SX126x_RADIO_IoIrqInit>:
  HAL_EXTI_GetHandle(&hRADIO_DIO_exti[0], RADIO_DIO_1_EXTI_LINE);
 8003288:	21c0      	movs	r1, #192	; 0xc0
{
 800328a:	b570      	push	{r4, r5, r6, lr}
 800328c:	0004      	movs	r4, r0
  HAL_EXTI_GetHandle(&hRADIO_DIO_exti[0], RADIO_DIO_1_EXTI_LINE);
 800328e:	4d09      	ldr	r5, [pc, #36]	; (80032b4 <SX126x_RADIO_IoIrqInit+0x2c>)
 8003290:	04c9      	lsls	r1, r1, #19
 8003292:	0028      	movs	r0, r5
 8003294:	f000 fa87 	bl	80037a6 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[0], HAL_EXTI_COMMON_CB_ID, irqHandlers[0]);
 8003298:	0028      	movs	r0, r5
 800329a:	6822      	ldr	r2, [r4, #0]
 800329c:	2100      	movs	r1, #0
 800329e:	f000 fa7b 	bl	8003798 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(RADIO_DIO_1_IRQn, RADIO_DIO_1_IT_PRIO, 0x00);
 80032a2:	2200      	movs	r2, #0
 80032a4:	2005      	movs	r0, #5
 80032a6:	0011      	movs	r1, r2
 80032a8:	f000 f8ec 	bl	8003484 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RADIO_DIO_1_IRQn);
 80032ac:	2005      	movs	r0, #5
 80032ae:	f000 f913 	bl	80034d8 <HAL_NVIC_EnableIRQ>
}
 80032b2:	bd70      	pop	{r4, r5, r6, pc}
 80032b4:	20000704 	.word	0x20000704

080032b8 <SX126x_RADIO_GetWakeUpTime>:
}
 80032b8:	2005      	movs	r0, #5
 80032ba:	4770      	bx	lr

080032bc <SX126x_RADIO_Reset>:
{
 80032bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef initStruct = { 0 };
 80032be:	2714      	movs	r7, #20
{
 80032c0:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct = { 0 };
 80032c2:	003a      	movs	r2, r7
 80032c4:	2100      	movs	r1, #0
 80032c6:	a801      	add	r0, sp, #4
 80032c8:	f004 fc79 	bl	8007bbe <memset>
  RADIO_RESET_CLK_ENABLE();
 80032cc:	2004      	movs	r0, #4
 80032ce:	4a18      	ldr	r2, [pc, #96]	; (8003330 <SX126x_RADIO_Reset+0x74>)
  initStruct.Pull = GPIO_NOPULL;
 80032d0:	2600      	movs	r6, #0
  RADIO_RESET_CLK_ENABLE();
 80032d2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  initStruct.Pin = RADIO_RESET_PIN;
 80032d4:	2502      	movs	r5, #2
  RADIO_RESET_CLK_ENABLE();
 80032d6:	4301      	orrs	r1, r0
 80032d8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80032da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80032dc:	4c15      	ldr	r4, [pc, #84]	; (8003334 <SX126x_RADIO_Reset+0x78>)
  RADIO_RESET_CLK_ENABLE();
 80032de:	4003      	ands	r3, r0
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	9b00      	ldr	r3, [sp, #0]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032e4:	2301      	movs	r3, #1
  HAL_Delay(10);
 80032e6:	3006      	adds	r0, #6
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032e8:	9302      	str	r3, [sp, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80032ea:	3302      	adds	r3, #2
 80032ec:	9304      	str	r3, [sp, #16]
  initStruct.Pull = GPIO_NOPULL;
 80032ee:	9603      	str	r6, [sp, #12]
  HAL_Delay(10);
 80032f0:	f7ff fba6 	bl	8002a40 <HAL_Delay>
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80032f4:	0020      	movs	r0, r4
 80032f6:	a901      	add	r1, sp, #4
  initStruct.Pin = RADIO_RESET_PIN;
 80032f8:	9501      	str	r5, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80032fa:	f000 fa6d 	bl	80037d8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 80032fe:	0032      	movs	r2, r6
 8003300:	0029      	movs	r1, r5
 8003302:	0020      	movs	r0, r4
 8003304:	f000 fbae 	bl	8003a64 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8003308:	0038      	movs	r0, r7
 800330a:	f7ff fb99 	bl	8002a40 <HAL_Delay>
  initStruct.Mode = GPIO_MODE_ANALOG;
 800330e:	2303      	movs	r3, #3
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8003310:	0020      	movs	r0, r4
 8003312:	a901      	add	r1, sp, #4
  initStruct.Mode = GPIO_MODE_ANALOG;
 8003314:	9302      	str	r3, [sp, #8]
  initStruct.Pin = RADIO_RESET_PIN;
 8003316:	9501      	str	r5, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8003318:	f000 fa5e 	bl	80037d8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);  // internal pull-up
 800331c:	0032      	movs	r2, r6
 800331e:	0029      	movs	r1, r5
 8003320:	0020      	movs	r0, r4
 8003322:	f000 fb9f 	bl	8003a64 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8003326:	200a      	movs	r0, #10
 8003328:	f7ff fb8a 	bl	8002a40 <HAL_Delay>
}
 800332c:	b007      	add	sp, #28
 800332e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003330:	40021000 	.word	0x40021000
 8003334:	50000400 	.word	0x50000400

08003338 <SX126x_RADIO_WaitOnBusy>:
{
 8003338:	b510      	push	{r4, lr}
  while (HAL_GPIO_ReadPin(RADIO_BUSY_PORT, RADIO_BUSY_PIN) == 1);
 800333a:	2104      	movs	r1, #4
 800333c:	4802      	ldr	r0, [pc, #8]	; (8003348 <SX126x_RADIO_WaitOnBusy+0x10>)
 800333e:	f000 fb8b 	bl	8003a58 <HAL_GPIO_ReadPin>
 8003342:	2801      	cmp	r0, #1
 8003344:	d0f9      	beq.n	800333a <SX126x_RADIO_WaitOnBusy+0x2>
}
 8003346:	bd10      	pop	{r4, pc}
 8003348:	50000800 	.word	0x50000800

0800334c <SX126x_RADIO_ChipSelect>:
{
 800334c:	0002      	movs	r2, r0
 800334e:	b510      	push	{r4, lr}
  if (state == 0)
 8003350:	2800      	cmp	r0, #0
 8003352:	d105      	bne.n	8003360 <SX126x_RADIO_ChipSelect+0x14>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8003354:	2180      	movs	r1, #128	; 0x80
 8003356:	4803      	ldr	r0, [pc, #12]	; (8003364 <SX126x_RADIO_ChipSelect+0x18>)
 8003358:	0149      	lsls	r1, r1, #5
 800335a:	f000 fb83 	bl	8003a64 <HAL_GPIO_WritePin>
}
 800335e:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8003360:	2201      	movs	r2, #1
 8003362:	e7f7      	b.n	8003354 <SX126x_RADIO_ChipSelect+0x8>
 8003364:	50000400 	.word	0x50000400

08003368 <SX126x_RADIO_GetPaSelect>:
}
 8003368:	2002      	movs	r0, #2
 800336a:	4770      	bx	lr

0800336c <SX126x_RADIO_SetAntSw>:
{
 800336c:	0002      	movs	r2, r0
 800336e:	b510      	push	{r4, lr}
  switch (state)
 8003370:	2800      	cmp	r0, #0
 8003372:	d106      	bne.n	8003382 <SX126x_RADIO_SetAntSw+0x16>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_RX_PORT, RADIO_ANT_SWITCH_RX_PIN, GPIO_PIN_SET);
 8003374:	2180      	movs	r1, #128	; 0x80
 8003376:	20a0      	movs	r0, #160	; 0xa0
 8003378:	0209      	lsls	r1, r1, #8
 800337a:	05c0      	lsls	r0, r0, #23
 800337c:	f000 fb72 	bl	8003a64 <HAL_GPIO_WritePin>
}
 8003380:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_RX_PORT, RADIO_ANT_SWITCH_RX_PIN, GPIO_PIN_SET);
 8003382:	2201      	movs	r2, #1
 8003384:	e7f6      	b.n	8003374 <SX126x_RADIO_SetAntSw+0x8>

08003386 <SX126x_RADIO_BoardIsTcxo>:
}
 8003386:	2001      	movs	r0, #1
 8003388:	4770      	bx	lr

0800338a <SX126x_RADIO_BoardSetLedTx>:
}
 800338a:	4770      	bx	lr

0800338c <SX126x_RADIO_BoardSetLedRx>:
 800338c:	4770      	bx	lr

0800338e <SX126x_RADIO_Bus_Init>:
{
 800338e:	b510      	push	{r4, lr}
  RADIO_SPI_Init();
 8003390:	f7ff fe12 	bl	8002fb8 <BSP_SPI2_Init>
}
 8003394:	bd10      	pop	{r4, pc}

08003396 <SX126x_RADIO_SendRecv>:
{
 8003396:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8003398:	240e      	movs	r4, #14
{
 800339a:	466b      	mov	r3, sp
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 800339c:	446c      	add	r4, sp
{
 800339e:	80d8      	strh	r0, [r3, #6]
 80033a0:	3306      	adds	r3, #6
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80033a2:	2201      	movs	r2, #1
 80033a4:	0021      	movs	r1, r4
 80033a6:	0018      	movs	r0, r3
 80033a8:	f7ff fdc2 	bl	8002f30 <BSP_SPI2_SendRecv>
  return rxData;
 80033ac:	8820      	ldrh	r0, [r4, #0]
}
 80033ae:	b004      	add	sp, #16
 80033b0:	bd10      	pop	{r4, pc}
	...

080033b4 <SX126x_RADIO_WakeUp>:
{
 80033b4:	b570      	push	{r4, r5, r6, lr}
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_RESET);
 80033b6:	2580      	movs	r5, #128	; 0x80
 80033b8:	4c0a      	ldr	r4, [pc, #40]	; (80033e4 <SX126x_RADIO_WakeUp+0x30>)
 80033ba:	016d      	lsls	r5, r5, #5
 80033bc:	0029      	movs	r1, r5
 80033be:	2200      	movs	r2, #0
 80033c0:	0020      	movs	r0, r4
 80033c2:	f000 fb4f 	bl	8003a64 <HAL_GPIO_WritePin>
  SX126x_RADIO_SendRecv(RADIO_GET_STATUS);
 80033c6:	20c0      	movs	r0, #192	; 0xc0
 80033c8:	f7ff ffe5 	bl	8003396 <SX126x_RADIO_SendRecv>
  SX126x_RADIO_SendRecv(0);
 80033cc:	2000      	movs	r0, #0
 80033ce:	f7ff ffe2 	bl	8003396 <SX126x_RADIO_SendRecv>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 80033d2:	0029      	movs	r1, r5
 80033d4:	2201      	movs	r2, #1
 80033d6:	0020      	movs	r0, r4
 80033d8:	f000 fb44 	bl	8003a64 <HAL_GPIO_WritePin>
  SX126x_RADIO_WaitOnBusy();
 80033dc:	f7ff ffac 	bl	8003338 <SX126x_RADIO_WaitOnBusy>
}
 80033e0:	bd70      	pop	{r4, r5, r6, pc}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	50000400 	.word	0x50000400

080033e8 <SystemInit>:
  * @retval None
  */
void SystemInit(void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80033e8:	2280      	movs	r2, #128	; 0x80
 80033ea:	4b10      	ldr	r3, [pc, #64]	; (800342c <SystemInit+0x44>)
 80033ec:	0052      	lsls	r2, r2, #1
 80033ee:	6819      	ldr	r1, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	490e      	ldr	r1, [pc, #56]	; (8003430 <SystemInit+0x48>)
 80033f8:	400a      	ands	r2, r1
 80033fa:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	490d      	ldr	r1, [pc, #52]	; (8003434 <SystemInit+0x4c>)
 8003400:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003402:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003404:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	438a      	bics	r2, r1
 800340a:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	490a      	ldr	r1, [pc, #40]	; (8003438 <SystemInit+0x50>)
 8003410:	400a      	ands	r2, r1
 8003412:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	4909      	ldr	r1, [pc, #36]	; (800343c <SystemInit+0x54>)
 8003418:	400a      	ands	r2, r1
 800341a:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800341c:	2200      	movs	r2, #0
 800341e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003420:	2280      	movs	r2, #128	; 0x80
 8003422:	4b07      	ldr	r3, [pc, #28]	; (8003440 <SystemInit+0x58>)
 8003424:	0512      	lsls	r2, r2, #20
 8003426:	609a      	str	r2, [r3, #8]
#endif
}
 8003428:	4770      	bx	lr
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	40021000 	.word	0x40021000
 8003430:	88ff400c 	.word	0x88ff400c
 8003434:	fef6fff6 	.word	0xfef6fff6
 8003438:	fffbffff 	.word	0xfffbffff
 800343c:	ff02ffff 	.word	0xff02ffff
 8003440:	e000ed00 	.word	0xe000ed00

08003444 <HAL_Init>:
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003444:	2302      	movs	r3, #2
 8003446:	4a08      	ldr	r2, [pc, #32]	; (8003468 <HAL_Init+0x24>)
{
 8003448:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800344a:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800344c:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800344e:	430b      	orrs	r3, r1
 8003450:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003452:	f7ff faef 	bl	8002a34 <HAL_InitTick>
 8003456:	1e04      	subs	r4, r0, #0
 8003458:	d103      	bne.n	8003462 <HAL_Init+0x1e>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800345a:	f7ff f9ff 	bl	800285c <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 800345e:	0020      	movs	r0, r4
 8003460:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8003462:	2401      	movs	r4, #1
 8003464:	e7fb      	b.n	800345e <HAL_Init+0x1a>
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	40022000 	.word	0x40022000

0800346c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800346c:	4a03      	ldr	r2, [pc, #12]	; (800347c <HAL_IncTick+0x10>)
 800346e:	4b04      	ldr	r3, [pc, #16]	; (8003480 <HAL_IncTick+0x14>)
 8003470:	6811      	ldr	r1, [r2, #0]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	185b      	adds	r3, r3, r1
 8003476:	6013      	str	r3, [r2, #0]
}
 8003478:	4770      	bx	lr
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	2000070c 	.word	0x2000070c
 8003480:	2000001c 	.word	0x2000001c

08003484 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003484:	b530      	push	{r4, r5, lr}
 8003486:	25ff      	movs	r5, #255	; 0xff
 8003488:	2403      	movs	r4, #3
 800348a:	002a      	movs	r2, r5
 800348c:	4004      	ands	r4, r0
 800348e:	00e4      	lsls	r4, r4, #3
 8003490:	40a2      	lsls	r2, r4
 8003492:	0189      	lsls	r1, r1, #6
 8003494:	4029      	ands	r1, r5
 8003496:	43d2      	mvns	r2, r2
 8003498:	40a1      	lsls	r1, r4
 800349a:	b2c3      	uxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800349c:	2800      	cmp	r0, #0
 800349e:	db0a      	blt.n	80034b6 <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034a0:	24c0      	movs	r4, #192	; 0xc0
 80034a2:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <HAL_NVIC_SetPriority+0x4c>)
 80034a4:	0880      	lsrs	r0, r0, #2
 80034a6:	0080      	lsls	r0, r0, #2
 80034a8:	18c0      	adds	r0, r0, r3
 80034aa:	00a4      	lsls	r4, r4, #2
 80034ac:	5903      	ldr	r3, [r0, r4]
 80034ae:	401a      	ands	r2, r3
 80034b0:	4311      	orrs	r1, r2
 80034b2:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80034b4:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034b6:	200f      	movs	r0, #15
 80034b8:	4003      	ands	r3, r0
 80034ba:	3b08      	subs	r3, #8
 80034bc:	4805      	ldr	r0, [pc, #20]	; (80034d4 <HAL_NVIC_SetPriority+0x50>)
 80034be:	089b      	lsrs	r3, r3, #2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	181b      	adds	r3, r3, r0
 80034c4:	69d8      	ldr	r0, [r3, #28]
 80034c6:	4002      	ands	r2, r0
 80034c8:	4311      	orrs	r1, r2
 80034ca:	61d9      	str	r1, [r3, #28]
 80034cc:	e7f2      	b.n	80034b4 <HAL_NVIC_SetPriority+0x30>
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	e000e100 	.word	0xe000e100
 80034d4:	e000ed00 	.word	0xe000ed00

080034d8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80034d8:	2800      	cmp	r0, #0
 80034da:	db05      	blt.n	80034e8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034dc:	231f      	movs	r3, #31
 80034de:	4018      	ands	r0, r3
 80034e0:	3b1e      	subs	r3, #30
 80034e2:	4083      	lsls	r3, r0
 80034e4:	4a01      	ldr	r2, [pc, #4]	; (80034ec <HAL_NVIC_EnableIRQ+0x14>)
 80034e6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80034e8:	4770      	bx	lr
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	e000e100 	.word	0xe000e100

080034f0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80034f0:	2800      	cmp	r0, #0
 80034f2:	db09      	blt.n	8003508 <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034f4:	231f      	movs	r3, #31
 80034f6:	4018      	ands	r0, r3
 80034f8:	3b1e      	subs	r3, #30
 80034fa:	4083      	lsls	r3, r0
 80034fc:	4a03      	ldr	r2, [pc, #12]	; (800350c <HAL_NVIC_DisableIRQ+0x1c>)
 80034fe:	67d3      	str	r3, [r2, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003500:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003504:	f3bf 8f6f 	isb	sy
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003508:	4770      	bx	lr
 800350a:	46c0      	nop			; (mov r8, r8)
 800350c:	e000e104 	.word	0xe000e104

08003510 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003512:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8003514:	2001      	movs	r0, #1
  if(hdma == NULL)
 8003516:	2c00      	cmp	r4, #0
 8003518:	d035      	beq.n	8003586 <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800351a:	6825      	ldr	r5, [r4, #0]
 800351c:	4b1a      	ldr	r3, [pc, #104]	; (8003588 <HAL_DMA_Init+0x78>)
 800351e:	2114      	movs	r1, #20
 8003520:	18e8      	adds	r0, r5, r3
 8003522:	f7fc fe21 	bl	8000168 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8003526:	4b19      	ldr	r3, [pc, #100]	; (800358c <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003528:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 800352a:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800352c:	2302      	movs	r3, #2
 800352e:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003530:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8003532:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003534:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003536:	4b16      	ldr	r3, [pc, #88]	; (8003590 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003538:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800353a:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 800353c:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800353e:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8003540:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003542:	433b      	orrs	r3, r7
 8003544:	6967      	ldr	r7, [r4, #20]
 8003546:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003548:	69a7      	ldr	r7, [r4, #24]
 800354a:	433b      	orrs	r3, r7
 800354c:	69e7      	ldr	r7, [r4, #28]
 800354e:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8003550:	6a27      	ldr	r7, [r4, #32]
 8003552:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8003554:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003556:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003558:	2380      	movs	r3, #128	; 0x80
 800355a:	01db      	lsls	r3, r3, #7
 800355c:	4299      	cmp	r1, r3
 800355e:	d00c      	beq.n	800357a <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003560:	251c      	movs	r5, #28
 8003562:	4028      	ands	r0, r5
 8003564:	3d0d      	subs	r5, #13
 8003566:	4085      	lsls	r5, r0
 8003568:	490a      	ldr	r1, [pc, #40]	; (8003594 <HAL_DMA_Init+0x84>)
 800356a:	680b      	ldr	r3, [r1, #0]
 800356c:	43ab      	bics	r3, r5
 800356e:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003570:	6863      	ldr	r3, [r4, #4]
 8003572:	680d      	ldr	r5, [r1, #0]
 8003574:	4083      	lsls	r3, r0
 8003576:	432b      	orrs	r3, r5
 8003578:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800357a:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800357c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800357e:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003580:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8003582:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8003584:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8003586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003588:	bffdfff8 	.word	0xbffdfff8
 800358c:	40020000 	.word	0x40020000
 8003590:	ffff800f 	.word	0xffff800f
 8003594:	400200a8 	.word	0x400200a8

08003598 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003598:	b570      	push	{r4, r5, r6, lr}
 800359a:	2501      	movs	r5, #1
 800359c:	0004      	movs	r4, r0

  /* Check the DMA handle allocation */
  if (NULL == hdma )
  {
    return HAL_ERROR;
 800359e:	0028      	movs	r0, r5
  if (NULL == hdma )
 80035a0:	2c00      	cmp	r4, #0
 80035a2:	d021      	beq.n	80035e8 <HAL_DMA_DeInit+0x50>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80035a4:	6826      	ldr	r6, [r4, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80035a6:	2114      	movs	r1, #20
  __HAL_DMA_DISABLE(hdma);
 80035a8:	6833      	ldr	r3, [r6, #0]
 80035aa:	43ab      	bics	r3, r5
 80035ac:	6033      	str	r3, [r6, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80035ae:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <HAL_DMA_DeInit+0x54>)
 80035b0:	18f0      	adds	r0, r6, r3
 80035b2:	f7fc fdd9 	bl	8000168 <__udivsi3>

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80035b6:	211c      	movs	r1, #28
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80035b8:	0083      	lsls	r3, r0, #2
 80035ba:	6463      	str	r3, [r4, #68]	; 0x44
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80035bc:	400b      	ands	r3, r1
  hdma->Instance->CCR  = 0U;
 80035be:	2000      	movs	r0, #0
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80035c0:	409d      	lsls	r5, r3

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80035c2:	390d      	subs	r1, #13
 80035c4:	4099      	lsls	r1, r3
  hdma->DmaBaseAddress = DMA1;
 80035c6:	4a0a      	ldr	r2, [pc, #40]	; (80035f0 <HAL_DMA_DeInit+0x58>)

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80035c8:	1da3      	adds	r3, r4, #6
  hdma->DmaBaseAddress = DMA1;
 80035ca:	6422      	str	r2, [r4, #64]	; 0x40
  hdma->Instance->CCR  = 0U;
 80035cc:	6030      	str	r0, [r6, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80035ce:	6055      	str	r5, [r2, #4]
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80035d0:	4d08      	ldr	r5, [pc, #32]	; (80035f4 <HAL_DMA_DeInit+0x5c>)
 80035d2:	682a      	ldr	r2, [r5, #0]
 80035d4:	438a      	bics	r2, r1
 80035d6:	602a      	str	r2, [r5, #0]
  hdma->XferCpltCallback = NULL;
 80035d8:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80035da:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80035dc:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80035de:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035e0:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80035e2:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_RESET;
 80035e4:	77d8      	strb	r0, [r3, #31]
  __HAL_UNLOCK(hdma);
 80035e6:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 80035e8:	bd70      	pop	{r4, r5, r6, pc}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	bffdfff8 	.word	0xbffdfff8
 80035f0:	40020000 	.word	0x40020000
 80035f4:	400200a8 	.word	0x400200a8

080035f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035fa:	1d45      	adds	r5, r0, #5
{
 80035fc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 80035fe:	7feb      	ldrb	r3, [r5, #31]
{
 8003600:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8003602:	2002      	movs	r0, #2
 8003604:	2b01      	cmp	r3, #1
 8003606:	d029      	beq.n	800365c <HAL_DMA_Start_IT+0x64>
 8003608:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 800360a:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 800360c:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 800360e:	7ffb      	ldrb	r3, [r7, #31]
 8003610:	2600      	movs	r6, #0
 8003612:	469c      	mov	ip, r3
 8003614:	4660      	mov	r0, ip
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2801      	cmp	r0, #1
 800361a:	d12a      	bne.n	8003672 <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800361c:	3001      	adds	r0, #1
 800361e:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003620:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003622:	63e6      	str	r6, [r4, #60]	; 0x3c
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003624:	6c67      	ldr	r7, [r4, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8003626:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003628:	361c      	adds	r6, #28
 800362a:	403e      	ands	r6, r7
    __HAL_DMA_DISABLE(hdma);
 800362c:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800362e:	40b3      	lsls	r3, r6
    __HAL_DMA_DISABLE(hdma);
 8003630:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003632:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8003634:	606b      	str	r3, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003636:	9b01      	ldr	r3, [sp, #4]
 8003638:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800363a:	68a3      	ldr	r3, [r4, #8]
 800363c:	2b10      	cmp	r3, #16
 800363e:	d10e      	bne.n	800365e <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003640:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003642:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003644:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00c      	beq.n	8003664 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800364a:	230e      	movs	r3, #14
 800364c:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800364e:	4313      	orrs	r3, r2
 8003650:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 8003652:	2301      	movs	r3, #1
 8003654:	6802      	ldr	r2, [r0, #0]
 8003656:	4313      	orrs	r3, r2
 8003658:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800365a:	2000      	movs	r0, #0
}
 800365c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800365e:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003660:	60c2      	str	r2, [r0, #12]
 8003662:	e7ef      	b.n	8003644 <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003664:	2204      	movs	r2, #4
 8003666:	6803      	ldr	r3, [r0, #0]
 8003668:	4393      	bics	r3, r2
 800366a:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800366c:	6802      	ldr	r2, [r0, #0]
 800366e:	230a      	movs	r3, #10
 8003670:	e7ed      	b.n	800364e <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 8003672:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 8003674:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 8003676:	e7f1      	b.n	800365c <HAL_DMA_Start_IT+0x64>

08003678 <HAL_DMA_Abort>:
{
 8003678:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800367a:	1d85      	adds	r5, r0, #6
 800367c:	7feb      	ldrb	r3, [r5, #31]
 800367e:	1d44      	adds	r4, r0, #5
 8003680:	2b02      	cmp	r3, #2
 8003682:	d005      	beq.n	8003690 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003684:	2304      	movs	r3, #4
 8003686:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003688:	2300      	movs	r3, #0
    return HAL_ERROR;
 800368a:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 800368c:	77e3      	strb	r3, [r4, #31]
}
 800368e:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003690:	210e      	movs	r1, #14
 8003692:	6803      	ldr	r3, [r0, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	438a      	bics	r2, r1
 8003698:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800369a:	2201      	movs	r2, #1
 800369c:	6819      	ldr	r1, [r3, #0]
 800369e:	4391      	bics	r1, r2
 80036a0:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80036a2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80036a4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80036a6:	201c      	movs	r0, #28
 80036a8:	4003      	ands	r3, r0
 80036aa:	0010      	movs	r0, r2
 80036ac:	4098      	lsls	r0, r3
 80036ae:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 80036b0:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 80036b2:	77ea      	strb	r2, [r5, #31]
    __HAL_UNLOCK(hdma);
 80036b4:	77e0      	strb	r0, [r4, #31]
    return status;
 80036b6:	e7ea      	b.n	800368e <HAL_DMA_Abort+0x16>

080036b8 <HAL_DMA_Abort_IT>:
{
 80036b8:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80036ba:	1d84      	adds	r4, r0, #6
 80036bc:	7fe3      	ldrb	r3, [r4, #31]
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d004      	beq.n	80036cc <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036c2:	2304      	movs	r3, #4
 80036c4:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80036c6:	3b03      	subs	r3, #3
}
 80036c8:	0018      	movs	r0, r3
 80036ca:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036cc:	210e      	movs	r1, #14
 80036ce:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80036d0:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	438a      	bics	r2, r1
 80036d6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80036d8:	2201      	movs	r2, #1
 80036da:	6819      	ldr	r1, [r3, #0]
 80036dc:	4391      	bics	r1, r2
 80036de:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80036e0:	231c      	movs	r3, #28
 80036e2:	402b      	ands	r3, r5
 80036e4:	0015      	movs	r5, r2
 80036e6:	409d      	lsls	r5, r3
 80036e8:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 80036ea:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80036ec:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80036ee:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 80036f0:	2400      	movs	r4, #0
 80036f2:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 80036f4:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 80036f6:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 80036f8:	42a2      	cmp	r2, r4
 80036fa:	d0e5      	beq.n	80036c8 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 80036fc:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80036fe:	0023      	movs	r3, r4
 8003700:	e7e2      	b.n	80036c8 <HAL_DMA_Abort_IT+0x10>

08003702 <HAL_DMA_IRQHandler>:
{
 8003702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003704:	221c      	movs	r2, #28
 8003706:	2704      	movs	r7, #4
 8003708:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800370a:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800370c:	4032      	ands	r2, r6
 800370e:	003e      	movs	r6, r7
 8003710:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003712:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003714:	6803      	ldr	r3, [r0, #0]
 8003716:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003718:	4235      	tst	r5, r6
 800371a:	d00d      	beq.n	8003738 <HAL_DMA_IRQHandler+0x36>
 800371c:	423c      	tst	r4, r7
 800371e:	d00b      	beq.n	8003738 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	0692      	lsls	r2, r2, #26
 8003724:	d402      	bmi.n	800372c <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	43ba      	bics	r2, r7
 800372a:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 800372c:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800372e:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8003730:	2b00      	cmp	r3, #0
 8003732:	d019      	beq.n	8003768 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8003734:	4798      	blx	r3
  return;
 8003736:	e017      	b.n	8003768 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003738:	2702      	movs	r7, #2
 800373a:	003e      	movs	r6, r7
 800373c:	4096      	lsls	r6, r2
 800373e:	4235      	tst	r5, r6
 8003740:	d013      	beq.n	800376a <HAL_DMA_IRQHandler+0x68>
 8003742:	423c      	tst	r4, r7
 8003744:	d011      	beq.n	800376a <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	0692      	lsls	r2, r2, #26
 800374a:	d406      	bmi.n	800375a <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800374c:	240a      	movs	r4, #10
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	43a2      	bics	r2, r4
 8003752:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003754:	2201      	movs	r2, #1
 8003756:	1d83      	adds	r3, r0, #6
 8003758:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 800375a:	2200      	movs	r2, #0
 800375c:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800375e:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003760:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8003762:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8003764:	4293      	cmp	r3, r2
 8003766:	d1e5      	bne.n	8003734 <HAL_DMA_IRQHandler+0x32>
}
 8003768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800376a:	2608      	movs	r6, #8
 800376c:	0037      	movs	r7, r6
 800376e:	4097      	lsls	r7, r2
 8003770:	423d      	tst	r5, r7
 8003772:	d0f9      	beq.n	8003768 <HAL_DMA_IRQHandler+0x66>
 8003774:	4234      	tst	r4, r6
 8003776:	d0f7      	beq.n	8003768 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003778:	250e      	movs	r5, #14
 800377a:	681c      	ldr	r4, [r3, #0]
 800377c:	43ac      	bics	r4, r5
 800377e:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003780:	2301      	movs	r3, #1
 8003782:	001c      	movs	r4, r3
 8003784:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8003786:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003788:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800378a:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800378c:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 800378e:	2200      	movs	r2, #0
 8003790:	1d43      	adds	r3, r0, #5
 8003792:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8003794:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003796:	e7e5      	b.n	8003764 <HAL_DMA_IRQHandler+0x62>

08003798 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003798:	0003      	movs	r3, r0
 800379a:	1e08      	subs	r0, r1, #0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 800379c:	d101      	bne.n	80037a2 <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800379e:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
      break;
  }

  return status;
}
 80037a0:	4770      	bx	lr
      status = HAL_ERROR;
 80037a2:	2001      	movs	r0, #1
 80037a4:	e7fc      	b.n	80037a0 <HAL_EXTI_RegisterCallback+0x8>

080037a6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80037a6:	0003      	movs	r3, r0
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
  {
    return HAL_ERROR;
 80037a8:	2001      	movs	r0, #1
  if (hexti == NULL)
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_EXTI_GetHandle+0xc>
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;

    return HAL_OK;
 80037ae:	2000      	movs	r0, #0
    hexti->Line = ExtiLine;
 80037b0:	6019      	str	r1, [r3, #0]
  }
}
 80037b2:	4770      	bx	lr

080037b4 <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80037b4:	221f      	movs	r2, #31
 80037b6:	6803      	ldr	r3, [r0, #0]
{
 80037b8:	b510      	push	{r4, lr}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80037ba:	401a      	ands	r2, r3
 80037bc:	2301      	movs	r3, #1
 80037be:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 80037c0:	4a04      	ldr	r2, [pc, #16]	; (80037d4 <HAL_EXTI_IRQHandler+0x20>)
 80037c2:	6951      	ldr	r1, [r2, #20]
  if (regval != 0x00u)
 80037c4:	420b      	tst	r3, r1
 80037c6:	d004      	beq.n	80037d2 <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 80037c8:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80037ca:	6843      	ldr	r3, [r0, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d000      	beq.n	80037d2 <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 80037d0:	4798      	blx	r3
    }
  }
}
 80037d2:	bd10      	pop	{r4, pc}
 80037d4:	40010400 	.word	0x40010400

080037d8 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80037d8:	4a57      	ldr	r2, [pc, #348]	; (8003938 <HAL_GPIO_Init+0x160>)
{
 80037da:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80037dc:	1882      	adds	r2, r0, r2
 80037de:	1e54      	subs	r4, r2, #1
 80037e0:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 80037e2:	2300      	movs	r3, #0
{
 80037e4:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80037e6:	3205      	adds	r2, #5
{
 80037e8:	9102      	str	r1, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80037ea:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80037ec:	9a02      	ldr	r2, [sp, #8]
 80037ee:	6812      	ldr	r2, [r2, #0]
 80037f0:	0014      	movs	r4, r2
 80037f2:	40dc      	lsrs	r4, r3
 80037f4:	d101      	bne.n	80037fa <HAL_GPIO_Init+0x22>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 80037f6:	b007      	add	sp, #28
 80037f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80037fa:	2101      	movs	r1, #1
 80037fc:	000d      	movs	r5, r1
 80037fe:	0014      	movs	r4, r2
 8003800:	409d      	lsls	r5, r3
 8003802:	402c      	ands	r4, r5
 8003804:	9401      	str	r4, [sp, #4]
    if (iocurrent)
 8003806:	422a      	tst	r2, r5
 8003808:	d100      	bne.n	800380c <HAL_GPIO_Init+0x34>
 800380a:	e093      	b.n	8003934 <HAL_GPIO_Init+0x15c>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800380c:	9a02      	ldr	r2, [sp, #8]
 800380e:	005f      	lsls	r7, r3, #1
 8003810:	6854      	ldr	r4, [r2, #4]
 8003812:	2210      	movs	r2, #16
 8003814:	0026      	movs	r6, r4
 8003816:	4396      	bics	r6, r2
 8003818:	3a0d      	subs	r2, #13
 800381a:	40ba      	lsls	r2, r7
 800381c:	43d2      	mvns	r2, r2
 800381e:	9203      	str	r2, [sp, #12]
 8003820:	0032      	movs	r2, r6
 8003822:	3a01      	subs	r2, #1
 8003824:	9604      	str	r6, [sp, #16]
 8003826:	428a      	cmp	r2, r1
 8003828:	d80f      	bhi.n	800384a <HAL_GPIO_Init+0x72>
        temp = GPIOx->OSPEEDR;
 800382a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800382c:	9a03      	ldr	r2, [sp, #12]
 800382e:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003830:	9a02      	ldr	r2, [sp, #8]
 8003832:	68d2      	ldr	r2, [r2, #12]
 8003834:	40ba      	lsls	r2, r7
 8003836:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 8003838:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 800383a:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800383c:	43aa      	bics	r2, r5
 800383e:	0015      	movs	r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003840:	0922      	lsrs	r2, r4, #4
 8003842:	400a      	ands	r2, r1
 8003844:	409a      	lsls	r2, r3
 8003846:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8003848:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800384a:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800384c:	9a03      	ldr	r2, [sp, #12]
 800384e:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003850:	9a02      	ldr	r2, [sp, #8]
 8003852:	6892      	ldr	r2, [r2, #8]
 8003854:	40ba      	lsls	r2, r7
 8003856:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8003858:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800385a:	9a04      	ldr	r2, [sp, #16]
 800385c:	2a02      	cmp	r2, #2
 800385e:	d10e      	bne.n	800387e <HAL_GPIO_Init+0xa6>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003860:	2507      	movs	r5, #7
 8003862:	210f      	movs	r1, #15
 8003864:	401d      	ands	r5, r3
 8003866:	00ad      	lsls	r5, r5, #2
 8003868:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 800386a:	08da      	lsrs	r2, r3, #3
 800386c:	0092      	lsls	r2, r2, #2
 800386e:	1882      	adds	r2, r0, r2
 8003870:	6a16      	ldr	r6, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003872:	438e      	bics	r6, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003874:	9902      	ldr	r1, [sp, #8]
 8003876:	6909      	ldr	r1, [r1, #16]
 8003878:	40a9      	lsls	r1, r5
 800387a:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3U] = temp;
 800387c:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 800387e:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003880:	9a03      	ldr	r2, [sp, #12]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003882:	2603      	movs	r6, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003884:	402a      	ands	r2, r5
 8003886:	0015      	movs	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003888:	0022      	movs	r2, r4
 800388a:	4032      	ands	r2, r6
 800388c:	40ba      	lsls	r2, r7
 800388e:	4315      	orrs	r5, r2
      GPIOx->MODER = temp;
 8003890:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003892:	00e2      	lsls	r2, r4, #3
 8003894:	d54e      	bpl.n	8003934 <HAL_GPIO_Init+0x15c>
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003896:	001f      	movs	r7, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003898:	2101      	movs	r1, #1
 800389a:	4d28      	ldr	r5, [pc, #160]	; (800393c <HAL_GPIO_Init+0x164>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800389c:	4037      	ands	r7, r6
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800389e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80038a0:	468c      	mov	ip, r1
 80038a2:	430a      	orrs	r2, r1
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80038a4:	00b9      	lsls	r1, r7, #2
 80038a6:	270f      	movs	r7, #15
 80038a8:	408f      	lsls	r7, r1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038aa:	636a      	str	r2, [r5, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 80038ac:	4a24      	ldr	r2, [pc, #144]	; (8003940 <HAL_GPIO_Init+0x168>)
 80038ae:	089d      	lsrs	r5, r3, #2
 80038b0:	00ad      	lsls	r5, r5, #2
 80038b2:	18ad      	adds	r5, r5, r2
 80038b4:	68aa      	ldr	r2, [r5, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80038b6:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80038b8:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80038ba:	9203      	str	r2, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80038bc:	05ff      	lsls	r7, r7, #23
 80038be:	2200      	movs	r2, #0
 80038c0:	42b8      	cmp	r0, r7
 80038c2:	d010      	beq.n	80038e6 <HAL_GPIO_Init+0x10e>
 80038c4:	4f1f      	ldr	r7, [pc, #124]	; (8003944 <HAL_GPIO_Init+0x16c>)
 80038c6:	4662      	mov	r2, ip
 80038c8:	42b8      	cmp	r0, r7
 80038ca:	d00c      	beq.n	80038e6 <HAL_GPIO_Init+0x10e>
 80038cc:	4f1e      	ldr	r7, [pc, #120]	; (8003948 <HAL_GPIO_Init+0x170>)
 80038ce:	1892      	adds	r2, r2, r2
 80038d0:	42b8      	cmp	r0, r7
 80038d2:	d008      	beq.n	80038e6 <HAL_GPIO_Init+0x10e>
 80038d4:	4f1d      	ldr	r7, [pc, #116]	; (800394c <HAL_GPIO_Init+0x174>)
 80038d6:	0032      	movs	r2, r6
 80038d8:	42b8      	cmp	r0, r7
 80038da:	d004      	beq.n	80038e6 <HAL_GPIO_Init+0x10e>
 80038dc:	4e1c      	ldr	r6, [pc, #112]	; (8003950 <HAL_GPIO_Init+0x178>)
 80038de:	4462      	add	r2, ip
 80038e0:	42b0      	cmp	r0, r6
 80038e2:	d000      	beq.n	80038e6 <HAL_GPIO_Init+0x10e>
 80038e4:	9a05      	ldr	r2, [sp, #20]
 80038e6:	408a      	lsls	r2, r1
 80038e8:	9903      	ldr	r1, [sp, #12]
 80038ea:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 80038ec:	9901      	ldr	r1, [sp, #4]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038ee:	60aa      	str	r2, [r5, #8]
          temp |= iocurrent;
 80038f0:	000e      	movs	r6, r1
        temp = EXTI->IMR;
 80038f2:	4a18      	ldr	r2, [pc, #96]	; (8003954 <HAL_GPIO_Init+0x17c>)
        temp &= ~((uint32_t)iocurrent);
 80038f4:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 80038f6:	6817      	ldr	r7, [r2, #0]
          temp |= iocurrent;
 80038f8:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038fa:	03e1      	lsls	r1, r4, #15
 80038fc:	d401      	bmi.n	8003902 <HAL_GPIO_Init+0x12a>
        temp &= ~((uint32_t)iocurrent);
 80038fe:	003e      	movs	r6, r7
 8003900:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8003902:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8003904:	6857      	ldr	r7, [r2, #4]
          temp |= iocurrent;
 8003906:	9e01      	ldr	r6, [sp, #4]
 8003908:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800390a:	03a1      	lsls	r1, r4, #14
 800390c:	d401      	bmi.n	8003912 <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 800390e:	003e      	movs	r6, r7
 8003910:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8003912:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8003914:	6897      	ldr	r7, [r2, #8]
          temp |= iocurrent;
 8003916:	9e01      	ldr	r6, [sp, #4]
 8003918:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800391a:	02e1      	lsls	r1, r4, #11
 800391c:	d401      	bmi.n	8003922 <HAL_GPIO_Init+0x14a>
        temp &= ~((uint32_t)iocurrent);
 800391e:	003e      	movs	r6, r7
 8003920:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8003922:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8003924:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8003926:	9f01      	ldr	r7, [sp, #4]
 8003928:	4337      	orrs	r7, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800392a:	02a1      	lsls	r1, r4, #10
 800392c:	d401      	bmi.n	8003932 <HAL_GPIO_Init+0x15a>
        temp &= ~((uint32_t)iocurrent);
 800392e:	402e      	ands	r6, r5
 8003930:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8003932:	60d7      	str	r7, [r2, #12]
    position++;
 8003934:	3301      	adds	r3, #1
 8003936:	e759      	b.n	80037ec <HAL_GPIO_Init+0x14>
 8003938:	afffe400 	.word	0xafffe400
 800393c:	40021000 	.word	0x40021000
 8003940:	40010000 	.word	0x40010000
 8003944:	50000400 	.word	0x50000400
 8003948:	50000800 	.word	0x50000800
 800394c:	50000c00 	.word	0x50000c00
 8003950:	50001000 	.word	0x50001000
 8003954:	40010400 	.word	0x40010400

08003958 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003958:	b5f0      	push	{r4, r5, r6, r7, lr}
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800395a:	4a38      	ldr	r2, [pc, #224]	; (8003a3c <HAL_GPIO_DeInit+0xe4>)
{
 800395c:	b087      	sub	sp, #28
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800395e:	1882      	adds	r2, r0, r2
{
 8003960:	9102      	str	r1, [sp, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003962:	1e51      	subs	r1, r2, #1
 8003964:	418a      	sbcs	r2, r1
  uint32_t position = 0x00U;
 8003966:	2300      	movs	r3, #0
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003968:	3205      	adds	r2, #5
 800396a:	9205      	str	r2, [sp, #20]
  while ((GPIO_Pin >> position) != 0)
 800396c:	9a02      	ldr	r2, [sp, #8]
 800396e:	40da      	lsrs	r2, r3
 8003970:	d101      	bne.n	8003976 <HAL_GPIO_DeInit+0x1e>
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
    }
    position++;
  }
}
 8003972:	b007      	add	sp, #28
 8003974:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 8003976:	2701      	movs	r7, #1
 8003978:	003a      	movs	r2, r7
 800397a:	409a      	lsls	r2, r3
 800397c:	9c02      	ldr	r4, [sp, #8]
 800397e:	9201      	str	r2, [sp, #4]
 8003980:	4014      	ands	r4, r2
    if (iocurrent)
 8003982:	9901      	ldr	r1, [sp, #4]
 8003984:	9a02      	ldr	r2, [sp, #8]
 8003986:	420a      	tst	r2, r1
 8003988:	d056      	beq.n	8003a38 <HAL_GPIO_DeInit+0xe0>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800398a:	4a2d      	ldr	r2, [pc, #180]	; (8003a40 <HAL_GPIO_DeInit+0xe8>)
 800398c:	0899      	lsrs	r1, r3, #2
 800398e:	0089      	lsls	r1, r1, #2
 8003990:	1889      	adds	r1, r1, r2
 8003992:	688a      	ldr	r2, [r1, #8]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8003994:	001d      	movs	r5, r3
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003996:	0016      	movs	r6, r2
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8003998:	2203      	movs	r2, #3
 800399a:	4015      	ands	r5, r2
 800399c:	00ad      	lsls	r5, r5, #2
 800399e:	320c      	adds	r2, #12
 80039a0:	40aa      	lsls	r2, r5
 80039a2:	9203      	str	r2, [sp, #12]
 80039a4:	4032      	ands	r2, r6
 80039a6:	9204      	str	r2, [sp, #16]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80039a8:	22a0      	movs	r2, #160	; 0xa0
 80039aa:	05d2      	lsls	r2, r2, #23
 80039ac:	4694      	mov	ip, r2
 80039ae:	2200      	movs	r2, #0
 80039b0:	4560      	cmp	r0, ip
 80039b2:	d011      	beq.n	80039d8 <HAL_GPIO_DeInit+0x80>
 80039b4:	4a23      	ldr	r2, [pc, #140]	; (8003a44 <HAL_GPIO_DeInit+0xec>)
 80039b6:	4694      	mov	ip, r2
 80039b8:	003a      	movs	r2, r7
 80039ba:	4560      	cmp	r0, ip
 80039bc:	d00c      	beq.n	80039d8 <HAL_GPIO_DeInit+0x80>
 80039be:	4f22      	ldr	r7, [pc, #136]	; (8003a48 <HAL_GPIO_DeInit+0xf0>)
 80039c0:	1892      	adds	r2, r2, r2
 80039c2:	42b8      	cmp	r0, r7
 80039c4:	d008      	beq.n	80039d8 <HAL_GPIO_DeInit+0x80>
 80039c6:	4f21      	ldr	r7, [pc, #132]	; (8003a4c <HAL_GPIO_DeInit+0xf4>)
 80039c8:	3201      	adds	r2, #1
 80039ca:	42b8      	cmp	r0, r7
 80039cc:	d004      	beq.n	80039d8 <HAL_GPIO_DeInit+0x80>
 80039ce:	4e20      	ldr	r6, [pc, #128]	; (8003a50 <HAL_GPIO_DeInit+0xf8>)
 80039d0:	3201      	adds	r2, #1
 80039d2:	42b0      	cmp	r0, r6
 80039d4:	d000      	beq.n	80039d8 <HAL_GPIO_DeInit+0x80>
 80039d6:	9a05      	ldr	r2, [sp, #20]
 80039d8:	40aa      	lsls	r2, r5
 80039da:	9d04      	ldr	r5, [sp, #16]
 80039dc:	42aa      	cmp	r2, r5
 80039de:	d110      	bne.n	8003a02 <HAL_GPIO_DeInit+0xaa>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80039e0:	4a1c      	ldr	r2, [pc, #112]	; (8003a54 <HAL_GPIO_DeInit+0xfc>)
 80039e2:	6815      	ldr	r5, [r2, #0]
 80039e4:	43a5      	bics	r5, r4
 80039e6:	6015      	str	r5, [r2, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80039e8:	6855      	ldr	r5, [r2, #4]
 80039ea:	43a5      	bics	r5, r4
 80039ec:	6055      	str	r5, [r2, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80039ee:	6895      	ldr	r5, [r2, #8]
 80039f0:	43a5      	bics	r5, r4
 80039f2:	6095      	str	r5, [r2, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80039f4:	68d5      	ldr	r5, [r2, #12]
 80039f6:	43a5      	bics	r5, r4
 80039f8:	60d5      	str	r5, [r2, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80039fa:	688a      	ldr	r2, [r1, #8]
 80039fc:	9c03      	ldr	r4, [sp, #12]
 80039fe:	43a2      	bics	r2, r4
 8003a00:	608a      	str	r2, [r1, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003a02:	2103      	movs	r1, #3
 8003a04:	005c      	lsls	r4, r3, #1
 8003a06:	40a1      	lsls	r1, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003a08:	2407      	movs	r4, #7
 8003a0a:	260f      	movs	r6, #15
 8003a0c:	401c      	ands	r4, r3
 8003a0e:	00a4      	lsls	r4, r4, #2
 8003a10:	40a6      	lsls	r6, r4
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003a12:	6802      	ldr	r2, [r0, #0]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8003a14:	9c01      	ldr	r4, [sp, #4]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003a16:	430a      	orrs	r2, r1
 8003a18:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003a1a:	08da      	lsrs	r2, r3, #3
 8003a1c:	0092      	lsls	r2, r2, #2
 8003a1e:	1882      	adds	r2, r0, r2
 8003a20:	6a15      	ldr	r5, [r2, #32]
 8003a22:	43b5      	bics	r5, r6
 8003a24:	6215      	str	r5, [r2, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a26:	68c2      	ldr	r2, [r0, #12]
 8003a28:	438a      	bics	r2, r1
 8003a2a:	60c2      	str	r2, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8003a2c:	6842      	ldr	r2, [r0, #4]
 8003a2e:	43a2      	bics	r2, r4
 8003a30:	6042      	str	r2, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003a32:	6882      	ldr	r2, [r0, #8]
 8003a34:	438a      	bics	r2, r1
 8003a36:	6082      	str	r2, [r0, #8]
    position++;
 8003a38:	3301      	adds	r3, #1
 8003a3a:	e797      	b.n	800396c <HAL_GPIO_DeInit+0x14>
 8003a3c:	afffe400 	.word	0xafffe400
 8003a40:	40010000 	.word	0x40010000
 8003a44:	50000400 	.word	0x50000400
 8003a48:	50000800 	.word	0x50000800
 8003a4c:	50000c00 	.word	0x50000c00
 8003a50:	50001000 	.word	0x50001000
 8003a54:	40010400 	.word	0x40010400

08003a58 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a58:	6900      	ldr	r0, [r0, #16]
 8003a5a:	4008      	ands	r0, r1
 8003a5c:	1e41      	subs	r1, r0, #1
 8003a5e:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8003a60:	b2c0      	uxtb	r0, r0
}
 8003a62:	4770      	bx	lr

08003a64 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a64:	2a00      	cmp	r2, #0
 8003a66:	d001      	beq.n	8003a6c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a68:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003a6a:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8003a6c:	6281      	str	r1, [r0, #40]	; 0x28
}
 8003a6e:	e7fc      	b.n	8003a6a <HAL_GPIO_WritePin+0x6>

08003a70 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003a70:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a72:	0013      	movs	r3, r2
 8003a74:	400b      	ands	r3, r1
 8003a76:	041b      	lsls	r3, r3, #16
 8003a78:	4391      	bics	r1, r2
 8003a7a:	4319      	orrs	r1, r3
 8003a7c:	6181      	str	r1, [r0, #24]
}
 8003a7e:	4770      	bx	lr

08003a80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a82:	0004      	movs	r4, r0
 8003a84:	000e      	movs	r6, r1
 8003a86:	0017      	movs	r7, r2
 8003a88:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a8a:	6822      	ldr	r2, [r4, #0]
 8003a8c:	6993      	ldr	r3, [r2, #24]
 8003a8e:	4033      	ands	r3, r6
 8003a90:	1b9b      	subs	r3, r3, r6
 8003a92:	4259      	negs	r1, r3
 8003a94:	414b      	adcs	r3, r1
 8003a96:	42bb      	cmp	r3, r7
 8003a98:	d001      	beq.n	8003a9e <I2C_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(hi2c);
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	e017      	b.n	8003ace <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8003a9e:	1c6b      	adds	r3, r5, #1
 8003aa0:	d0f4      	beq.n	8003a8c <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa2:	f7fe ffc9 	bl	8002a38 <HAL_GetTick>
 8003aa6:	9b06      	ldr	r3, [sp, #24]
 8003aa8:	1ac0      	subs	r0, r0, r3
 8003aaa:	42a8      	cmp	r0, r5
 8003aac:	d801      	bhi.n	8003ab2 <I2C_WaitOnFlagUntilTimeout+0x32>
 8003aae:	2d00      	cmp	r5, #0
 8003ab0:	d1eb      	bne.n	8003a8a <I2C_WaitOnFlagUntilTimeout+0xa>
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	6c63      	ldr	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
          hi2c->Mode = HAL_I2C_MODE_NONE;

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ab6:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003abc:	0023      	movs	r3, r4
 8003abe:	3341      	adds	r3, #65	; 0x41
 8003ac0:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac2:	0022      	movs	r2, r4
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 8003ac8:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aca:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8003acc:	7023      	strb	r3, [r4, #0]
}
 8003ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003ad0 <HAL_I2C_MspInit>:
}
 8003ad0:	4770      	bx	lr
	...

08003ad4 <HAL_I2C_Init>:
{
 8003ad4:	b570      	push	{r4, r5, r6, lr}
 8003ad6:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003ad8:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8003ada:	2c00      	cmp	r4, #0
 8003adc:	d03f      	beq.n	8003b5e <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ade:	0025      	movs	r5, r4
 8003ae0:	3541      	adds	r5, #65	; 0x41
 8003ae2:	782b      	ldrb	r3, [r5, #0]
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d105      	bne.n	8003af6 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8003aea:	0023      	movs	r3, r4
 8003aec:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003aee:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8003af0:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8003af2:	f7ff ffed 	bl	8003ad0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003af6:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003af8:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003afa:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8003afc:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003afe:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68a6      	ldr	r6, [r4, #8]
 8003b04:	438a      	bics	r2, r1
 8003b06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b08:	6861      	ldr	r1, [r4, #4]
 8003b0a:	4a1a      	ldr	r2, [pc, #104]	; (8003b74 <HAL_I2C_Init+0xa0>)
 8003b0c:	400a      	ands	r2, r1
 8003b0e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b10:	6899      	ldr	r1, [r3, #8]
 8003b12:	4a19      	ldr	r2, [pc, #100]	; (8003b78 <HAL_I2C_Init+0xa4>)
 8003b14:	4011      	ands	r1, r2
 8003b16:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b18:	2801      	cmp	r0, #1
 8003b1a:	d121      	bne.n	8003b60 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b1c:	2180      	movs	r1, #128	; 0x80
 8003b1e:	0209      	lsls	r1, r1, #8
 8003b20:	4331      	orrs	r1, r6
 8003b22:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b24:	6858      	ldr	r0, [r3, #4]
 8003b26:	4915      	ldr	r1, [pc, #84]	; (8003b7c <HAL_I2C_Init+0xa8>)
 8003b28:	4301      	orrs	r1, r0
 8003b2a:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b2c:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b2e:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b30:	400a      	ands	r2, r1
 8003b32:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003b34:	6961      	ldr	r1, [r4, #20]
 8003b36:	6922      	ldr	r2, [r4, #16]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	69a1      	ldr	r1, [r4, #24]
 8003b3c:	0209      	lsls	r1, r1, #8
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b42:	6a21      	ldr	r1, [r4, #32]
 8003b44:	69e2      	ldr	r2, [r4, #28]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	6819      	ldr	r1, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003b52:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b54:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b56:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b58:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5a:	3442      	adds	r4, #66	; 0x42
 8003b5c:	7020      	strb	r0, [r4, #0]
}
 8003b5e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b60:	2184      	movs	r1, #132	; 0x84
 8003b62:	0209      	lsls	r1, r1, #8
 8003b64:	4331      	orrs	r1, r6
 8003b66:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b68:	2802      	cmp	r0, #2
 8003b6a:	d1db      	bne.n	8003b24 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b6c:	2180      	movs	r1, #128	; 0x80
 8003b6e:	0109      	lsls	r1, r1, #4
 8003b70:	6059      	str	r1, [r3, #4]
 8003b72:	e7d7      	b.n	8003b24 <HAL_I2C_Init+0x50>
 8003b74:	f0ffffff 	.word	0xf0ffffff
 8003b78:	ffff7fff 	.word	0xffff7fff
 8003b7c:	02008000 	.word	0x02008000

08003b80 <HAL_I2C_IsDeviceReady>:
{
 8003b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b82:	b089      	sub	sp, #36	; 0x24
 8003b84:	9205      	str	r2, [sp, #20]
 8003b86:	001e      	movs	r6, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b88:	0002      	movs	r2, r0
  __IO uint32_t I2C_Trials = 0UL;
 8003b8a:	2300      	movs	r3, #0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b8c:	3241      	adds	r2, #65	; 0x41
  __IO uint32_t I2C_Trials = 0UL;
 8003b8e:	9307      	str	r3, [sp, #28]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b90:	7813      	ldrb	r3, [r2, #0]
{
 8003b92:	0004      	movs	r4, r0
    return HAL_BUSY;
 8003b94:	2502      	movs	r5, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b96:	2b20      	cmp	r3, #32
 8003b98:	d15c      	bne.n	8003c54 <HAL_I2C_IsDeviceReady+0xd4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003b9a:	6803      	ldr	r3, [r0, #0]
 8003b9c:	6998      	ldr	r0, [r3, #24]
 8003b9e:	2380      	movs	r3, #128	; 0x80
 8003ba0:	0007      	movs	r7, r0
 8003ba2:	021b      	lsls	r3, r3, #8
 8003ba4:	401f      	ands	r7, r3
 8003ba6:	4218      	tst	r0, r3
 8003ba8:	d154      	bne.n	8003c54 <HAL_I2C_IsDeviceReady+0xd4>
    __HAL_LOCK(hi2c);
 8003baa:	0020      	movs	r0, r4
 8003bac:	3040      	adds	r0, #64	; 0x40
 8003bae:	7803      	ldrb	r3, [r0, #0]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d04f      	beq.n	8003c54 <HAL_I2C_IsDeviceReady+0xd4>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	7003      	strb	r3, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bb8:	2024      	movs	r0, #36	; 0x24
 8003bba:	0589      	lsls	r1, r1, #22
 8003bbc:	7010      	strb	r0, [r2, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bbe:	0d8a      	lsrs	r2, r1, #22
 8003bc0:	6467      	str	r7, [r4, #68]	; 0x44
 8003bc2:	9204      	str	r2, [sp, #16]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bc4:	9303      	str	r3, [sp, #12]
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003bc6:	68e3      	ldr	r3, [r4, #12]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d12b      	bne.n	8003c24 <HAL_I2C_IsDeviceReady+0xa4>
 8003bcc:	4b3d      	ldr	r3, [pc, #244]	; (8003cc4 <HAL_I2C_IsDeviceReady+0x144>)
 8003bce:	9a04      	ldr	r2, [sp, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	6822      	ldr	r2, [r4, #0]
 8003bd4:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8003bd6:	f7fe ff2f 	bl	8002a38 <HAL_GetTick>
 8003bda:	9002      	str	r0, [sp, #8]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bdc:	6823      	ldr	r3, [r4, #0]
 8003bde:	9a03      	ldr	r2, [sp, #12]
 8003be0:	699d      	ldr	r5, [r3, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003be2:	699b      	ldr	r3, [r3, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003be4:	096d      	lsrs	r5, r5, #5
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003be6:	091b      	lsrs	r3, r3, #4
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003be8:	4015      	ands	r5, r2
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003bea:	4013      	ands	r3, r2
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003bec:	431d      	orrs	r5, r3
 8003bee:	d01c      	beq.n	8003c2a <HAL_I2C_IsDeviceReady+0xaa>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003bf0:	6823      	ldr	r3, [r4, #0]
 8003bf2:	2710      	movs	r7, #16
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	001a      	movs	r2, r3
 8003bf8:	403a      	ands	r2, r7
 8003bfa:	423b      	tst	r3, r7
 8003bfc:	d12d      	bne.n	8003c5a <HAL_I2C_IsDeviceReady+0xda>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003bfe:	9b02      	ldr	r3, [sp, #8]
 8003c00:	2120      	movs	r1, #32
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	0020      	movs	r0, r4
 8003c06:	0033      	movs	r3, r6
 8003c08:	f7ff ff3a 	bl	8003a80 <I2C_WaitOnFlagUntilTimeout>
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	d121      	bne.n	8003c54 <HAL_I2C_IsDeviceReady+0xd4>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c10:	2320      	movs	r3, #32
 8003c12:	6822      	ldr	r2, [r4, #0]
        return HAL_OK;
 8003c14:	0005      	movs	r5, r0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c16:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8003c18:	0022      	movs	r2, r4
        __HAL_UNLOCK(hi2c);
 8003c1a:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8003c1c:	3241      	adds	r2, #65	; 0x41
 8003c1e:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8003c20:	7020      	strb	r0, [r4, #0]
        return HAL_OK;
 8003c22:	e017      	b.n	8003c54 <HAL_I2C_IsDeviceReady+0xd4>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003c24:	23a0      	movs	r3, #160	; 0xa0
 8003c26:	019b      	lsls	r3, r3, #6
 8003c28:	e7d1      	b.n	8003bce <HAL_I2C_IsDeviceReady+0x4e>
        if (Timeout != HAL_MAX_DELAY)
 8003c2a:	1c73      	adds	r3, r6, #1
 8003c2c:	d0d6      	beq.n	8003bdc <HAL_I2C_IsDeviceReady+0x5c>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c2e:	f7fe ff03 	bl	8002a38 <HAL_GetTick>
 8003c32:	9b02      	ldr	r3, [sp, #8]
 8003c34:	1ac0      	subs	r0, r0, r3
 8003c36:	42b0      	cmp	r0, r6
 8003c38:	d801      	bhi.n	8003c3e <HAL_I2C_IsDeviceReady+0xbe>
 8003c3a:	2e00      	cmp	r6, #0
 8003c3c:	d1ce      	bne.n	8003bdc <HAL_I2C_IsDeviceReady+0x5c>
            hi2c->State = HAL_I2C_STATE_READY;
 8003c3e:	0022      	movs	r2, r4
 8003c40:	2320      	movs	r3, #32
 8003c42:	3241      	adds	r2, #65	; 0x41
 8003c44:	7013      	strb	r3, [r2, #0]
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c46:	6c62      	ldr	r2, [r4, #68]	; 0x44
            return HAL_ERROR;
 8003c48:	2501      	movs	r5, #1
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	6463      	str	r3, [r4, #68]	; 0x44
            __HAL_UNLOCK(hi2c);
 8003c4e:	2300      	movs	r3, #0
 8003c50:	3440      	adds	r4, #64	; 0x40
 8003c52:	7023      	strb	r3, [r4, #0]
}
 8003c54:	0028      	movs	r0, r5
 8003c56:	b009      	add	sp, #36	; 0x24
 8003c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003c5a:	9b02      	ldr	r3, [sp, #8]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	2120      	movs	r1, #32
 8003c62:	0033      	movs	r3, r6
 8003c64:	0020      	movs	r0, r4
 8003c66:	f7ff ff0b 	bl	8003a80 <I2C_WaitOnFlagUntilTimeout>
 8003c6a:	1e02      	subs	r2, r0, #0
 8003c6c:	d1f2      	bne.n	8003c54 <HAL_I2C_IsDeviceReady+0xd4>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c6e:	6823      	ldr	r3, [r4, #0]
      if (I2C_Trials == Trials)
 8003c70:	9805      	ldr	r0, [sp, #20]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c72:	61df      	str	r7, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c74:	2720      	movs	r7, #32
 8003c76:	61df      	str	r7, [r3, #28]
      if (I2C_Trials == Trials)
 8003c78:	9907      	ldr	r1, [sp, #28]
 8003c7a:	4281      	cmp	r1, r0
 8003c7c:	d10f      	bne.n	8003c9e <HAL_I2C_IsDeviceReady+0x11e>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c7e:	2180      	movs	r1, #128	; 0x80
 8003c80:	6858      	ldr	r0, [r3, #4]
 8003c82:	01c9      	lsls	r1, r1, #7
 8003c84:	4301      	orrs	r1, r0
 8003c86:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003c88:	9b02      	ldr	r3, [sp, #8]
 8003c8a:	0039      	movs	r1, r7
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	0020      	movs	r0, r4
 8003c90:	0033      	movs	r3, r6
 8003c92:	f7ff fef5 	bl	8003a80 <I2C_WaitOnFlagUntilTimeout>
 8003c96:	2800      	cmp	r0, #0
 8003c98:	d1dc      	bne.n	8003c54 <HAL_I2C_IsDeviceReady+0xd4>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c9a:	6823      	ldr	r3, [r4, #0]
 8003c9c:	61df      	str	r7, [r3, #28]
      I2C_Trials++;
 8003c9e:	9b07      	ldr	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 8003ca0:	9a05      	ldr	r2, [sp, #20]
      I2C_Trials++;
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	9307      	str	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 8003ca6:	9b07      	ldr	r3, [sp, #28]
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d200      	bcs.n	8003cae <HAL_I2C_IsDeviceReady+0x12e>
 8003cac:	e78b      	b.n	8003bc6 <HAL_I2C_IsDeviceReady+0x46>
    hi2c->State = HAL_I2C_STATE_READY;
 8003cae:	0022      	movs	r2, r4
 8003cb0:	2320      	movs	r3, #32
 8003cb2:	3241      	adds	r2, #65	; 0x41
 8003cb4:	7013      	strb	r3, [r2, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cb6:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8003cb8:	3440      	adds	r4, #64	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hi2c);
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 8003cc2:	e7c7      	b.n	8003c54 <HAL_I2C_IsDeviceReady+0xd4>
 8003cc4:	02002000 	.word	0x02002000

08003cc8 <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8003cc8:	2110      	movs	r1, #16
 8003cca:	4a02      	ldr	r2, [pc, #8]	; (8003cd4 <HAL_PWR_DisablePVD+0xc>)
 8003ccc:	6813      	ldr	r3, [r2, #0]
 8003cce:	438b      	bics	r3, r1
 8003cd0:	6013      	str	r3, [r2, #0]
}
 8003cd2:	4770      	bx	lr
 8003cd4:	40007000 	.word	0x40007000

08003cd8 <HAL_PWR_EnterSLEEPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003cd8:	4b17      	ldr	r3, [pc, #92]	; (8003d38 <HAL_PWR_EnterSLEEPMode+0x60>)
{
 8003cda:	b5f0      	push	{r4, r5, r6, r7, lr}
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003cdc:	4a17      	ldr	r2, [pc, #92]	; (8003d3c <HAL_PWR_EnterSLEEPMode+0x64>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003cde:	681e      	ldr	r6, [r3, #0]
{
 8003ce0:	0005      	movs	r5, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003ce2:	2080      	movs	r0, #128	; 0x80
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003ce4:	6a17      	ldr	r7, [r2, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003ce6:	0034      	movs	r4, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003ce8:	2201      	movs	r2, #1
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003cea:	0080      	lsls	r0, r0, #2
 8003cec:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003cee:	403a      	ands	r2, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 8003cf0:	4206      	tst	r6, r0
 8003cf2:	d005      	beq.n	8003d00 <HAL_PWR_EnterSLEEPMode+0x28>
 8003cf4:	2a00      	cmp	r2, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_PWR_EnterSLEEPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	4e11      	ldr	r6, [pc, #68]	; (8003d40 <HAL_PWR_EnterSLEEPMode+0x68>)
 8003cfc:	4030      	ands	r0, r6
 8003cfe:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003d00:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 8003d02:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003d04:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8003d06:	4328      	orrs	r0, r5

  /* Store the new value */
  PWR->CR = tmpreg;
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003d08:	4d0e      	ldr	r5, [pc, #56]	; (8003d44 <HAL_PWR_EnterSLEEPMode+0x6c>)
  PWR->CR = tmpreg;
 8003d0a:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003d0c:	6928      	ldr	r0, [r5, #16]
 8003d0e:	3601      	adds	r6, #1
 8003d10:	43b0      	bics	r0, r6
 8003d12:	6128      	str	r0, [r5, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003d14:	2901      	cmp	r1, #1
 8003d16:	d10b      	bne.n	8003d30 <HAL_PWR_EnterSLEEPMode+0x58>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003d18:	bf30      	wfi
    __SEV();
    __WFE();
    __WFE();
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 8003d1a:	2c00      	cmp	r4, #0
 8003d1c:	d006      	beq.n	8003d2c <HAL_PWR_EnterSLEEPMode+0x54>
 8003d1e:	2a00      	cmp	r2, #0
 8003d20:	d004      	beq.n	8003d2c <HAL_PWR_EnterSLEEPMode+0x54>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8003d22:	2280      	movs	r2, #128	; 0x80
 8003d24:	6819      	ldr	r1, [r3, #0]
 8003d26:	0092      	lsls	r2, r2, #2
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8003d2c:	46c0      	nop			; (mov r8, r8)

}
 8003d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 8003d30:	bf40      	sev
    __WFE();
 8003d32:	bf20      	wfe
    __WFE();
 8003d34:	bf20      	wfe
 8003d36:	e7f0      	b.n	8003d1a <HAL_PWR_EnterSLEEPMode+0x42>
 8003d38:	40007000 	.word	0x40007000
 8003d3c:	40010000 	.word	0x40010000
 8003d40:	fffffdff 	.word	0xfffffdff
 8003d44:	e000ed00 	.word	0xe000ed00

08003d48 <HAL_PWR_EnterSTOPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003d48:	4b19      	ldr	r3, [pc, #100]	; (8003db0 <HAL_PWR_EnterSTOPMode+0x68>)
{
 8003d4a:	b5f0      	push	{r4, r5, r6, r7, lr}
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003d4c:	681e      	ldr	r6, [r3, #0]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003d4e:	4c19      	ldr	r4, [pc, #100]	; (8003db4 <HAL_PWR_EnterSTOPMode+0x6c>)
{
 8003d50:	0002      	movs	r2, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003d52:	2080      	movs	r0, #128	; 0x80
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003d54:	6a27      	ldr	r7, [r4, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003d56:	0035      	movs	r5, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003d58:	2401      	movs	r4, #1
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003d5a:	0080      	lsls	r0, r0, #2
 8003d5c:	4005      	ands	r5, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003d5e:	403c      	ands	r4, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 8003d60:	4206      	tst	r6, r0
 8003d62:	d005      	beq.n	8003d70 <HAL_PWR_EnterSTOPMode+0x28>
 8003d64:	2c00      	cmp	r4, #0
 8003d66:	d003      	beq.n	8003d70 <HAL_PWR_EnterSTOPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8003d68:	6818      	ldr	r0, [r3, #0]
 8003d6a:	4e13      	ldr	r6, [pc, #76]	; (8003db8 <HAL_PWR_EnterSTOPMode+0x70>)
 8003d6c:	4030      	ands	r0, r6
 8003d6e:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003d70:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 8003d72:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003d74:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8003d76:	4310      	orrs	r0, r2

  /* Store the new value */
  PWR->CR = tmpreg;
 8003d78:	6018      	str	r0, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003d7a:	2004      	movs	r0, #4
 8003d7c:	4a0f      	ldr	r2, [pc, #60]	; (8003dbc <HAL_PWR_EnterSTOPMode+0x74>)
 8003d7e:	6916      	ldr	r6, [r2, #16]
 8003d80:	4330      	orrs	r0, r6
 8003d82:	6110      	str	r0, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003d84:	2901      	cmp	r1, #1
 8003d86:	d10e      	bne.n	8003da6 <HAL_PWR_EnterSTOPMode+0x5e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003d88:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003d8a:	2004      	movs	r0, #4
 8003d8c:	6911      	ldr	r1, [r2, #16]
 8003d8e:	4381      	bics	r1, r0
 8003d90:	6111      	str	r1, [r2, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8003d92:	2d00      	cmp	r5, #0
 8003d94:	d006      	beq.n	8003da4 <HAL_PWR_EnterSTOPMode+0x5c>
 8003d96:	2c00      	cmp	r4, #0
 8003d98:	d004      	beq.n	8003da4 <HAL_PWR_EnterSTOPMode+0x5c>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8003d9a:	2280      	movs	r2, #128	; 0x80
 8003d9c:	6819      	ldr	r1, [r3, #0]
 8003d9e:	0092      	lsls	r2, r2, #2
 8003da0:	430a      	orrs	r2, r1
 8003da2:	601a      	str	r2, [r3, #0]
  }
}
 8003da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 8003da6:	bf40      	sev
    __WFE();
 8003da8:	bf20      	wfe
    __WFE();
 8003daa:	bf20      	wfe
 8003dac:	e7ed      	b.n	8003d8a <HAL_PWR_EnterSTOPMode+0x42>
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	40007000 	.word	0x40007000
 8003db4:	40010000 	.word	0x40010000
 8003db8:	fffffdff 	.word	0xfffffdff
 8003dbc:	e000ed00 	.word	0xe000ed00

08003dc0 <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8003dc0:	2380      	movs	r3, #128	; 0x80
 8003dc2:	4a03      	ldr	r2, [pc, #12]	; (8003dd0 <HAL_PWREx_EnableFastWakeUp+0x10>)
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	6811      	ldr	r1, [r2, #0]
 8003dc8:	430b      	orrs	r3, r1
 8003dca:	6013      	str	r3, [r2, #0]
}
 8003dcc:	4770      	bx	lr
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	40007000 	.word	0x40007000

08003dd4 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8003dd4:	2380      	movs	r3, #128	; 0x80
 8003dd6:	4a03      	ldr	r2, [pc, #12]	; (8003de4 <HAL_PWREx_EnableUltraLowPower+0x10>)
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	6811      	ldr	r1, [r2, #0]
 8003ddc:	430b      	orrs	r3, r1
 8003dde:	6013      	str	r3, [r2, #0]
}
 8003de0:	4770      	bx	lr
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	40007000 	.word	0x40007000

08003de8 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003de8:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8003dea:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x78>)
{
 8003dec:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8003dee:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8003df0:	4022      	ands	r2, r4
 8003df2:	2a08      	cmp	r2, #8
 8003df4:	d031      	beq.n	8003e5a <HAL_RCC_GetSysClockFreq+0x72>
 8003df6:	2a0c      	cmp	r2, #12
 8003df8:	d009      	beq.n	8003e0e <HAL_RCC_GetSysClockFreq+0x26>
 8003dfa:	2a04      	cmp	r2, #4
 8003dfc:	d125      	bne.n	8003e4a <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003dfe:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8003e00:	4b18      	ldr	r3, [pc, #96]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003e02:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8003e04:	17c0      	asrs	r0, r0, #31
 8003e06:	4018      	ands	r0, r3
 8003e08:	4b17      	ldr	r3, [pc, #92]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x80>)
 8003e0a:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8003e0c:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003e0e:	02a2      	lsls	r2, r4, #10
 8003e10:	4816      	ldr	r0, [pc, #88]	; (8003e6c <HAL_RCC_GetSysClockFreq+0x84>)
 8003e12:	0f12      	lsrs	r2, r2, #28
 8003e14:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e16:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003e18:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e1a:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003e1c:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e1e:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003e20:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e22:	4211      	tst	r1, r2
 8003e24:	d009      	beq.n	8003e3a <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003e26:	4a12      	ldr	r2, [pc, #72]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x88>)
 8003e28:	2300      	movs	r3, #0
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	f7fc fb32 	bl	8000494 <__aeabi_lmul>
 8003e30:	0022      	movs	r2, r4
 8003e32:	2300      	movs	r3, #0
 8003e34:	f7fc fb0e 	bl	8000454 <__aeabi_uldivmod>
 8003e38:	e7e8      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	2310      	movs	r3, #16
 8003e3e:	421a      	tst	r2, r3
 8003e40:	d001      	beq.n	8003e46 <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003e42:	4a0c      	ldr	r2, [pc, #48]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x8c>)
 8003e44:	e7f0      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003e46:	4a08      	ldr	r2, [pc, #32]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x80>)
 8003e48:	e7ee      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003e4a:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003e4c:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003e4e:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003e50:	041b      	lsls	r3, r3, #16
 8003e52:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003e54:	3301      	adds	r3, #1
 8003e56:	4098      	lsls	r0, r3
  return sysclockfreq;
 8003e58:	e7d8      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8003e5a:	4805      	ldr	r0, [pc, #20]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x88>)
 8003e5c:	e7d6      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x24>
 8003e5e:	46c0      	nop			; (mov r8, r8)
 8003e60:	40021000 	.word	0x40021000
 8003e64:	ff48e500 	.word	0xff48e500
 8003e68:	00f42400 	.word	0x00f42400
 8003e6c:	08008c08 	.word	0x08008c08
 8003e70:	007a1200 	.word	0x007a1200
 8003e74:	003d0900 	.word	0x003d0900

08003e78 <HAL_RCC_OscConfig>:
{
 8003e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e7a:	0005      	movs	r5, r0
 8003e7c:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8003e7e:	2800      	cmp	r0, #0
 8003e80:	d059      	beq.n	8003f36 <HAL_RCC_OscConfig+0xbe>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e82:	230c      	movs	r3, #12
 8003e84:	4cb8      	ldr	r4, [pc, #736]	; (8004168 <HAL_RCC_OscConfig+0x2f0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e86:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e88:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e8a:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e8c:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e8e:	2380      	movs	r3, #128	; 0x80
 8003e90:	025b      	lsls	r3, r3, #9
 8003e92:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e94:	07d2      	lsls	r2, r2, #31
 8003e96:	d442      	bmi.n	8003f1e <HAL_RCC_OscConfig+0xa6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e98:	682b      	ldr	r3, [r5, #0]
 8003e9a:	079b      	lsls	r3, r3, #30
 8003e9c:	d500      	bpl.n	8003ea0 <HAL_RCC_OscConfig+0x28>
 8003e9e:	e08b      	b.n	8003fb8 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ea0:	682b      	ldr	r3, [r5, #0]
 8003ea2:	06db      	lsls	r3, r3, #27
 8003ea4:	d529      	bpl.n	8003efa <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ea6:	2e00      	cmp	r6, #0
 8003ea8:	d000      	beq.n	8003eac <HAL_RCC_OscConfig+0x34>
 8003eaa:	e0e4      	b.n	8004076 <HAL_RCC_OscConfig+0x1fe>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003eac:	6823      	ldr	r3, [r4, #0]
 8003eae:	059b      	lsls	r3, r3, #22
 8003eb0:	d502      	bpl.n	8003eb8 <HAL_RCC_OscConfig+0x40>
 8003eb2:	69eb      	ldr	r3, [r5, #28]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d03e      	beq.n	8003f36 <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eb8:	6862      	ldr	r2, [r4, #4]
 8003eba:	49ac      	ldr	r1, [pc, #688]	; (800416c <HAL_RCC_OscConfig+0x2f4>)
 8003ebc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003ebe:	400a      	ands	r2, r1
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ec4:	6861      	ldr	r1, [r4, #4]
 8003ec6:	6a2a      	ldr	r2, [r5, #32]
 8003ec8:	0209      	lsls	r1, r1, #8
 8003eca:	0a09      	lsrs	r1, r1, #8
 8003ecc:	0612      	lsls	r2, r2, #24
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003ed2:	2280      	movs	r2, #128	; 0x80
 8003ed4:	0b5b      	lsrs	r3, r3, #13
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	0212      	lsls	r2, r2, #8
 8003eda:	409a      	lsls	r2, r3
 8003edc:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003ede:	68e1      	ldr	r1, [r4, #12]
 8003ee0:	060a      	lsls	r2, r1, #24
 8003ee2:	49a3      	ldr	r1, [pc, #652]	; (8004170 <HAL_RCC_OscConfig+0x2f8>)
 8003ee4:	0f12      	lsrs	r2, r2, #28
 8003ee6:	5c8a      	ldrb	r2, [r1, r2]
 8003ee8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003eea:	4aa2      	ldr	r2, [pc, #648]	; (8004174 <HAL_RCC_OscConfig+0x2fc>)
 8003eec:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8003eee:	4ba2      	ldr	r3, [pc, #648]	; (8004178 <HAL_RCC_OscConfig+0x300>)
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	f7fe fd9f 	bl	8002a34 <HAL_InitTick>
        if(status != HAL_OK)
 8003ef6:	2800      	cmp	r0, #0
 8003ef8:	d134      	bne.n	8003f64 <HAL_RCC_OscConfig+0xec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003efa:	682b      	ldr	r3, [r5, #0]
 8003efc:	071b      	lsls	r3, r3, #28
 8003efe:	d500      	bpl.n	8003f02 <HAL_RCC_OscConfig+0x8a>
 8003f00:	e0f0      	b.n	80040e4 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f02:	682b      	ldr	r3, [r5, #0]
 8003f04:	075b      	lsls	r3, r3, #29
 8003f06:	d500      	bpl.n	8003f0a <HAL_RCC_OscConfig+0x92>
 8003f08:	e112      	b.n	8004130 <HAL_RCC_OscConfig+0x2b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f0a:	682b      	ldr	r3, [r5, #0]
 8003f0c:	069b      	lsls	r3, r3, #26
 8003f0e:	d500      	bpl.n	8003f12 <HAL_RCC_OscConfig+0x9a>
 8003f10:	e199      	b.n	8004246 <HAL_RCC_OscConfig+0x3ce>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f12:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d000      	beq.n	8003f1a <HAL_RCC_OscConfig+0xa2>
 8003f18:	e1c8      	b.n	80042ac <HAL_RCC_OscConfig+0x434>
  return HAL_OK;
 8003f1a:	2000      	movs	r0, #0
 8003f1c:	e022      	b.n	8003f64 <HAL_RCC_OscConfig+0xec>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f1e:	2e08      	cmp	r6, #8
 8003f20:	d003      	beq.n	8003f2a <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f22:	2e0c      	cmp	r6, #12
 8003f24:	d109      	bne.n	8003f3a <HAL_RCC_OscConfig+0xc2>
 8003f26:	2f00      	cmp	r7, #0
 8003f28:	d007      	beq.n	8003f3a <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f2a:	6823      	ldr	r3, [r4, #0]
 8003f2c:	039b      	lsls	r3, r3, #14
 8003f2e:	d5b3      	bpl.n	8003e98 <HAL_RCC_OscConfig+0x20>
 8003f30:	686b      	ldr	r3, [r5, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1b0      	bne.n	8003e98 <HAL_RCC_OscConfig+0x20>
          return HAL_ERROR;
 8003f36:	2001      	movs	r0, #1
 8003f38:	e014      	b.n	8003f64 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f3a:	686a      	ldr	r2, [r5, #4]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d113      	bne.n	8003f68 <HAL_RCC_OscConfig+0xf0>
 8003f40:	6822      	ldr	r2, [r4, #0]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003f46:	f7fe fd77 	bl	8002a38 <HAL_GetTick>
 8003f4a:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f4c:	2280      	movs	r2, #128	; 0x80
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	0292      	lsls	r2, r2, #10
 8003f52:	4213      	tst	r3, r2
 8003f54:	d1a0      	bne.n	8003e98 <HAL_RCC_OscConfig+0x20>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f56:	f7fe fd6f 	bl	8002a38 <HAL_GetTick>
 8003f5a:	9b01      	ldr	r3, [sp, #4]
 8003f5c:	1ac0      	subs	r0, r0, r3
 8003f5e:	2864      	cmp	r0, #100	; 0x64
 8003f60:	d9f4      	bls.n	8003f4c <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
 8003f62:	2003      	movs	r0, #3
}
 8003f64:	b007      	add	sp, #28
 8003f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f68:	21a0      	movs	r1, #160	; 0xa0
 8003f6a:	02c9      	lsls	r1, r1, #11
 8003f6c:	428a      	cmp	r2, r1
 8003f6e:	d105      	bne.n	8003f7c <HAL_RCC_OscConfig+0x104>
 8003f70:	2280      	movs	r2, #128	; 0x80
 8003f72:	6821      	ldr	r1, [r4, #0]
 8003f74:	02d2      	lsls	r2, r2, #11
 8003f76:	430a      	orrs	r2, r1
 8003f78:	6022      	str	r2, [r4, #0]
 8003f7a:	e7e1      	b.n	8003f40 <HAL_RCC_OscConfig+0xc8>
 8003f7c:	6821      	ldr	r1, [r4, #0]
 8003f7e:	487f      	ldr	r0, [pc, #508]	; (800417c <HAL_RCC_OscConfig+0x304>)
 8003f80:	4001      	ands	r1, r0
 8003f82:	6021      	str	r1, [r4, #0]
 8003f84:	6821      	ldr	r1, [r4, #0]
 8003f86:	400b      	ands	r3, r1
 8003f88:	9305      	str	r3, [sp, #20]
 8003f8a:	9b05      	ldr	r3, [sp, #20]
 8003f8c:	497c      	ldr	r1, [pc, #496]	; (8004180 <HAL_RCC_OscConfig+0x308>)
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	400b      	ands	r3, r1
 8003f92:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f94:	2a00      	cmp	r2, #0
 8003f96:	d1d6      	bne.n	8003f46 <HAL_RCC_OscConfig+0xce>
        tickstart = HAL_GetTick();
 8003f98:	f7fe fd4e 	bl	8002a38 <HAL_GetTick>
 8003f9c:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f9e:	2280      	movs	r2, #128	; 0x80
 8003fa0:	6823      	ldr	r3, [r4, #0]
 8003fa2:	0292      	lsls	r2, r2, #10
 8003fa4:	4213      	tst	r3, r2
 8003fa6:	d100      	bne.n	8003faa <HAL_RCC_OscConfig+0x132>
 8003fa8:	e776      	b.n	8003e98 <HAL_RCC_OscConfig+0x20>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003faa:	f7fe fd45 	bl	8002a38 <HAL_GetTick>
 8003fae:	9b01      	ldr	r3, [sp, #4]
 8003fb0:	1ac0      	subs	r0, r0, r3
 8003fb2:	2864      	cmp	r0, #100	; 0x64
 8003fb4:	d9f3      	bls.n	8003f9e <HAL_RCC_OscConfig+0x126>
 8003fb6:	e7d4      	b.n	8003f62 <HAL_RCC_OscConfig+0xea>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003fb8:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8003fba:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003fbc:	4213      	tst	r3, r2
 8003fbe:	d003      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003fc0:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003fc2:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003fc4:	4311      	orrs	r1, r2
 8003fc6:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fc8:	2e04      	cmp	r6, #4
 8003fca:	d003      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x15c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003fcc:	2e0c      	cmp	r6, #12
 8003fce:	d124      	bne.n	800401a <HAL_RCC_OscConfig+0x1a2>
 8003fd0:	2f00      	cmp	r7, #0
 8003fd2:	d122      	bne.n	800401a <HAL_RCC_OscConfig+0x1a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003fd4:	6822      	ldr	r2, [r4, #0]
 8003fd6:	0752      	lsls	r2, r2, #29
 8003fd8:	d501      	bpl.n	8003fde <HAL_RCC_OscConfig+0x166>
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0ab      	beq.n	8003f36 <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fde:	6861      	ldr	r1, [r4, #4]
 8003fe0:	692a      	ldr	r2, [r5, #16]
 8003fe2:	4868      	ldr	r0, [pc, #416]	; (8004184 <HAL_RCC_OscConfig+0x30c>)
 8003fe4:	0212      	lsls	r2, r2, #8
 8003fe6:	4001      	ands	r1, r0
 8003fe8:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003fea:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fec:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003fee:	6822      	ldr	r2, [r4, #0]
 8003ff0:	438a      	bics	r2, r1
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ff6:	f7ff fef7 	bl	8003de8 <HAL_RCC_GetSysClockFreq>
 8003ffa:	68e3      	ldr	r3, [r4, #12]
 8003ffc:	4a5c      	ldr	r2, [pc, #368]	; (8004170 <HAL_RCC_OscConfig+0x2f8>)
 8003ffe:	061b      	lsls	r3, r3, #24
 8004000:	0f1b      	lsrs	r3, r3, #28
 8004002:	5cd3      	ldrb	r3, [r2, r3]
 8004004:	40d8      	lsrs	r0, r3
 8004006:	4b5b      	ldr	r3, [pc, #364]	; (8004174 <HAL_RCC_OscConfig+0x2fc>)
 8004008:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 800400a:	4b5b      	ldr	r3, [pc, #364]	; (8004178 <HAL_RCC_OscConfig+0x300>)
 800400c:	6818      	ldr	r0, [r3, #0]
 800400e:	f7fe fd11 	bl	8002a34 <HAL_InitTick>
      if(status != HAL_OK)
 8004012:	2800      	cmp	r0, #0
 8004014:	d100      	bne.n	8004018 <HAL_RCC_OscConfig+0x1a0>
 8004016:	e743      	b.n	8003ea0 <HAL_RCC_OscConfig+0x28>
 8004018:	e7a4      	b.n	8003f64 <HAL_RCC_OscConfig+0xec>
      if(hsi_state != RCC_HSI_OFF)
 800401a:	2b00      	cmp	r3, #0
 800401c:	d019      	beq.n	8004052 <HAL_RCC_OscConfig+0x1da>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800401e:	2109      	movs	r1, #9
 8004020:	6822      	ldr	r2, [r4, #0]
 8004022:	438a      	bics	r2, r1
 8004024:	4313      	orrs	r3, r2
 8004026:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004028:	f7fe fd06 	bl	8002a38 <HAL_GetTick>
 800402c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800402e:	2204      	movs	r2, #4
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	4213      	tst	r3, r2
 8004034:	d007      	beq.n	8004046 <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004036:	6862      	ldr	r2, [r4, #4]
 8004038:	692b      	ldr	r3, [r5, #16]
 800403a:	4952      	ldr	r1, [pc, #328]	; (8004184 <HAL_RCC_OscConfig+0x30c>)
 800403c:	021b      	lsls	r3, r3, #8
 800403e:	400a      	ands	r2, r1
 8004040:	4313      	orrs	r3, r2
 8004042:	6063      	str	r3, [r4, #4]
 8004044:	e72c      	b.n	8003ea0 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004046:	f7fe fcf7 	bl	8002a38 <HAL_GetTick>
 800404a:	1bc0      	subs	r0, r0, r7
 800404c:	2802      	cmp	r0, #2
 800404e:	d9ee      	bls.n	800402e <HAL_RCC_OscConfig+0x1b6>
 8004050:	e787      	b.n	8003f62 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI_DISABLE();
 8004052:	2201      	movs	r2, #1
 8004054:	6823      	ldr	r3, [r4, #0]
 8004056:	4393      	bics	r3, r2
 8004058:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800405a:	f7fe fced 	bl	8002a38 <HAL_GetTick>
 800405e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004060:	2204      	movs	r2, #4
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	4213      	tst	r3, r2
 8004066:	d100      	bne.n	800406a <HAL_RCC_OscConfig+0x1f2>
 8004068:	e71a      	b.n	8003ea0 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800406a:	f7fe fce5 	bl	8002a38 <HAL_GetTick>
 800406e:	1bc0      	subs	r0, r0, r7
 8004070:	2802      	cmp	r0, #2
 8004072:	d9f5      	bls.n	8004060 <HAL_RCC_OscConfig+0x1e8>
 8004074:	e775      	b.n	8003f62 <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004076:	69eb      	ldr	r3, [r5, #28]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d020      	beq.n	80040be <HAL_RCC_OscConfig+0x246>
        __HAL_RCC_MSI_ENABLE();
 800407c:	2380      	movs	r3, #128	; 0x80
 800407e:	6822      	ldr	r2, [r4, #0]
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	4313      	orrs	r3, r2
 8004084:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004086:	f7fe fcd7 	bl	8002a38 <HAL_GetTick>
 800408a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800408c:	2280      	movs	r2, #128	; 0x80
 800408e:	6823      	ldr	r3, [r4, #0]
 8004090:	0092      	lsls	r2, r2, #2
 8004092:	4213      	tst	r3, r2
 8004094:	d00d      	beq.n	80040b2 <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004096:	6863      	ldr	r3, [r4, #4]
 8004098:	4a34      	ldr	r2, [pc, #208]	; (800416c <HAL_RCC_OscConfig+0x2f4>)
 800409a:	4013      	ands	r3, r2
 800409c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800409e:	4313      	orrs	r3, r2
 80040a0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040a2:	6862      	ldr	r2, [r4, #4]
 80040a4:	6a2b      	ldr	r3, [r5, #32]
 80040a6:	0212      	lsls	r2, r2, #8
 80040a8:	061b      	lsls	r3, r3, #24
 80040aa:	0a12      	lsrs	r2, r2, #8
 80040ac:	4313      	orrs	r3, r2
 80040ae:	6063      	str	r3, [r4, #4]
 80040b0:	e723      	b.n	8003efa <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040b2:	f7fe fcc1 	bl	8002a38 <HAL_GetTick>
 80040b6:	1bc0      	subs	r0, r0, r7
 80040b8:	2802      	cmp	r0, #2
 80040ba:	d9e7      	bls.n	800408c <HAL_RCC_OscConfig+0x214>
 80040bc:	e751      	b.n	8003f62 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_MSI_DISABLE();
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	4a31      	ldr	r2, [pc, #196]	; (8004188 <HAL_RCC_OscConfig+0x310>)
 80040c2:	4013      	ands	r3, r2
 80040c4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80040c6:	f7fe fcb7 	bl	8002a38 <HAL_GetTick>
 80040ca:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80040cc:	2280      	movs	r2, #128	; 0x80
 80040ce:	6823      	ldr	r3, [r4, #0]
 80040d0:	0092      	lsls	r2, r2, #2
 80040d2:	4213      	tst	r3, r2
 80040d4:	d100      	bne.n	80040d8 <HAL_RCC_OscConfig+0x260>
 80040d6:	e710      	b.n	8003efa <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040d8:	f7fe fcae 	bl	8002a38 <HAL_GetTick>
 80040dc:	1bc0      	subs	r0, r0, r7
 80040de:	2802      	cmp	r0, #2
 80040e0:	d9f4      	bls.n	80040cc <HAL_RCC_OscConfig+0x254>
 80040e2:	e73e      	b.n	8003f62 <HAL_RCC_OscConfig+0xea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040e4:	696a      	ldr	r2, [r5, #20]
 80040e6:	2301      	movs	r3, #1
 80040e8:	2a00      	cmp	r2, #0
 80040ea:	d010      	beq.n	800410e <HAL_RCC_OscConfig+0x296>
      __HAL_RCC_LSI_ENABLE();
 80040ec:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80040ee:	4313      	orrs	r3, r2
 80040f0:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80040f2:	f7fe fca1 	bl	8002a38 <HAL_GetTick>
 80040f6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80040f8:	2202      	movs	r2, #2
 80040fa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80040fc:	4213      	tst	r3, r2
 80040fe:	d000      	beq.n	8004102 <HAL_RCC_OscConfig+0x28a>
 8004100:	e6ff      	b.n	8003f02 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004102:	f7fe fc99 	bl	8002a38 <HAL_GetTick>
 8004106:	1bc0      	subs	r0, r0, r7
 8004108:	2802      	cmp	r0, #2
 800410a:	d9f5      	bls.n	80040f8 <HAL_RCC_OscConfig+0x280>
 800410c:	e729      	b.n	8003f62 <HAL_RCC_OscConfig+0xea>
      __HAL_RCC_LSI_DISABLE();
 800410e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004110:	439a      	bics	r2, r3
 8004112:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004114:	f7fe fc90 	bl	8002a38 <HAL_GetTick>
 8004118:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800411a:	2202      	movs	r2, #2
 800411c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800411e:	4213      	tst	r3, r2
 8004120:	d100      	bne.n	8004124 <HAL_RCC_OscConfig+0x2ac>
 8004122:	e6ee      	b.n	8003f02 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004124:	f7fe fc88 	bl	8002a38 <HAL_GetTick>
 8004128:	1bc0      	subs	r0, r0, r7
 800412a:	2802      	cmp	r0, #2
 800412c:	d9f5      	bls.n	800411a <HAL_RCC_OscConfig+0x2a2>
 800412e:	e718      	b.n	8003f62 <HAL_RCC_OscConfig+0xea>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004130:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004132:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004134:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004136:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8004138:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800413a:	421a      	tst	r2, r3
 800413c:	d104      	bne.n	8004148 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 800413e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004140:	4313      	orrs	r3, r2
 8004142:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8004144:	2301      	movs	r3, #1
 8004146:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004148:	2280      	movs	r2, #128	; 0x80
 800414a:	4f10      	ldr	r7, [pc, #64]	; (800418c <HAL_RCC_OscConfig+0x314>)
 800414c:	0052      	lsls	r2, r2, #1
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	4213      	tst	r3, r2
 8004152:	d01d      	beq.n	8004190 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004154:	2280      	movs	r2, #128	; 0x80
 8004156:	68ab      	ldr	r3, [r5, #8]
 8004158:	0052      	lsls	r2, r2, #1
 800415a:	4293      	cmp	r3, r2
 800415c:	d12e      	bne.n	80041bc <HAL_RCC_OscConfig+0x344>
 800415e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004160:	4313      	orrs	r3, r2
 8004162:	6523      	str	r3, [r4, #80]	; 0x50
 8004164:	e04f      	b.n	8004206 <HAL_RCC_OscConfig+0x38e>
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	40021000 	.word	0x40021000
 800416c:	ffff1fff 	.word	0xffff1fff
 8004170:	08008c11 	.word	0x08008c11
 8004174:	20000018 	.word	0x20000018
 8004178:	20000020 	.word	0x20000020
 800417c:	fffeffff 	.word	0xfffeffff
 8004180:	fffbffff 	.word	0xfffbffff
 8004184:	ffffe0ff 	.word	0xffffe0ff
 8004188:	fffffeff 	.word	0xfffffeff
 800418c:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004190:	2280      	movs	r2, #128	; 0x80
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	0052      	lsls	r2, r2, #1
 8004196:	4313      	orrs	r3, r2
 8004198:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800419a:	f7fe fc4d 	bl	8002a38 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419e:	2380      	movs	r3, #128	; 0x80
 80041a0:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 80041a2:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a4:	9303      	str	r3, [sp, #12]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	9a03      	ldr	r2, [sp, #12]
 80041aa:	4213      	tst	r3, r2
 80041ac:	d1d2      	bne.n	8004154 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ae:	f7fe fc43 	bl	8002a38 <HAL_GetTick>
 80041b2:	9b02      	ldr	r3, [sp, #8]
 80041b4:	1ac0      	subs	r0, r0, r3
 80041b6:	2864      	cmp	r0, #100	; 0x64
 80041b8:	d9f5      	bls.n	80041a6 <HAL_RCC_OscConfig+0x32e>
 80041ba:	e6d2      	b.n	8003f62 <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d116      	bne.n	80041ee <HAL_RCC_OscConfig+0x376>
 80041c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80041c2:	4a6b      	ldr	r2, [pc, #428]	; (8004370 <HAL_RCC_OscConfig+0x4f8>)
 80041c4:	4013      	ands	r3, r2
 80041c6:	6523      	str	r3, [r4, #80]	; 0x50
 80041c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80041ca:	4a6a      	ldr	r2, [pc, #424]	; (8004374 <HAL_RCC_OscConfig+0x4fc>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80041d0:	f7fe fc32 	bl	8002a38 <HAL_GetTick>
 80041d4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80041d6:	2280      	movs	r2, #128	; 0x80
 80041d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80041da:	0092      	lsls	r2, r2, #2
 80041dc:	4213      	tst	r3, r2
 80041de:	d01a      	beq.n	8004216 <HAL_RCC_OscConfig+0x39e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041e0:	f7fe fc2a 	bl	8002a38 <HAL_GetTick>
 80041e4:	4b64      	ldr	r3, [pc, #400]	; (8004378 <HAL_RCC_OscConfig+0x500>)
 80041e6:	1bc0      	subs	r0, r0, r7
 80041e8:	4298      	cmp	r0, r3
 80041ea:	d9f4      	bls.n	80041d6 <HAL_RCC_OscConfig+0x35e>
 80041ec:	e6b9      	b.n	8003f62 <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041ee:	21a0      	movs	r1, #160	; 0xa0
 80041f0:	00c9      	lsls	r1, r1, #3
 80041f2:	428b      	cmp	r3, r1
 80041f4:	d118      	bne.n	8004228 <HAL_RCC_OscConfig+0x3b0>
 80041f6:	2380      	movs	r3, #128	; 0x80
 80041f8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	430b      	orrs	r3, r1
 80041fe:	6523      	str	r3, [r4, #80]	; 0x50
 8004200:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004202:	431a      	orrs	r2, r3
 8004204:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004206:	f7fe fc17 	bl	8002a38 <HAL_GetTick>
 800420a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800420c:	2280      	movs	r2, #128	; 0x80
 800420e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004210:	0092      	lsls	r2, r2, #2
 8004212:	4213      	tst	r3, r2
 8004214:	d010      	beq.n	8004238 <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 8004216:	9b01      	ldr	r3, [sp, #4]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d000      	beq.n	800421e <HAL_RCC_OscConfig+0x3a6>
 800421c:	e675      	b.n	8003f0a <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 800421e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004220:	4a56      	ldr	r2, [pc, #344]	; (800437c <HAL_RCC_OscConfig+0x504>)
 8004222:	4013      	ands	r3, r2
 8004224:	63a3      	str	r3, [r4, #56]	; 0x38
 8004226:	e670      	b.n	8003f0a <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004228:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800422a:	4a51      	ldr	r2, [pc, #324]	; (8004370 <HAL_RCC_OscConfig+0x4f8>)
 800422c:	4013      	ands	r3, r2
 800422e:	6523      	str	r3, [r4, #80]	; 0x50
 8004230:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004232:	4a50      	ldr	r2, [pc, #320]	; (8004374 <HAL_RCC_OscConfig+0x4fc>)
 8004234:	4013      	ands	r3, r2
 8004236:	e794      	b.n	8004162 <HAL_RCC_OscConfig+0x2ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004238:	f7fe fbfe 	bl	8002a38 <HAL_GetTick>
 800423c:	4b4e      	ldr	r3, [pc, #312]	; (8004378 <HAL_RCC_OscConfig+0x500>)
 800423e:	1bc0      	subs	r0, r0, r7
 8004240:	4298      	cmp	r0, r3
 8004242:	d9e3      	bls.n	800420c <HAL_RCC_OscConfig+0x394>
 8004244:	e68d      	b.n	8003f62 <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004246:	69a9      	ldr	r1, [r5, #24]
 8004248:	2301      	movs	r3, #1
 800424a:	4a4d      	ldr	r2, [pc, #308]	; (8004380 <HAL_RCC_OscConfig+0x508>)
 800424c:	2900      	cmp	r1, #0
 800424e:	d018      	beq.n	8004282 <HAL_RCC_OscConfig+0x40a>
        __HAL_RCC_HSI48_ENABLE();
 8004250:	68a1      	ldr	r1, [r4, #8]
 8004252:	4319      	orrs	r1, r3
 8004254:	60a1      	str	r1, [r4, #8]
 8004256:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004258:	430b      	orrs	r3, r1
 800425a:	6363      	str	r3, [r4, #52]	; 0x34
 800425c:	2380      	movs	r3, #128	; 0x80
 800425e:	6a11      	ldr	r1, [r2, #32]
 8004260:	019b      	lsls	r3, r3, #6
 8004262:	430b      	orrs	r3, r1
 8004264:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8004266:	f7fe fbe7 	bl	8002a38 <HAL_GetTick>
 800426a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800426c:	2202      	movs	r2, #2
 800426e:	68a3      	ldr	r3, [r4, #8]
 8004270:	4213      	tst	r3, r2
 8004272:	d000      	beq.n	8004276 <HAL_RCC_OscConfig+0x3fe>
 8004274:	e64d      	b.n	8003f12 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004276:	f7fe fbdf 	bl	8002a38 <HAL_GetTick>
 800427a:	1bc0      	subs	r0, r0, r7
 800427c:	2802      	cmp	r0, #2
 800427e:	d9f5      	bls.n	800426c <HAL_RCC_OscConfig+0x3f4>
 8004280:	e66f      	b.n	8003f62 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI48_DISABLE();
 8004282:	68a1      	ldr	r1, [r4, #8]
 8004284:	4399      	bics	r1, r3
 8004286:	60a1      	str	r1, [r4, #8]
 8004288:	6a13      	ldr	r3, [r2, #32]
 800428a:	493e      	ldr	r1, [pc, #248]	; (8004384 <HAL_RCC_OscConfig+0x50c>)
 800428c:	400b      	ands	r3, r1
 800428e:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8004290:	f7fe fbd2 	bl	8002a38 <HAL_GetTick>
 8004294:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004296:	2202      	movs	r2, #2
 8004298:	68a3      	ldr	r3, [r4, #8]
 800429a:	4213      	tst	r3, r2
 800429c:	d100      	bne.n	80042a0 <HAL_RCC_OscConfig+0x428>
 800429e:	e638      	b.n	8003f12 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042a0:	f7fe fbca 	bl	8002a38 <HAL_GetTick>
 80042a4:	1bc0      	subs	r0, r0, r7
 80042a6:	2802      	cmp	r0, #2
 80042a8:	d9f5      	bls.n	8004296 <HAL_RCC_OscConfig+0x41e>
 80042aa:	e65a      	b.n	8003f62 <HAL_RCC_OscConfig+0xea>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042ac:	2e0c      	cmp	r6, #12
 80042ae:	d043      	beq.n	8004338 <HAL_RCC_OscConfig+0x4c0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042b0:	4a35      	ldr	r2, [pc, #212]	; (8004388 <HAL_RCC_OscConfig+0x510>)
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d12e      	bne.n	8004314 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_PLL_DISABLE();
 80042b6:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80042b8:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80042ba:	4013      	ands	r3, r2
 80042bc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80042be:	f7fe fbbb 	bl	8002a38 <HAL_GetTick>
 80042c2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80042c4:	04bf      	lsls	r7, r7, #18
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	423b      	tst	r3, r7
 80042ca:	d11d      	bne.n	8004308 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042cc:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80042ce:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80042d0:	68e2      	ldr	r2, [r4, #12]
 80042d2:	430b      	orrs	r3, r1
 80042d4:	492d      	ldr	r1, [pc, #180]	; (800438c <HAL_RCC_OscConfig+0x514>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80042d6:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042d8:	400a      	ands	r2, r1
 80042da:	4313      	orrs	r3, r2
 80042dc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80042de:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80042e4:	2380      	movs	r3, #128	; 0x80
 80042e6:	6822      	ldr	r2, [r4, #0]
 80042e8:	045b      	lsls	r3, r3, #17
 80042ea:	4313      	orrs	r3, r2
 80042ec:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80042ee:	f7fe fba3 	bl	8002a38 <HAL_GetTick>
 80042f2:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80042f4:	6823      	ldr	r3, [r4, #0]
 80042f6:	4233      	tst	r3, r6
 80042f8:	d000      	beq.n	80042fc <HAL_RCC_OscConfig+0x484>
 80042fa:	e60e      	b.n	8003f1a <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042fc:	f7fe fb9c 	bl	8002a38 <HAL_GetTick>
 8004300:	1b40      	subs	r0, r0, r5
 8004302:	2802      	cmp	r0, #2
 8004304:	d9f6      	bls.n	80042f4 <HAL_RCC_OscConfig+0x47c>
 8004306:	e62c      	b.n	8003f62 <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004308:	f7fe fb96 	bl	8002a38 <HAL_GetTick>
 800430c:	1b80      	subs	r0, r0, r6
 800430e:	2802      	cmp	r0, #2
 8004310:	d9d9      	bls.n	80042c6 <HAL_RCC_OscConfig+0x44e>
 8004312:	e626      	b.n	8003f62 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_PLL_DISABLE();
 8004314:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004316:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004318:	4013      	ands	r3, r2
 800431a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800431c:	f7fe fb8c 	bl	8002a38 <HAL_GetTick>
 8004320:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004322:	04b6      	lsls	r6, r6, #18
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	4233      	tst	r3, r6
 8004328:	d100      	bne.n	800432c <HAL_RCC_OscConfig+0x4b4>
 800432a:	e5f6      	b.n	8003f1a <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800432c:	f7fe fb84 	bl	8002a38 <HAL_GetTick>
 8004330:	1b40      	subs	r0, r0, r5
 8004332:	2802      	cmp	r0, #2
 8004334:	d9f6      	bls.n	8004324 <HAL_RCC_OscConfig+0x4ac>
 8004336:	e614      	b.n	8003f62 <HAL_RCC_OscConfig+0xea>
        return HAL_ERROR;
 8004338:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800433a:	2b01      	cmp	r3, #1
 800433c:	d100      	bne.n	8004340 <HAL_RCC_OscConfig+0x4c8>
 800433e:	e611      	b.n	8003f64 <HAL_RCC_OscConfig+0xec>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004340:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8004342:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004344:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8004346:	0252      	lsls	r2, r2, #9
 8004348:	401a      	ands	r2, r3
 800434a:	428a      	cmp	r2, r1
 800434c:	d000      	beq.n	8004350 <HAL_RCC_OscConfig+0x4d8>
 800434e:	e5f2      	b.n	8003f36 <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004350:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004352:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004354:	0392      	lsls	r2, r2, #14
 8004356:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004358:	428a      	cmp	r2, r1
 800435a:	d000      	beq.n	800435e <HAL_RCC_OscConfig+0x4e6>
 800435c:	e5eb      	b.n	8003f36 <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800435e:	22c0      	movs	r2, #192	; 0xc0
 8004360:	0412      	lsls	r2, r2, #16
 8004362:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004364:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004366:	4293      	cmp	r3, r2
 8004368:	d100      	bne.n	800436c <HAL_RCC_OscConfig+0x4f4>
 800436a:	e5d6      	b.n	8003f1a <HAL_RCC_OscConfig+0xa2>
 800436c:	e5e3      	b.n	8003f36 <HAL_RCC_OscConfig+0xbe>
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	fffffeff 	.word	0xfffffeff
 8004374:	fffffbff 	.word	0xfffffbff
 8004378:	00001388 	.word	0x00001388
 800437c:	efffffff 	.word	0xefffffff
 8004380:	40010000 	.word	0x40010000
 8004384:	ffffdfff 	.word	0xffffdfff
 8004388:	feffffff 	.word	0xfeffffff
 800438c:	ff02ffff 	.word	0xff02ffff

08004390 <HAL_RCC_ClockConfig>:
{
 8004390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004392:	1e04      	subs	r4, r0, #0
 8004394:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8004396:	d101      	bne.n	800439c <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8004398:	2001      	movs	r0, #1
}
 800439a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800439c:	2601      	movs	r6, #1
 800439e:	4d5b      	ldr	r5, [pc, #364]	; (800450c <HAL_RCC_ClockConfig+0x17c>)
 80043a0:	9a01      	ldr	r2, [sp, #4]
 80043a2:	682b      	ldr	r3, [r5, #0]
 80043a4:	4033      	ands	r3, r6
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d331      	bcc.n	800440e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043aa:	6822      	ldr	r2, [r4, #0]
 80043ac:	0793      	lsls	r3, r2, #30
 80043ae:	d443      	bmi.n	8004438 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043b0:	07d3      	lsls	r3, r2, #31
 80043b2:	d449      	bmi.n	8004448 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043b4:	2601      	movs	r6, #1
 80043b6:	682b      	ldr	r3, [r5, #0]
 80043b8:	9a01      	ldr	r2, [sp, #4]
 80043ba:	4033      	ands	r3, r6
 80043bc:	4293      	cmp	r3, r2
 80043be:	d909      	bls.n	80043d4 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043c0:	682b      	ldr	r3, [r5, #0]
 80043c2:	43b3      	bics	r3, r6
 80043c4:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80043c6:	f7fe fb37 	bl	8002a38 <HAL_GetTick>
 80043ca:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043cc:	682b      	ldr	r3, [r5, #0]
 80043ce:	4233      	tst	r3, r6
 80043d0:	d000      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x44>
 80043d2:	e08c      	b.n	80044ee <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d4:	6822      	ldr	r2, [r4, #0]
 80043d6:	4d4e      	ldr	r5, [pc, #312]	; (8004510 <HAL_RCC_ClockConfig+0x180>)
 80043d8:	0753      	lsls	r3, r2, #29
 80043da:	d500      	bpl.n	80043de <HAL_RCC_ClockConfig+0x4e>
 80043dc:	e08f      	b.n	80044fe <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043de:	0713      	lsls	r3, r2, #28
 80043e0:	d506      	bpl.n	80043f0 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043e2:	68ea      	ldr	r2, [r5, #12]
 80043e4:	6923      	ldr	r3, [r4, #16]
 80043e6:	494b      	ldr	r1, [pc, #300]	; (8004514 <HAL_RCC_ClockConfig+0x184>)
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	400a      	ands	r2, r1
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043f0:	f7ff fcfa 	bl	8003de8 <HAL_RCC_GetSysClockFreq>
 80043f4:	68eb      	ldr	r3, [r5, #12]
 80043f6:	4a48      	ldr	r2, [pc, #288]	; (8004518 <HAL_RCC_ClockConfig+0x188>)
 80043f8:	061b      	lsls	r3, r3, #24
 80043fa:	0f1b      	lsrs	r3, r3, #28
 80043fc:	5cd3      	ldrb	r3, [r2, r3]
 80043fe:	40d8      	lsrs	r0, r3
 8004400:	4b46      	ldr	r3, [pc, #280]	; (800451c <HAL_RCC_ClockConfig+0x18c>)
 8004402:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8004404:	4b46      	ldr	r3, [pc, #280]	; (8004520 <HAL_RCC_ClockConfig+0x190>)
 8004406:	6818      	ldr	r0, [r3, #0]
 8004408:	f7fe fb14 	bl	8002a34 <HAL_InitTick>
  if(status != HAL_OK)
 800440c:	e7c5      	b.n	800439a <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800440e:	682b      	ldr	r3, [r5, #0]
 8004410:	9a01      	ldr	r2, [sp, #4]
 8004412:	43b3      	bics	r3, r6
 8004414:	4313      	orrs	r3, r2
 8004416:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004418:	f7fe fb0e 	bl	8002a38 <HAL_GetTick>
 800441c:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800441e:	682b      	ldr	r3, [r5, #0]
 8004420:	9a01      	ldr	r2, [sp, #4]
 8004422:	4033      	ands	r3, r6
 8004424:	4293      	cmp	r3, r2
 8004426:	d0c0      	beq.n	80043aa <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004428:	f7fe fb06 	bl	8002a38 <HAL_GetTick>
 800442c:	4b3d      	ldr	r3, [pc, #244]	; (8004524 <HAL_RCC_ClockConfig+0x194>)
 800442e:	1bc0      	subs	r0, r0, r7
 8004430:	4298      	cmp	r0, r3
 8004432:	d9f4      	bls.n	800441e <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8004434:	2003      	movs	r0, #3
 8004436:	e7b0      	b.n	800439a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004438:	20f0      	movs	r0, #240	; 0xf0
 800443a:	4935      	ldr	r1, [pc, #212]	; (8004510 <HAL_RCC_ClockConfig+0x180>)
 800443c:	68cb      	ldr	r3, [r1, #12]
 800443e:	4383      	bics	r3, r0
 8004440:	68a0      	ldr	r0, [r4, #8]
 8004442:	4303      	orrs	r3, r0
 8004444:	60cb      	str	r3, [r1, #12]
 8004446:	e7b3      	b.n	80043b0 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004448:	4e31      	ldr	r6, [pc, #196]	; (8004510 <HAL_RCC_ClockConfig+0x180>)
 800444a:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800444c:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800444e:	2a02      	cmp	r2, #2
 8004450:	d118      	bne.n	8004484 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004452:	039b      	lsls	r3, r3, #14
 8004454:	d5a0      	bpl.n	8004398 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004456:	2103      	movs	r1, #3
 8004458:	68f3      	ldr	r3, [r6, #12]
 800445a:	438b      	bics	r3, r1
 800445c:	4313      	orrs	r3, r2
 800445e:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8004460:	f7fe faea 	bl	8002a38 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004464:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8004466:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004468:	2b02      	cmp	r3, #2
 800446a:	d118      	bne.n	800449e <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800446c:	220c      	movs	r2, #12
 800446e:	68f3      	ldr	r3, [r6, #12]
 8004470:	4013      	ands	r3, r2
 8004472:	2b08      	cmp	r3, #8
 8004474:	d09e      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004476:	f7fe fadf 	bl	8002a38 <HAL_GetTick>
 800447a:	4b2a      	ldr	r3, [pc, #168]	; (8004524 <HAL_RCC_ClockConfig+0x194>)
 800447c:	1bc0      	subs	r0, r0, r7
 800447e:	4298      	cmp	r0, r3
 8004480:	d9f4      	bls.n	800446c <HAL_RCC_ClockConfig+0xdc>
 8004482:	e7d7      	b.n	8004434 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004484:	2a03      	cmp	r2, #3
 8004486:	d102      	bne.n	800448e <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004488:	019b      	lsls	r3, r3, #6
 800448a:	d4e4      	bmi.n	8004456 <HAL_RCC_ClockConfig+0xc6>
 800448c:	e784      	b.n	8004398 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800448e:	2a01      	cmp	r2, #1
 8004490:	d102      	bne.n	8004498 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004492:	075b      	lsls	r3, r3, #29
 8004494:	d4df      	bmi.n	8004456 <HAL_RCC_ClockConfig+0xc6>
 8004496:	e77f      	b.n	8004398 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004498:	059b      	lsls	r3, r3, #22
 800449a:	d4dc      	bmi.n	8004456 <HAL_RCC_ClockConfig+0xc6>
 800449c:	e77c      	b.n	8004398 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d10b      	bne.n	80044ba <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044a2:	220c      	movs	r2, #12
 80044a4:	68f3      	ldr	r3, [r6, #12]
 80044a6:	4013      	ands	r3, r2
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d083      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ac:	f7fe fac4 	bl	8002a38 <HAL_GetTick>
 80044b0:	4b1c      	ldr	r3, [pc, #112]	; (8004524 <HAL_RCC_ClockConfig+0x194>)
 80044b2:	1bc0      	subs	r0, r0, r7
 80044b4:	4298      	cmp	r0, r3
 80044b6:	d9f4      	bls.n	80044a2 <HAL_RCC_ClockConfig+0x112>
 80044b8:	e7bc      	b.n	8004434 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d011      	beq.n	80044e2 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80044be:	220c      	movs	r2, #12
 80044c0:	68f3      	ldr	r3, [r6, #12]
 80044c2:	4213      	tst	r3, r2
 80044c4:	d100      	bne.n	80044c8 <HAL_RCC_ClockConfig+0x138>
 80044c6:	e775      	b.n	80043b4 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044c8:	f7fe fab6 	bl	8002a38 <HAL_GetTick>
 80044cc:	4b15      	ldr	r3, [pc, #84]	; (8004524 <HAL_RCC_ClockConfig+0x194>)
 80044ce:	1bc0      	subs	r0, r0, r7
 80044d0:	4298      	cmp	r0, r3
 80044d2:	d9f4      	bls.n	80044be <HAL_RCC_ClockConfig+0x12e>
 80044d4:	e7ae      	b.n	8004434 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044d6:	f7fe faaf 	bl	8002a38 <HAL_GetTick>
 80044da:	4b12      	ldr	r3, [pc, #72]	; (8004524 <HAL_RCC_ClockConfig+0x194>)
 80044dc:	1bc0      	subs	r0, r0, r7
 80044de:	4298      	cmp	r0, r3
 80044e0:	d8a8      	bhi.n	8004434 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80044e2:	220c      	movs	r2, #12
 80044e4:	68f3      	ldr	r3, [r6, #12]
 80044e6:	4013      	ands	r3, r2
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d1f4      	bne.n	80044d6 <HAL_RCC_ClockConfig+0x146>
 80044ec:	e762      	b.n	80043b4 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ee:	f7fe faa3 	bl	8002a38 <HAL_GetTick>
 80044f2:	4b0c      	ldr	r3, [pc, #48]	; (8004524 <HAL_RCC_ClockConfig+0x194>)
 80044f4:	1bc0      	subs	r0, r0, r7
 80044f6:	4298      	cmp	r0, r3
 80044f8:	d800      	bhi.n	80044fc <HAL_RCC_ClockConfig+0x16c>
 80044fa:	e767      	b.n	80043cc <HAL_RCC_ClockConfig+0x3c>
 80044fc:	e79a      	b.n	8004434 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044fe:	68eb      	ldr	r3, [r5, #12]
 8004500:	4909      	ldr	r1, [pc, #36]	; (8004528 <HAL_RCC_ClockConfig+0x198>)
 8004502:	400b      	ands	r3, r1
 8004504:	68e1      	ldr	r1, [r4, #12]
 8004506:	430b      	orrs	r3, r1
 8004508:	60eb      	str	r3, [r5, #12]
 800450a:	e768      	b.n	80043de <HAL_RCC_ClockConfig+0x4e>
 800450c:	40022000 	.word	0x40022000
 8004510:	40021000 	.word	0x40021000
 8004514:	ffffc7ff 	.word	0xffffc7ff
 8004518:	08008c11 	.word	0x08008c11
 800451c:	20000018 	.word	0x20000018
 8004520:	20000020 	.word	0x20000020
 8004524:	00001388 	.word	0x00001388
 8004528:	fffff8ff 	.word	0xfffff8ff

0800452c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800452c:	4b04      	ldr	r3, [pc, #16]	; (8004540 <HAL_RCC_GetPCLK1Freq+0x14>)
 800452e:	4a05      	ldr	r2, [pc, #20]	; (8004544 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	055b      	lsls	r3, r3, #21
 8004534:	0f5b      	lsrs	r3, r3, #29
 8004536:	5cd3      	ldrb	r3, [r2, r3]
 8004538:	4a03      	ldr	r2, [pc, #12]	; (8004548 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800453a:	6810      	ldr	r0, [r2, #0]
 800453c:	40d8      	lsrs	r0, r3
}
 800453e:	4770      	bx	lr
 8004540:	40021000 	.word	0x40021000
 8004544:	08008c21 	.word	0x08008c21
 8004548:	20000018 	.word	0x20000018

0800454c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800454c:	4b04      	ldr	r3, [pc, #16]	; (8004560 <HAL_RCC_GetPCLK2Freq+0x14>)
 800454e:	4a05      	ldr	r2, [pc, #20]	; (8004564 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	049b      	lsls	r3, r3, #18
 8004554:	0f5b      	lsrs	r3, r3, #29
 8004556:	5cd3      	ldrb	r3, [r2, r3]
 8004558:	4a03      	ldr	r2, [pc, #12]	; (8004568 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800455a:	6810      	ldr	r0, [r2, #0]
 800455c:	40d8      	lsrs	r0, r3
}
 800455e:	4770      	bx	lr
 8004560:	40021000 	.word	0x40021000
 8004564:	08008c21 	.word	0x08008c21
 8004568:	20000018 	.word	0x20000018

0800456c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800456c:	6803      	ldr	r3, [r0, #0]
{
 800456e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004570:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004572:	069b      	lsls	r3, r3, #26
 8004574:	d53f      	bpl.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004576:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 8004578:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800457a:	4c60      	ldr	r4, [pc, #384]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800457c:	055b      	lsls	r3, r3, #21
 800457e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 8004580:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004582:	421a      	tst	r2, r3
 8004584:	d104      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004586:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004588:	4313      	orrs	r3, r2
 800458a:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 800458c:	2301      	movs	r3, #1
 800458e:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004590:	2780      	movs	r7, #128	; 0x80
 8004592:	4e5b      	ldr	r6, [pc, #364]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004594:	007f      	lsls	r7, r7, #1
 8004596:	6833      	ldr	r3, [r6, #0]
 8004598:	423b      	tst	r3, r7
 800459a:	d06e      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800459c:	686b      	ldr	r3, [r5, #4]
 800459e:	22c0      	movs	r2, #192	; 0xc0
 80045a0:	20c0      	movs	r0, #192	; 0xc0
 80045a2:	001e      	movs	r6, r3
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80045a4:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80045a6:	0292      	lsls	r2, r2, #10
 80045a8:	0380      	lsls	r0, r0, #14
 80045aa:	0017      	movs	r7, r2
 80045ac:	4016      	ands	r6, r2
 80045ae:	4003      	ands	r3, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80045b0:	4001      	ands	r1, r0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80045b2:	428b      	cmp	r3, r1
 80045b4:	d000      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 80045b6:	e071      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x130>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80045b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80045ba:	001a      	movs	r2, r3
 80045bc:	403a      	ands	r2, r7

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80045be:	423b      	tst	r3, r7
 80045c0:	d000      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80045c2:	e074      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x142>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045c4:	6869      	ldr	r1, [r5, #4]
 80045c6:	23c0      	movs	r3, #192	; 0xc0
 80045c8:	000a      	movs	r2, r1
 80045ca:	029b      	lsls	r3, r3, #10
 80045cc:	401a      	ands	r2, r3
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d107      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	484b      	ldr	r0, [pc, #300]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80045d6:	4003      	ands	r3, r0
 80045d8:	20c0      	movs	r0, #192	; 0xc0
 80045da:	0380      	lsls	r0, r0, #14
 80045dc:	4001      	ands	r1, r0
 80045de:	430b      	orrs	r3, r1
 80045e0:	6023      	str	r3, [r4, #0]
 80045e2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80045e4:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045e6:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045e8:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d103      	bne.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045f0:	4a45      	ldr	r2, [pc, #276]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 80045f2:	4013      	ands	r3, r2
 80045f4:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045f6:	682b      	ldr	r3, [r5, #0]
 80045f8:	07da      	lsls	r2, r3, #31
 80045fa:	d506      	bpl.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045fc:	2003      	movs	r0, #3
 80045fe:	493f      	ldr	r1, [pc, #252]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004600:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004602:	4382      	bics	r2, r0
 8004604:	68a8      	ldr	r0, [r5, #8]
 8004606:	4302      	orrs	r2, r0
 8004608:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800460a:	079a      	lsls	r2, r3, #30
 800460c:	d506      	bpl.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800460e:	200c      	movs	r0, #12
 8004610:	493a      	ldr	r1, [pc, #232]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004612:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004614:	4382      	bics	r2, r0
 8004616:	68e8      	ldr	r0, [r5, #12]
 8004618:	4302      	orrs	r2, r0
 800461a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800461c:	075a      	lsls	r2, r3, #29
 800461e:	d506      	bpl.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004620:	4936      	ldr	r1, [pc, #216]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004622:	483a      	ldr	r0, [pc, #232]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8004624:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004626:	4002      	ands	r2, r0
 8004628:	6928      	ldr	r0, [r5, #16]
 800462a:	4302      	orrs	r2, r0
 800462c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800462e:	071a      	lsls	r2, r3, #28
 8004630:	d506      	bpl.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004632:	4932      	ldr	r1, [pc, #200]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004634:	4836      	ldr	r0, [pc, #216]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004636:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004638:	4002      	ands	r2, r0
 800463a:	6968      	ldr	r0, [r5, #20]
 800463c:	4302      	orrs	r2, r0
 800463e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004640:	05da      	lsls	r2, r3, #23
 8004642:	d506      	bpl.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004644:	492d      	ldr	r1, [pc, #180]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004646:	4833      	ldr	r0, [pc, #204]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004648:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800464a:	4002      	ands	r2, r0
 800464c:	69a8      	ldr	r0, [r5, #24]
 800464e:	4302      	orrs	r2, r0
 8004650:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004652:	065a      	lsls	r2, r3, #25
 8004654:	d506      	bpl.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004656:	4929      	ldr	r1, [pc, #164]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004658:	482f      	ldr	r0, [pc, #188]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800465a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800465c:	4002      	ands	r2, r0
 800465e:	6a28      	ldr	r0, [r5, #32]
 8004660:	4302      	orrs	r2, r0
 8004662:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8004664:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004666:	061b      	lsls	r3, r3, #24
 8004668:	d517      	bpl.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x12e>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800466a:	4a24      	ldr	r2, [pc, #144]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800466c:	492b      	ldr	r1, [pc, #172]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800466e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004670:	400b      	ands	r3, r1
 8004672:	69e9      	ldr	r1, [r5, #28]
 8004674:	430b      	orrs	r3, r1
 8004676:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004678:	e00f      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x12e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800467a:	6833      	ldr	r3, [r6, #0]
 800467c:	433b      	orrs	r3, r7
 800467e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004680:	f7fe f9da 	bl	8002a38 <HAL_GetTick>
 8004684:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004686:	6833      	ldr	r3, [r6, #0]
 8004688:	423b      	tst	r3, r7
 800468a:	d187      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800468c:	f7fe f9d4 	bl	8002a38 <HAL_GetTick>
 8004690:	9b01      	ldr	r3, [sp, #4]
 8004692:	1ac0      	subs	r0, r0, r3
 8004694:	2864      	cmp	r0, #100	; 0x64
 8004696:	d9f6      	bls.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          return HAL_TIMEOUT;
 8004698:	2003      	movs	r0, #3
}
 800469a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800469c:	4296      	cmp	r6, r2
 800469e:	d000      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80046a0:	e78a      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80046a2:	6823      	ldr	r3, [r4, #0]
          return HAL_ERROR;
 80046a4:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80046a6:	039b      	lsls	r3, r3, #14
 80046a8:	d400      	bmi.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x140>
 80046aa:	e785      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 80046ac:	e7f5      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x12e>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80046ae:	42b2      	cmp	r2, r6
 80046b0:	d100      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80046b2:	e787      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x58>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80046b4:	682b      	ldr	r3, [r5, #0]
 80046b6:	069b      	lsls	r3, r3, #26
 80046b8:	d400      	bmi.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x150>
 80046ba:	e783      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_BACKUPRESET_FORCE();
 80046bc:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80046be:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 80046c0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80046c2:	0312      	lsls	r2, r2, #12
 80046c4:	4302      	orrs	r2, r0
 80046c6:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046c8:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80046ca:	4b12      	ldr	r3, [pc, #72]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046cc:	4814      	ldr	r0, [pc, #80]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80046ce:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046d0:	4002      	ands	r2, r0
 80046d2:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 80046d4:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80046d6:	05cb      	lsls	r3, r1, #23
 80046d8:	d400      	bmi.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x170>
 80046da:	e773      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x58>
        tickstart = HAL_GetTick();
 80046dc:	f7fe f9ac 	bl	8002a38 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046e0:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80046e2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046e4:	00bf      	lsls	r7, r7, #2
 80046e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80046e8:	423b      	tst	r3, r7
 80046ea:	d000      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x182>
 80046ec:	e76a      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x58>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ee:	f7fe f9a3 	bl	8002a38 <HAL_GetTick>
 80046f2:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046f4:	1b80      	subs	r0, r0, r6
 80046f6:	4298      	cmp	r0, r3
 80046f8:	d9f5      	bls.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80046fa:	e7cd      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 80046fc:	40021000 	.word	0x40021000
 8004700:	40007000 	.word	0x40007000
 8004704:	ffcfffff 	.word	0xffcfffff
 8004708:	efffffff 	.word	0xefffffff
 800470c:	fffff3ff 	.word	0xfffff3ff
 8004710:	ffffcfff 	.word	0xffffcfff
 8004714:	fffcffff 	.word	0xfffcffff
 8004718:	fbffffff 	.word	0xfbffffff
 800471c:	fff3ffff 	.word	0xfff3ffff
 8004720:	fff7ffff 	.word	0xfff7ffff
 8004724:	00001388 	.word	0x00001388

08004728 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800472a:	2502      	movs	r5, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800472c:	1c46      	adds	r6, r0, #1
 800472e:	7ff3      	ldrb	r3, [r6, #31]
{
 8004730:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8004732:	0028      	movs	r0, r5
 8004734:	2b01      	cmp	r3, #1
 8004736:	d025      	beq.n	8004784 <HAL_RTC_DeactivateAlarm+0x5c>
 8004738:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800473a:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 800473c:	1967      	adds	r7, r4, r5
  __HAL_LOCK(hrtc);
 800473e:	77f3      	strb	r3, [r6, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004740:	77fd      	strb	r5, [r7, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	625a      	str	r2, [r3, #36]	; 0x24
 8004746:	3a77      	subs	r2, #119	; 0x77
 8004748:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800474a:	32ad      	adds	r2, #173	; 0xad
 800474c:	4291      	cmp	r1, r2
 800474e:	d12a      	bne.n	80047a6 <HAL_RTC_DeactivateAlarm+0x7e>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	4922      	ldr	r1, [pc, #136]	; (80047dc <HAL_RTC_DeactivateAlarm+0xb4>)
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);

    tickstart = HAL_GetTick();

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004754:	3d01      	subs	r5, #1
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004756:	400a      	ands	r2, r1
 8004758:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	4920      	ldr	r1, [pc, #128]	; (80047e0 <HAL_RTC_DeactivateAlarm+0xb8>)
 800475e:	400a      	ands	r2, r1
 8004760:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004762:	f7fe f969 	bl	8002a38 <HAL_GetTick>
 8004766:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	001a      	movs	r2, r3
 800476e:	402a      	ands	r2, r5
 8004770:	9201      	str	r2, [sp, #4]
 8004772:	422b      	tst	r3, r5
 8004774:	d007      	beq.n	8004786 <HAL_RTC_DeactivateAlarm+0x5e>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004776:	22ff      	movs	r2, #255	; 0xff
 8004778:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800477a:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800477c:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800477e:	2301      	movs	r3, #1
 8004780:	77fb      	strb	r3, [r7, #31]
  __HAL_UNLOCK(hrtc);
 8004782:	77f0      	strb	r0, [r6, #31]

  return HAL_OK;
}
 8004784:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004786:	f7fe f957 	bl	8002a38 <HAL_GetTick>
 800478a:	9b00      	ldr	r3, [sp, #0]
 800478c:	1ac0      	subs	r0, r0, r3
 800478e:	23fa      	movs	r3, #250	; 0xfa
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4298      	cmp	r0, r3
 8004794:	d9e8      	bls.n	8004768 <HAL_RTC_DeactivateAlarm+0x40>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004796:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004798:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800479a:	6823      	ldr	r3, [r4, #0]
 800479c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800479e:	77f8      	strb	r0, [r7, #31]
        __HAL_UNLOCK(hrtc);
 80047a0:	9b01      	ldr	r3, [sp, #4]
 80047a2:	77f3      	strb	r3, [r6, #31]
        return HAL_TIMEOUT;
 80047a4:	e7ee      	b.n	8004784 <HAL_RTC_DeactivateAlarm+0x5c>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	490e      	ldr	r1, [pc, #56]	; (80047e4 <HAL_RTC_DeactivateAlarm+0xbc>)
 80047aa:	400a      	ands	r2, r1
 80047ac:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	490d      	ldr	r1, [pc, #52]	; (80047e8 <HAL_RTC_DeactivateAlarm+0xc0>)
 80047b2:	400a      	ands	r2, r1
 80047b4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80047b6:	f7fe f93f 	bl	8002a38 <HAL_GetTick>
 80047ba:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	001a      	movs	r2, r3
 80047c2:	402a      	ands	r2, r5
 80047c4:	9201      	str	r2, [sp, #4]
 80047c6:	422b      	tst	r3, r5
 80047c8:	d1d5      	bne.n	8004776 <HAL_RTC_DeactivateAlarm+0x4e>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80047ca:	f7fe f935 	bl	8002a38 <HAL_GetTick>
 80047ce:	9b00      	ldr	r3, [sp, #0]
 80047d0:	1ac0      	subs	r0, r0, r3
 80047d2:	23fa      	movs	r3, #250	; 0xfa
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4298      	cmp	r0, r3
 80047d8:	d9f0      	bls.n	80047bc <HAL_RTC_DeactivateAlarm+0x94>
 80047da:	e7dc      	b.n	8004796 <HAL_RTC_DeactivateAlarm+0x6e>
 80047dc:	fffffeff 	.word	0xfffffeff
 80047e0:	ffffefff 	.word	0xffffefff
 80047e4:	fffffdff 	.word	0xfffffdff
 80047e8:	ffffdfff 	.word	0xffffdfff

080047ec <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80047ec:	6803      	ldr	r3, [r0, #0]
{
 80047ee:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80047f0:	689a      	ldr	r2, [r3, #8]
{
 80047f2:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80047f4:	04d2      	lsls	r2, r2, #19
 80047f6:	d50a      	bpl.n	800480e <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	05db      	lsls	r3, r3, #23
 80047fc:	d507      	bpl.n	800480e <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80047fe:	f7fd ffe0 	bl	80027c2 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004802:	6821      	ldr	r1, [r4, #0]
 8004804:	4b0e      	ldr	r3, [pc, #56]	; (8004840 <HAL_RTC_AlarmIRQHandler+0x54>)
 8004806:	68ca      	ldr	r2, [r1, #12]
 8004808:	b2d2      	uxtb	r2, r2
 800480a:	4313      	orrs	r3, r2
 800480c:	60cb      	str	r3, [r1, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	689a      	ldr	r2, [r3, #8]
 8004812:	0492      	lsls	r2, r2, #18
 8004814:	d50b      	bpl.n	800482e <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	059b      	lsls	r3, r3, #22
 800481a:	d508      	bpl.n	800482e <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800481c:	0020      	movs	r0, r4
 800481e:	f000 faf7 	bl	8004e10 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004822:	6821      	ldr	r1, [r4, #0]
 8004824:	4b07      	ldr	r3, [pc, #28]	; (8004844 <HAL_RTC_AlarmIRQHandler+0x58>)
 8004826:	68ca      	ldr	r2, [r1, #12]
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	4313      	orrs	r3, r2
 800482c:	60cb      	str	r3, [r1, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800482e:	2280      	movs	r2, #128	; 0x80
 8004830:	4b05      	ldr	r3, [pc, #20]	; (8004848 <HAL_RTC_AlarmIRQHandler+0x5c>)
 8004832:	0292      	lsls	r2, r2, #10
 8004834:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004836:	2301      	movs	r3, #1
 8004838:	3402      	adds	r4, #2
 800483a:	77e3      	strb	r3, [r4, #31]
}
 800483c:	bd10      	pop	{r4, pc}
 800483e:	46c0      	nop			; (mov r8, r8)
 8004840:	fffffe7f 	.word	0xfffffe7f
 8004844:	fffffd7f 	.word	0xfffffd7f
 8004848:	40010400 	.word	0x40010400

0800484c <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800484c:	21a0      	movs	r1, #160	; 0xa0
 800484e:	6802      	ldr	r2, [r0, #0]
{
 8004850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004852:	68d3      	ldr	r3, [r2, #12]
{
 8004854:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004856:	438b      	bics	r3, r1
 8004858:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800485a:	f7fe f8ed 	bl	8002a38 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800485e:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8004860:	0005      	movs	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004862:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004864:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	4233      	tst	r3, r6
 800486c:	d001      	beq.n	8004872 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800486e:	2000      	movs	r0, #0
}
 8004870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004872:	f7fe f8e1 	bl	8002a38 <HAL_GetTick>
 8004876:	1b40      	subs	r0, r0, r5
 8004878:	42b8      	cmp	r0, r7
 800487a:	d9f4      	bls.n	8004866 <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 800487c:	2003      	movs	r0, #3
 800487e:	e7f7      	b.n	8004870 <HAL_RTC_WaitForSynchro+0x24>

08004880 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004882:	2440      	movs	r4, #64	; 0x40
 8004884:	6803      	ldr	r3, [r0, #0]
{
 8004886:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004888:	68da      	ldr	r2, [r3, #12]
 800488a:	4222      	tst	r2, r4
 800488c:	d001      	beq.n	8004892 <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800488e:	2000      	movs	r0, #0
}
 8004890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004892:	2201      	movs	r2, #1
 8004894:	4252      	negs	r2, r2
 8004896:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8004898:	f7fe f8ce 	bl	8002a38 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800489c:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 800489e:	0006      	movs	r6, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80048a0:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80048a2:	682b      	ldr	r3, [r5, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	4223      	tst	r3, r4
 80048a8:	d1f1      	bne.n	800488e <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80048aa:	f7fe f8c5 	bl	8002a38 <HAL_GetTick>
 80048ae:	1b80      	subs	r0, r0, r6
 80048b0:	42b8      	cmp	r0, r7
 80048b2:	d9f6      	bls.n	80048a2 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 80048b4:	2003      	movs	r0, #3
 80048b6:	e7eb      	b.n	8004890 <RTC_EnterInitMode+0x10>

080048b8 <HAL_RTC_Init>:
{
 80048b8:	b570      	push	{r4, r5, r6, lr}
 80048ba:	0004      	movs	r4, r0
    return HAL_ERROR;
 80048bc:	2501      	movs	r5, #1
  if (hrtc == NULL)
 80048be:	2800      	cmp	r0, #0
 80048c0:	d01a      	beq.n	80048f8 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80048c2:	1c86      	adds	r6, r0, #2
 80048c4:	7ff3      	ldrb	r3, [r6, #31]
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d103      	bne.n	80048d4 <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 80048cc:	1943      	adds	r3, r0, r5
 80048ce:	77da      	strb	r2, [r3, #31]
    HAL_RTC_MspInit(hrtc);
 80048d0:	f7fd fd86 	bl	80023e0 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80048d4:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048d6:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 80048d8:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048da:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80048dc:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048de:	625a      	str	r2, [r3, #36]	; 0x24
 80048e0:	3a77      	subs	r2, #119	; 0x77
 80048e2:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80048e4:	f7ff ffcc 	bl	8004880 <RTC_EnterInitMode>
 80048e8:	6823      	ldr	r3, [r4, #0]
 80048ea:	1e05      	subs	r5, r0, #0
 80048ec:	d006      	beq.n	80048fc <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048ee:	22ff      	movs	r2, #255	; 0xff
 80048f0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80048f2:	2304      	movs	r3, #4
 80048f4:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 80048f6:	2501      	movs	r5, #1
}
 80048f8:	0028      	movs	r0, r5
 80048fa:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	491b      	ldr	r1, [pc, #108]	; (800496c <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004900:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004902:	400a      	ands	r2, r1
 8004904:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004906:	6862      	ldr	r2, [r4, #4]
 8004908:	6899      	ldr	r1, [r3, #8]
 800490a:	4302      	orrs	r2, r0
 800490c:	69a0      	ldr	r0, [r4, #24]
 800490e:	4302      	orrs	r2, r0
 8004910:	430a      	orrs	r2, r1
 8004912:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004914:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004916:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004918:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800491a:	68a2      	ldr	r2, [r4, #8]
 800491c:	6919      	ldr	r1, [r3, #16]
 800491e:	0412      	lsls	r2, r2, #16
 8004920:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004922:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004924:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004926:	68da      	ldr	r2, [r3, #12]
 8004928:	438a      	bics	r2, r1
 800492a:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800492c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800492e:	397d      	subs	r1, #125	; 0x7d
 8004930:	438a      	bics	r2, r1
 8004932:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004934:	69e2      	ldr	r2, [r4, #28]
 8004936:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004938:	4302      	orrs	r2, r0
 800493a:	430a      	orrs	r2, r1
 800493c:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	069b      	lsls	r3, r3, #26
 8004942:	d40c      	bmi.n	800495e <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004944:	0020      	movs	r0, r4
 8004946:	f7ff ff81 	bl	800484c <HAL_RTC_WaitForSynchro>
 800494a:	2800      	cmp	r0, #0
 800494c:	d007      	beq.n	800495e <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800494e:	22ff      	movs	r2, #255	; 0xff
 8004950:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 8004952:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004954:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004956:	2304      	movs	r3, #4
 8004958:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 800495a:	77e5      	strb	r5, [r4, #31]
 800495c:	e7cb      	b.n	80048f6 <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800495e:	22ff      	movs	r2, #255	; 0xff
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004964:	2301      	movs	r3, #1
 8004966:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 8004968:	e7c6      	b.n	80048f8 <HAL_RTC_Init+0x40>
 800496a:	46c0      	nop			; (mov r8, r8)
 800496c:	ff8fffbf 	.word	0xff8fffbf

08004970 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8004970:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8004972:	2809      	cmp	r0, #9
 8004974:	d803      	bhi.n	800497e <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8004976:	011b      	lsls	r3, r3, #4
 8004978:	4318      	orrs	r0, r3
 800497a:	b2c0      	uxtb	r0, r0
}
 800497c:	4770      	bx	lr
    Param -= 10U;
 800497e:	380a      	subs	r0, #10
    bcdhigh++;
 8004980:	3301      	adds	r3, #1
    Param -= 10U;
 8004982:	b2c0      	uxtb	r0, r0
 8004984:	e7f5      	b.n	8004972 <RTC_ByteToBcd2+0x2>
	...

08004988 <HAL_RTC_SetTime>:
{
 8004988:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800498a:	1c43      	adds	r3, r0, #1
{
 800498c:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 800498e:	9302      	str	r3, [sp, #8]
{
 8004990:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8004992:	7fd9      	ldrb	r1, [r3, #31]
 8004994:	2302      	movs	r3, #2
{
 8004996:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 8004998:	001f      	movs	r7, r3
 800499a:	2901      	cmp	r1, #1
 800499c:	d038      	beq.n	8004a10 <HAL_RTC_SetTime+0x88>
 800499e:	2101      	movs	r1, #1
 80049a0:	1840      	adds	r0, r0, r1
 80049a2:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80049a4:	18e9      	adds	r1, r5, r3
 80049a6:	77cb      	strb	r3, [r1, #31]
  if (Format == RTC_FORMAT_BIN)
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	7820      	ldrb	r0, [r4, #0]
 80049ac:	9301      	str	r3, [sp, #4]
 80049ae:	7866      	ldrb	r6, [r4, #1]
 80049b0:	2340      	movs	r3, #64	; 0x40
  hrtc->State = HAL_RTC_STATE_BUSY;
 80049b2:	9103      	str	r1, [sp, #12]
  if (Format == RTC_FORMAT_BIN)
 80049b4:	2a00      	cmp	r2, #0
 80049b6:	d12e      	bne.n	8004a16 <HAL_RTC_SetTime+0x8e>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80049b8:	9a01      	ldr	r2, [sp, #4]
 80049ba:	6892      	ldr	r2, [r2, #8]
 80049bc:	0011      	movs	r1, r2
 80049be:	4019      	ands	r1, r3
 80049c0:	421a      	tst	r2, r3
 80049c2:	d100      	bne.n	80049c6 <HAL_RTC_SetTime+0x3e>
      sTime->TimeFormat = 0x00U;
 80049c4:	70e1      	strb	r1, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80049c6:	f7ff ffd3 	bl	8004970 <RTC_ByteToBcd2>
 80049ca:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80049cc:	0030      	movs	r0, r6
 80049ce:	f7ff ffcf 	bl	8004970 <RTC_ByteToBcd2>
 80049d2:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80049d4:	78a0      	ldrb	r0, [r4, #2]
 80049d6:	f7ff ffcb 	bl	8004970 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80049da:	78e3      	ldrb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80049dc:	043f      	lsls	r7, r7, #16
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80049de:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80049e0:	4303      	orrs	r3, r0
 80049e2:	431f      	orrs	r7, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80049e4:	0236      	lsls	r6, r6, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049e6:	23ca      	movs	r3, #202	; 0xca
 80049e8:	9a01      	ldr	r2, [sp, #4]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80049ea:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049ec:	6253      	str	r3, [r2, #36]	; 0x24
 80049ee:	3b77      	subs	r3, #119	; 0x77
 80049f0:	6253      	str	r3, [r2, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80049f2:	f7ff ff45 	bl	8004880 <RTC_EnterInitMode>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80049f6:	433e      	orrs	r6, r7
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80049f8:	682b      	ldr	r3, [r5, #0]
 80049fa:	1e07      	subs	r7, r0, #0
 80049fc:	d01a      	beq.n	8004a34 <HAL_RTC_SetTime+0xac>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049fe:	22ff      	movs	r2, #255	; 0xff
 8004a00:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004a02:	2304      	movs	r3, #4
 8004a04:	9a03      	ldr	r2, [sp, #12]
 8004a06:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004a08:	2300      	movs	r3, #0
 8004a0a:	9a02      	ldr	r2, [sp, #8]
 8004a0c:	77d3      	strb	r3, [r2, #31]
        return HAL_ERROR;
 8004a0e:	2701      	movs	r7, #1
}
 8004a10:	0038      	movs	r0, r7
 8004a12:	b005      	add	sp, #20
 8004a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a16:	9a01      	ldr	r2, [sp, #4]
 8004a18:	6892      	ldr	r2, [r2, #8]
 8004a1a:	0011      	movs	r1, r2
 8004a1c:	4019      	ands	r1, r3
 8004a1e:	421a      	tst	r2, r3
 8004a20:	d100      	bne.n	8004a24 <HAL_RTC_SetTime+0x9c>
      sTime->TimeFormat = 0x00U;
 8004a22:	70e1      	strb	r1, [r4, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004a24:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004a26:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004a28:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004a2a:	78e7      	ldrb	r7, [r4, #3]
              ((uint32_t)sTime->Seconds) | \
 8004a2c:	78a0      	ldrb	r0, [r4, #2]
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004a2e:	043f      	lsls	r7, r7, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004a30:	4306      	orrs	r6, r0
 8004a32:	e7d8      	b.n	80049e6 <HAL_RTC_SetTime+0x5e>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004a34:	4815      	ldr	r0, [pc, #84]	; (8004a8c <HAL_RTC_SetTime+0x104>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004a36:	4916      	ldr	r1, [pc, #88]	; (8004a90 <HAL_RTC_SetTime+0x108>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004a38:	4006      	ands	r6, r0
 8004a3a:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004a3c:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004a3e:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004a40:	400a      	ands	r2, r1
 8004a42:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004a44:	68e2      	ldr	r2, [r4, #12]
 8004a46:	6899      	ldr	r1, [r3, #8]
 8004a48:	4302      	orrs	r2, r0
 8004a4a:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004a4c:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004a4e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	438a      	bics	r2, r1
 8004a54:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	069b      	lsls	r3, r3, #26
 8004a5a:	d40d      	bmi.n	8004a78 <HAL_RTC_SetTime+0xf0>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a5c:	0028      	movs	r0, r5
 8004a5e:	f7ff fef5 	bl	800484c <HAL_RTC_WaitForSynchro>
 8004a62:	2800      	cmp	r0, #0
 8004a64:	d008      	beq.n	8004a78 <HAL_RTC_SetTime+0xf0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a66:	22ff      	movs	r2, #255	; 0xff
 8004a68:	682b      	ldr	r3, [r5, #0]
 8004a6a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004a6c:	2304      	movs	r3, #4
 8004a6e:	9a03      	ldr	r2, [sp, #12]
 8004a70:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8004a72:	9b02      	ldr	r3, [sp, #8]
 8004a74:	77df      	strb	r7, [r3, #31]
 8004a76:	e7ca      	b.n	8004a0e <HAL_RTC_SetTime+0x86>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a78:	22ff      	movs	r2, #255	; 0xff
 8004a7a:	682b      	ldr	r3, [r5, #0]
 8004a7c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	9a03      	ldr	r2, [sp, #12]
 8004a82:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004a84:	2300      	movs	r3, #0
 8004a86:	9a02      	ldr	r2, [sp, #8]
 8004a88:	77d3      	strb	r3, [r2, #31]
    return HAL_OK;
 8004a8a:	e7c1      	b.n	8004a10 <HAL_RTC_SetTime+0x88>
 8004a8c:	007f7f7f 	.word	0x007f7f7f
 8004a90:	fffbffff 	.word	0xfffbffff

08004a94 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 8004a94:	2302      	movs	r3, #2
{
 8004a96:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004a98:	1c47      	adds	r7, r0, #1
{
 8004a9a:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8004a9c:	7ff9      	ldrb	r1, [r7, #31]
{
 8004a9e:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8004aa0:	001d      	movs	r5, r3
{
 8004aa2:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8004aa4:	2901      	cmp	r1, #1
 8004aa6:	d036      	beq.n	8004b16 <HAL_RTC_SetDate+0x82>
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004aac:	18c1      	adds	r1, r0, r3
 8004aae:	77cb      	strb	r3, [r1, #31]
 8004ab0:	9101      	str	r1, [sp, #4]
 8004ab2:	7831      	ldrb	r1, [r6, #0]
 8004ab4:	78f0      	ldrb	r0, [r6, #3]
 8004ab6:	0349      	lsls	r1, r1, #13
 8004ab8:	7873      	ldrb	r3, [r6, #1]
 8004aba:	78b5      	ldrb	r5, [r6, #2]
 8004abc:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004abe:	2a00      	cmp	r2, #0
 8004ac0:	d14c      	bne.n	8004b5c <HAL_RTC_SetDate+0xc8>
 8004ac2:	3210      	adds	r2, #16
 8004ac4:	4213      	tst	r3, r2
 8004ac6:	d002      	beq.n	8004ace <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004ac8:	4393      	bics	r3, r2
 8004aca:	330a      	adds	r3, #10
 8004acc:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004ace:	f7ff ff4f 	bl	8004970 <RTC_ByteToBcd2>
 8004ad2:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004ad4:	7870      	ldrb	r0, [r6, #1]
 8004ad6:	f7ff ff4b 	bl	8004970 <RTC_ByteToBcd2>
 8004ada:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004adc:	0028      	movs	r0, r5
 8004ade:	f7ff ff47 	bl	8004970 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004ae2:	9b03      	ldr	r3, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004ae4:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004ae6:	041d      	lsls	r5, r3, #16
 8004ae8:	9b02      	ldr	r3, [sp, #8]
 8004aea:	4318      	orrs	r0, r3
 8004aec:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004aee:	22ca      	movs	r2, #202	; 0xca
 8004af0:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004af2:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004af4:	625a      	str	r2, [r3, #36]	; 0x24
 8004af6:	3a77      	subs	r2, #119	; 0x77
 8004af8:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004afa:	f7ff fec1 	bl	8004880 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004afe:	432e      	orrs	r6, r5
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	1e05      	subs	r5, r0, #0
 8004b04:	d00a      	beq.n	8004b1c <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b06:	22ff      	movs	r2, #255	; 0xff
 8004b08:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004b0a:	2304      	movs	r3, #4
 8004b0c:	9a01      	ldr	r2, [sp, #4]
 8004b0e:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004b10:	2300      	movs	r3, #0
 8004b12:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8004b14:	2501      	movs	r5, #1
}
 8004b16:	0028      	movs	r0, r5
 8004b18:	b005      	add	sp, #20
 8004b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004b1c:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004b1e:	4812      	ldr	r0, [pc, #72]	; (8004b68 <HAL_RTC_SetDate+0xd4>)
 8004b20:	4006      	ands	r6, r0
 8004b22:	605e      	str	r6, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	438a      	bics	r2, r1
 8004b28:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	069b      	lsls	r3, r3, #26
 8004b2e:	d40c      	bmi.n	8004b4a <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b30:	0020      	movs	r0, r4
 8004b32:	f7ff fe8b 	bl	800484c <HAL_RTC_WaitForSynchro>
 8004b36:	2800      	cmp	r0, #0
 8004b38:	d007      	beq.n	8004b4a <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b3a:	22ff      	movs	r2, #255	; 0xff
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004b40:	2304      	movs	r3, #4
 8004b42:	9a01      	ldr	r2, [sp, #4]
 8004b44:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8004b46:	77fd      	strb	r5, [r7, #31]
 8004b48:	e7e4      	b.n	8004b14 <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b4a:	22ff      	movs	r2, #255	; 0xff
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8004b50:	2301      	movs	r3, #1
 8004b52:	9a01      	ldr	r2, [sp, #4]
 8004b54:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004b56:	2300      	movs	r3, #0
 8004b58:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8004b5a:	e7dc      	b.n	8004b16 <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004b5c:	9a02      	ldr	r2, [sp, #8]
 8004b5e:	0400      	lsls	r0, r0, #16
 8004b60:	4310      	orrs	r0, r2
 8004b62:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 8004b64:	021e      	lsls	r6, r3, #8
 8004b66:	e7c2      	b.n	8004aee <HAL_RTC_SetDate+0x5a>
 8004b68:	00ffff3f 	.word	0x00ffff3f

08004b6c <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8004b6c:	2302      	movs	r3, #2
{
 8004b6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b70:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8004b72:	1c41      	adds	r1, r0, #1
 8004b74:	7fce      	ldrb	r6, [r1, #31]
{
 8004b76:	0004      	movs	r4, r0
 8004b78:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	2e01      	cmp	r6, #1
 8004b7e:	d100      	bne.n	8004b82 <HAL_RTC_SetAlarm_IT+0x16>
 8004b80:	e095      	b.n	8004cae <HAL_RTC_SetAlarm_IT+0x142>
 8004b82:	3801      	subs	r0, #1
 8004b84:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b86:	18e1      	adds	r1, r4, r3
 8004b88:	77cb      	strb	r3, [r1, #31]
  if (Format == RTC_FORMAT_BIN)
 8004b8a:	7869      	ldrb	r1, [r5, #1]
 8004b8c:	6826      	ldr	r6, [r4, #0]
 8004b8e:	9101      	str	r1, [sp, #4]
 8004b90:	7828      	ldrb	r0, [r5, #0]
 8004b92:	78af      	ldrb	r7, [r5, #2]
 8004b94:	333e      	adds	r3, #62	; 0x3e
 8004b96:	2a00      	cmp	r2, #0
 8004b98:	d165      	bne.n	8004c66 <HAL_RTC_SetAlarm_IT+0xfa>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b9a:	68b2      	ldr	r2, [r6, #8]
 8004b9c:	0011      	movs	r1, r2
 8004b9e:	4019      	ands	r1, r3
 8004ba0:	421a      	tst	r2, r3
 8004ba2:	d100      	bne.n	8004ba6 <HAL_RTC_SetAlarm_IT+0x3a>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004ba4:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004ba6:	f7ff fee3 	bl	8004970 <RTC_ByteToBcd2>
 8004baa:	9002      	str	r0, [sp, #8]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004bac:	9801      	ldr	r0, [sp, #4]
 8004bae:	f7ff fedf 	bl	8004970 <RTC_ByteToBcd2>
 8004bb2:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004bb4:	0038      	movs	r0, r7
 8004bb6:	f7ff fedb 	bl	8004970 <RTC_ByteToBcd2>
 8004bba:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004bbc:	1c6b      	adds	r3, r5, #1
 8004bbe:	7fd8      	ldrb	r0, [r3, #31]
 8004bc0:	f7ff fed6 	bl	8004970 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004bc4:	696a      	ldr	r2, [r5, #20]
 8004bc6:	69eb      	ldr	r3, [r5, #28]
 8004bc8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004bca:	78ea      	ldrb	r2, [r5, #3]
 8004bcc:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	431f      	orrs	r7, r3
 8004bd2:	9b02      	ldr	r3, [sp, #8]
 8004bd4:	041b      	lsls	r3, r3, #16
 8004bd6:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004bd8:	9b01      	ldr	r3, [sp, #4]
 8004bda:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004bdc:	431f      	orrs	r7, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004bde:	69aa      	ldr	r2, [r5, #24]
 8004be0:	686b      	ldr	r3, [r5, #4]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004be2:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004be4:	4313      	orrs	r3, r2
 8004be6:	9301      	str	r3, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004be8:	23ca      	movs	r3, #202	; 0xca
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004bea:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bec:	6273      	str	r3, [r6, #36]	; 0x24
 8004bee:	3b77      	subs	r3, #119	; 0x77
 8004bf0:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004bf2:	33ad      	adds	r3, #173	; 0xad
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004bf4:	4307      	orrs	r7, r0
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d15b      	bne.n	8004cb2 <HAL_RTC_SetAlarm_IT+0x146>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004bfa:	68b3      	ldr	r3, [r6, #8]
 8004bfc:	4a41      	ldr	r2, [pc, #260]	; (8004d04 <HAL_RTC_SetAlarm_IT+0x198>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004bfe:	2501      	movs	r5, #1
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004c00:	4013      	ands	r3, r2
 8004c02:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004c04:	68f2      	ldr	r2, [r6, #12]
 8004c06:	4b40      	ldr	r3, [pc, #256]	; (8004d08 <HAL_RTC_SetAlarm_IT+0x19c>)
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8004c0e:	f7fd ff13 	bl	8002a38 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c12:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8004c14:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c16:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	0011      	movs	r1, r2
 8004c1e:	4029      	ands	r1, r5
 8004c20:	9103      	str	r1, [sp, #12]
 8004c22:	422a      	tst	r2, r5
 8004c24:	d034      	beq.n	8004c90 <HAL_RTC_SetAlarm_IT+0x124>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004c26:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004c28:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004c2a:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004c2c:	2280      	movs	r2, #128	; 0x80
 8004c2e:	6899      	ldr	r1, [r3, #8]
 8004c30:	0052      	lsls	r2, r2, #1
 8004c32:	430a      	orrs	r2, r1
 8004c34:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004c36:	2280      	movs	r2, #128	; 0x80
 8004c38:	6899      	ldr	r1, [r3, #8]
 8004c3a:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004c40:	2280      	movs	r2, #128	; 0x80
 8004c42:	4b32      	ldr	r3, [pc, #200]	; (8004d0c <HAL_RTC_SetAlarm_IT+0x1a0>)
 8004c44:	0292      	lsls	r2, r2, #10
 8004c46:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8004c48:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004c4a:	4311      	orrs	r1, r2
 8004c4c:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004c4e:	6899      	ldr	r1, [r3, #8]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c54:	22ff      	movs	r2, #255	; 0xff
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8004c5a:	3afe      	subs	r2, #254	; 0xfe
 8004c5c:	1ca3      	adds	r3, r4, #2
  __HAL_UNLOCK(hrtc);
 8004c5e:	18a4      	adds	r4, r4, r2
  hrtc->State = HAL_RTC_STATE_READY;
 8004c60:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 8004c62:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 8004c64:	e023      	b.n	8004cae <HAL_RTC_SetAlarm_IT+0x142>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c66:	68b2      	ldr	r2, [r6, #8]
 8004c68:	0011      	movs	r1, r2
 8004c6a:	4019      	ands	r1, r3
 8004c6c:	421a      	tst	r2, r3
 8004c6e:	d100      	bne.n	8004c72 <HAL_RTC_SetAlarm_IT+0x106>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004c70:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004c72:	69eb      	ldr	r3, [r5, #28]
 8004c74:	696a      	ldr	r2, [r5, #20]
 8004c76:	0400      	lsls	r0, r0, #16
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004c7c:	9b01      	ldr	r3, [sp, #4]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004c7e:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004c80:	0218      	lsls	r0, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004c82:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004c84:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004c86:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004c88:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004c8a:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004c8c:	7fd8      	ldrb	r0, [r3, #31]
 8004c8e:	e7a6      	b.n	8004bde <HAL_RTC_SetAlarm_IT+0x72>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c90:	f7fd fed2 	bl	8002a38 <HAL_GetTick>
 8004c94:	9b02      	ldr	r3, [sp, #8]
 8004c96:	1ac0      	subs	r0, r0, r3
 8004c98:	42b0      	cmp	r0, r6
 8004c9a:	d9bd      	bls.n	8004c18 <HAL_RTC_SetAlarm_IT+0xac>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c9c:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c9e:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ca4:	1ca3      	adds	r3, r4, #2
 8004ca6:	77d8      	strb	r0, [r3, #31]
        __HAL_UNLOCK(hrtc);
 8004ca8:	9b03      	ldr	r3, [sp, #12]
 8004caa:	3401      	adds	r4, #1
 8004cac:	77e3      	strb	r3, [r4, #31]
}
 8004cae:	b005      	add	sp, #20
 8004cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004cb2:	68b3      	ldr	r3, [r6, #8]
 8004cb4:	4a16      	ldr	r2, [pc, #88]	; (8004d10 <HAL_RTC_SetAlarm_IT+0x1a4>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004cb6:	2502      	movs	r5, #2
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004cb8:	4013      	ands	r3, r2
 8004cba:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004cbc:	68f2      	ldr	r2, [r6, #12]
 8004cbe:	4b15      	ldr	r3, [pc, #84]	; (8004d14 <HAL_RTC_SetAlarm_IT+0x1a8>)
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8004cc6:	f7fd feb7 	bl	8002a38 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004cca:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8004ccc:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004cce:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	68da      	ldr	r2, [r3, #12]
 8004cd4:	0011      	movs	r1, r2
 8004cd6:	4029      	ands	r1, r5
 8004cd8:	9103      	str	r1, [sp, #12]
 8004cda:	422a      	tst	r2, r5
 8004cdc:	d00b      	beq.n	8004cf6 <HAL_RTC_SetAlarm_IT+0x18a>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004cde:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004ce0:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004ce2:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004ce4:	2280      	movs	r2, #128	; 0x80
 8004ce6:	6899      	ldr	r1, [r3, #8]
 8004ce8:	0092      	lsls	r2, r2, #2
 8004cea:	430a      	orrs	r2, r1
 8004cec:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004cee:	2280      	movs	r2, #128	; 0x80
 8004cf0:	6899      	ldr	r1, [r3, #8]
 8004cf2:	0192      	lsls	r2, r2, #6
 8004cf4:	e7a2      	b.n	8004c3c <HAL_RTC_SetAlarm_IT+0xd0>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004cf6:	f7fd fe9f 	bl	8002a38 <HAL_GetTick>
 8004cfa:	9b02      	ldr	r3, [sp, #8]
 8004cfc:	1ac0      	subs	r0, r0, r3
 8004cfe:	42b0      	cmp	r0, r6
 8004d00:	d9e6      	bls.n	8004cd0 <HAL_RTC_SetAlarm_IT+0x164>
 8004d02:	e7cb      	b.n	8004c9c <HAL_RTC_SetAlarm_IT+0x130>
 8004d04:	fffffeff 	.word	0xfffffeff
 8004d08:	fffffe7f 	.word	0xfffffe7f
 8004d0c:	40010400 	.word	0x40010400
 8004d10:	fffffdff 	.word	0xfffffdff
 8004d14:	fffffd7f 	.word	0xfffffd7f

08004d18 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004d18:	0902      	lsrs	r2, r0, #4
{
 8004d1a:	0003      	movs	r3, r0
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004d1c:	200a      	movs	r0, #10
 8004d1e:	4350      	muls	r0, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004d20:	220f      	movs	r2, #15
 8004d22:	4013      	ands	r3, r2
 8004d24:	18c0      	adds	r0, r0, r3
 8004d26:	b2c0      	uxtb	r0, r0
}
 8004d28:	4770      	bx	lr
	...

08004d2c <HAL_RTC_GetTime>:
{
 8004d2c:	b570      	push	{r4, r5, r6, lr}
 8004d2e:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004d30:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004d32:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004d34:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8004d36:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004d38:	690b      	ldr	r3, [r1, #16]
 8004d3a:	045b      	lsls	r3, r3, #17
 8004d3c:	0c5b      	lsrs	r3, r3, #17
 8004d3e:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004d40:	680b      	ldr	r3, [r1, #0]
 8004d42:	490e      	ldr	r1, [pc, #56]	; (8004d7c <HAL_RTC_GetTime+0x50>)
 8004d44:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004d46:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004d48:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004d4a:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004d4c:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004d4e:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004d50:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004d52:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004d54:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004d56:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004d58:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004d5a:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 8004d5c:	2a00      	cmp	r2, #0
 8004d5e:	d10a      	bne.n	8004d76 <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004d60:	f7ff ffda 	bl	8004d18 <RTC_Bcd2ToByte>
 8004d64:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004d66:	0030      	movs	r0, r6
 8004d68:	f7ff ffd6 	bl	8004d18 <RTC_Bcd2ToByte>
 8004d6c:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004d6e:	0028      	movs	r0, r5
 8004d70:	f7ff ffd2 	bl	8004d18 <RTC_Bcd2ToByte>
 8004d74:	70a0      	strb	r0, [r4, #2]
}
 8004d76:	2000      	movs	r0, #0
 8004d78:	bd70      	pop	{r4, r5, r6, pc}
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	007f7f7f 	.word	0x007f7f7f

08004d80 <HAL_RTC_GetDate>:
{
 8004d80:	b570      	push	{r4, r5, r6, lr}
 8004d82:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004d84:	6803      	ldr	r3, [r0, #0]
 8004d86:	490e      	ldr	r1, [pc, #56]	; (8004dc0 <HAL_RTC_GetDate+0x40>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004d8c:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004d8e:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004d90:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004d92:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004d94:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004d96:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004d98:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004d9a:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004d9c:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004d9e:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 8004da0:	2a00      	cmp	r2, #0
 8004da2:	d10a      	bne.n	8004dba <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004da4:	f7ff ffb8 	bl	8004d18 <RTC_Bcd2ToByte>
 8004da8:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004daa:	0028      	movs	r0, r5
 8004dac:	f7ff ffb4 	bl	8004d18 <RTC_Bcd2ToByte>
 8004db0:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004db2:	0030      	movs	r0, r6
 8004db4:	f7ff ffb0 	bl	8004d18 <RTC_Bcd2ToByte>
 8004db8:	70a0      	strb	r0, [r4, #2]
}
 8004dba:	2000      	movs	r0, #0
 8004dbc:	bd70      	pop	{r4, r5, r6, pc}
 8004dbe:	46c0      	nop			; (mov r8, r8)
 8004dc0:	00ffff3f 	.word	0x00ffff3f

08004dc4 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004dc4:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8004dc6:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004dc8:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 8004dca:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004dcc:	600a      	str	r2, [r1, #0]
}
 8004dce:	4770      	bx	lr

08004dd0 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004dd0:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8004dd2:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004dd4:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 8004dd6:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004dd8:	6808      	ldr	r0, [r1, #0]
}
 8004dda:	4770      	bx	lr

08004ddc <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ddc:	2202      	movs	r2, #2
{
 8004dde:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 8004de0:	1c41      	adds	r1, r0, #1
 8004de2:	7fcc      	ldrb	r4, [r1, #31]
{
 8004de4:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 8004de6:	0010      	movs	r0, r2
 8004de8:	2c01      	cmp	r4, #1
 8004dea:	d010      	beq.n	8004e0e <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004dec:	1898      	adds	r0, r3, r2
 8004dee:	77c2      	strb	r2, [r0, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	32c8      	adds	r2, #200	; 0xc8
 8004df4:	625a      	str	r2, [r3, #36]	; 0x24
 8004df6:	3a77      	subs	r2, #119	; 0x77
 8004df8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8004dfa:	689c      	ldr	r4, [r3, #8]
 8004dfc:	3a33      	subs	r2, #51	; 0x33
 8004dfe:	4322      	orrs	r2, r4
 8004e00:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e02:	22ff      	movs	r2, #255	; 0xff
 8004e04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004e06:	2301      	movs	r3, #1
 8004e08:	77c3      	strb	r3, [r0, #31]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 8004e0e:	bd10      	pop	{r4, pc}

08004e10 <HAL_RTCEx_AlarmBEventCallback>:
 8004e10:	4770      	bx	lr
	...

08004e14 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e16:	001d      	movs	r5, r3
 8004e18:	0017      	movs	r7, r2
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	000e      	movs	r6, r1
 8004e1e:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e20:	f7fd fe0a 	bl	8002a38 <HAL_GetTick>
 8004e24:	19ed      	adds	r5, r5, r7
 8004e26:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8004e28:	f7fd fe06 	bl	8002a38 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e2c:	4b25      	ldr	r3, [pc, #148]	; (8004ec4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 8004e2e:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	015b      	lsls	r3, r3, #5
 8004e34:	0d1b      	lsrs	r3, r3, #20
 8004e36:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e38:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8004e3a:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e3c:	6893      	ldr	r3, [r2, #8]
 8004e3e:	4033      	ands	r3, r6
 8004e40:	429e      	cmp	r6, r3
 8004e42:	d001      	beq.n	8004e48 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8004e44:	2000      	movs	r0, #0
 8004e46:	e032      	b.n	8004eae <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
    if (Timeout != HAL_MAX_DELAY)
 8004e48:	1c7b      	adds	r3, r7, #1
 8004e4a:	d0f7      	beq.n	8004e3c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e4c:	f7fd fdf4 	bl	8002a38 <HAL_GetTick>
 8004e50:	9b01      	ldr	r3, [sp, #4]
 8004e52:	1ac0      	subs	r0, r0, r3
 8004e54:	42a8      	cmp	r0, r5
 8004e56:	d32c      	bcc.n	8004eb2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e58:	21e0      	movs	r1, #224	; 0xe0
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	438a      	bics	r2, r1
 8004e60:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e62:	2282      	movs	r2, #130	; 0x82
 8004e64:	6861      	ldr	r1, [r4, #4]
 8004e66:	0052      	lsls	r2, r2, #1
 8004e68:	4291      	cmp	r1, r2
 8004e6a:	d10c      	bne.n	8004e86 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 8004e6c:	2180      	movs	r1, #128	; 0x80
 8004e6e:	68a2      	ldr	r2, [r4, #8]
 8004e70:	0209      	lsls	r1, r1, #8
 8004e72:	428a      	cmp	r2, r1
 8004e74:	d003      	beq.n	8004e7e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e76:	2180      	movs	r1, #128	; 0x80
 8004e78:	00c9      	lsls	r1, r1, #3
 8004e7a:	428a      	cmp	r2, r1
 8004e7c:	d103      	bne.n	8004e86 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
          __HAL_SPI_DISABLE(hspi);
 8004e7e:	2140      	movs	r1, #64	; 0x40
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	438a      	bics	r2, r1
 8004e84:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e86:	2180      	movs	r1, #128	; 0x80
 8004e88:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004e8a:	0189      	lsls	r1, r1, #6
 8004e8c:	428a      	cmp	r2, r1
 8004e8e:	d106      	bne.n	8004e9e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
          SPI_RESET_CRC(hspi);
 8004e90:	6819      	ldr	r1, [r3, #0]
 8004e92:	480d      	ldr	r0, [pc, #52]	; (8004ec8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8004e94:	4001      	ands	r1, r0
 8004e96:	6019      	str	r1, [r3, #0]
 8004e98:	6819      	ldr	r1, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004e9e:	0023      	movs	r3, r4
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	3351      	adds	r3, #81	; 0x51
 8004ea4:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	2003      	movs	r0, #3
 8004eaa:	3450      	adds	r4, #80	; 0x50
 8004eac:	7023      	strb	r3, [r4, #0]
}
 8004eae:	b005      	add	sp, #20
 8004eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 8004eb2:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8004eb4:	1e5a      	subs	r2, r3, #1
 8004eb6:	4193      	sbcs	r3, r2
 8004eb8:	425b      	negs	r3, r3
 8004eba:	401d      	ands	r5, r3
      count--;
 8004ebc:	9b03      	ldr	r3, [sp, #12]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	e7ba      	b.n	8004e38 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	20000018 	.word	0x20000018
 8004ec8:	ffffdfff 	.word	0xffffdfff

08004ecc <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ecc:	4b16      	ldr	r3, [pc, #88]	; (8004f28 <SPI_EndRxTxTransaction+0x5c>)
{
 8004ece:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ed0:	0004      	movs	r4, r0
 8004ed2:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ed4:	6818      	ldr	r0, [r3, #0]
 8004ed6:	4915      	ldr	r1, [pc, #84]	; (8004f2c <SPI_EndRxTxTransaction+0x60>)
{
 8004ed8:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004eda:	f7fb f945 	bl	8000168 <__udivsi3>
 8004ede:	23fa      	movs	r3, #250	; 0xfa
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4343      	muls	r3, r0
 8004ee4:	9301      	str	r3, [sp, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ee6:	2382      	movs	r3, #130	; 0x82
 8004ee8:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004eea:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	4299      	cmp	r1, r3
 8004ef0:	d10d      	bne.n	8004f0e <SPI_EndRxTxTransaction+0x42>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ef2:	0033      	movs	r3, r6
 8004ef4:	002a      	movs	r2, r5
 8004ef6:	2180      	movs	r1, #128	; 0x80
 8004ef8:	0020      	movs	r0, r4
 8004efa:	f7ff ff8b 	bl	8004e14 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004efe:	2800      	cmp	r0, #0
 8004f00:	d00f      	beq.n	8004f22 <SPI_EndRxTxTransaction+0x56>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f02:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8004f04:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f06:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 8004f0c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      if (count == 0U)
 8004f0e:	9b01      	ldr	r3, [sp, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d006      	beq.n	8004f22 <SPI_EndRxTxTransaction+0x56>
      count--;
 8004f14:	9b01      	ldr	r3, [sp, #4]
 8004f16:	3b01      	subs	r3, #1
 8004f18:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	4213      	tst	r3, r2
 8004f20:	d1f5      	bne.n	8004f0e <SPI_EndRxTxTransaction+0x42>
  return HAL_OK;
 8004f22:	2000      	movs	r0, #0
 8004f24:	e7f2      	b.n	8004f0c <SPI_EndRxTxTransaction+0x40>
 8004f26:	46c0      	nop			; (mov r8, r8)
 8004f28:	20000018 	.word	0x20000018
 8004f2c:	016e3600 	.word	0x016e3600

08004f30 <HAL_SPI_MspInit>:
}
 8004f30:	4770      	bx	lr
	...

08004f34 <HAL_SPI_Init>:
{
 8004f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f36:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004f38:	2001      	movs	r0, #1
  if (hspi == NULL)
 8004f3a:	2c00      	cmp	r4, #0
 8004f3c:	d054      	beq.n	8004fe8 <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d152      	bne.n	8004fea <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f44:	2282      	movs	r2, #130	; 0x82
 8004f46:	6861      	ldr	r1, [r4, #4]
 8004f48:	0052      	lsls	r2, r2, #1
 8004f4a:	4291      	cmp	r1, r2
 8004f4c:	d000      	beq.n	8004f50 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f4e:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f50:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f52:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f54:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f56:	3551      	adds	r5, #81	; 0x51
 8004f58:	782b      	ldrb	r3, [r5, #0]
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d105      	bne.n	8004f6c <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8004f60:	0023      	movs	r3, r4
 8004f62:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 8004f64:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8004f66:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8004f68:	f7ff ffe2 	bl	8004f30 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004f6c:	2002      	movs	r0, #2
  __HAL_SPI_DISABLE(hspi);
 8004f6e:	2240      	movs	r2, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8004f70:	7028      	strb	r0, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8004f72:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f74:	6866      	ldr	r6, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 8004f76:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f78:	68a7      	ldr	r7, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8004f7a:	4393      	bics	r3, r2
 8004f7c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f7e:	2382      	movs	r3, #130	; 0x82
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	4033      	ands	r3, r6
 8004f84:	2684      	movs	r6, #132	; 0x84
 8004f86:	0236      	lsls	r6, r6, #8
 8004f88:	403e      	ands	r6, r7
 8004f8a:	4333      	orrs	r3, r6
 8004f8c:	2680      	movs	r6, #128	; 0x80
 8004f8e:	68e7      	ldr	r7, [r4, #12]
 8004f90:	0136      	lsls	r6, r6, #4
 8004f92:	403e      	ands	r6, r7
 8004f94:	4333      	orrs	r3, r6
 8004f96:	6926      	ldr	r6, [r4, #16]
 8004f98:	69a2      	ldr	r2, [r4, #24]
 8004f9a:	4030      	ands	r0, r6
 8004f9c:	2601      	movs	r6, #1
 8004f9e:	4303      	orrs	r3, r0
 8004fa0:	6960      	ldr	r0, [r4, #20]
 8004fa2:	69e7      	ldr	r7, [r4, #28]
 8004fa4:	4030      	ands	r0, r6
 8004fa6:	4303      	orrs	r3, r0
 8004fa8:	2080      	movs	r0, #128	; 0x80
 8004faa:	0080      	lsls	r0, r0, #2
 8004fac:	4010      	ands	r0, r2
 8004fae:	4303      	orrs	r3, r0
 8004fb0:	2038      	movs	r0, #56	; 0x38
 8004fb2:	4038      	ands	r0, r7
 8004fb4:	4303      	orrs	r3, r0
 8004fb6:	2080      	movs	r0, #128	; 0x80
 8004fb8:	6a27      	ldr	r7, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fba:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fbc:	4038      	ands	r0, r7
 8004fbe:	4303      	orrs	r3, r0
 8004fc0:	2080      	movs	r0, #128	; 0x80
 8004fc2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8004fc4:	0180      	lsls	r0, r0, #6
 8004fc6:	4038      	ands	r0, r7
 8004fc8:	4303      	orrs	r3, r0
 8004fca:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fcc:	2304      	movs	r3, #4
 8004fce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004fd0:	401a      	ands	r2, r3
 8004fd2:	330c      	adds	r3, #12
 8004fd4:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fd6:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fdc:	69cb      	ldr	r3, [r1, #28]
 8004fde:	4a05      	ldr	r2, [pc, #20]	; (8004ff4 <HAL_SPI_Init+0xc0>)
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fe4:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fe6:	702e      	strb	r6, [r5, #0]
}
 8004fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fea:	2300      	movs	r3, #0
 8004fec:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fee:	6163      	str	r3, [r4, #20]
 8004ff0:	e7ae      	b.n	8004f50 <HAL_SPI_Init+0x1c>
 8004ff2:	46c0      	nop			; (mov r8, r8)
 8004ff4:	fffff7ff 	.word	0xfffff7ff

08004ff8 <HAL_SPI_TransmitReceive>:
{
 8004ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ffa:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8004ffc:	0003      	movs	r3, r0
 8004ffe:	3350      	adds	r3, #80	; 0x50
{
 8005000:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8005002:	781a      	ldrb	r2, [r3, #0]
{
 8005004:	0004      	movs	r4, r0
 8005006:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8005008:	2002      	movs	r0, #2
{
 800500a:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 800500c:	2a01      	cmp	r2, #1
 800500e:	d100      	bne.n	8005012 <HAL_SPI_TransmitReceive+0x1a>
 8005010:	e092      	b.n	8005138 <HAL_SPI_TransmitReceive+0x140>
 8005012:	2201      	movs	r2, #1
 8005014:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8005016:	f7fd fd0f 	bl	8002a38 <HAL_GetTick>
  tmp_state           = hspi->State;
 800501a:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 800501c:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 800501e:	3351      	adds	r3, #81	; 0x51
 8005020:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005022:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8005024:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005026:	2b01      	cmp	r3, #1
 8005028:	d00a      	beq.n	8005040 <HAL_SPI_TransmitReceive+0x48>
 800502a:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 800502c:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	4299      	cmp	r1, r3
 8005032:	d000      	beq.n	8005036 <HAL_SPI_TransmitReceive+0x3e>
 8005034:	e079      	b.n	800512a <HAL_SPI_TransmitReceive+0x132>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005036:	68a3      	ldr	r3, [r4, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d176      	bne.n	800512a <HAL_SPI_TransmitReceive+0x132>
 800503c:	2a04      	cmp	r2, #4
 800503e:	d174      	bne.n	800512a <HAL_SPI_TransmitReceive+0x132>
    errorcode = HAL_ERROR;
 8005040:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005042:	2d00      	cmp	r5, #0
 8005044:	d071      	beq.n	800512a <HAL_SPI_TransmitReceive+0x132>
 8005046:	2f00      	cmp	r7, #0
 8005048:	d06f      	beq.n	800512a <HAL_SPI_TransmitReceive+0x132>
 800504a:	2e00      	cmp	r6, #0
 800504c:	d06d      	beq.n	800512a <HAL_SPI_TransmitReceive+0x132>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800504e:	0023      	movs	r3, r4
 8005050:	3351      	adds	r3, #81	; 0x51
 8005052:	781a      	ldrb	r2, [r3, #0]
 8005054:	2a04      	cmp	r2, #4
 8005056:	d001      	beq.n	800505c <HAL_SPI_TransmitReceive+0x64>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005058:	2205      	movs	r2, #5
 800505a:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800505c:	2300      	movs	r3, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800505e:	2240      	movs	r2, #64	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005060:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8005062:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005064:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005066:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8005068:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800506a:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800506c:	6818      	ldr	r0, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800506e:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005070:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005072:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005074:	86a6      	strh	r6, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005076:	4210      	tst	r0, r2
 8005078:	d102      	bne.n	8005080 <HAL_SPI_TransmitReceive+0x88>
    __HAL_SPI_ENABLE(hspi);
 800507a:	6818      	ldr	r0, [r3, #0]
 800507c:	4302      	orrs	r2, r0
 800507e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005080:	2280      	movs	r2, #128	; 0x80
 8005082:	68e0      	ldr	r0, [r4, #12]
 8005084:	0112      	lsls	r2, r2, #4
 8005086:	4290      	cmp	r0, r2
 8005088:	d158      	bne.n	800513c <HAL_SPI_TransmitReceive+0x144>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800508a:	2900      	cmp	r1, #0
 800508c:	d001      	beq.n	8005092 <HAL_SPI_TransmitReceive+0x9a>
 800508e:	2e01      	cmp	r6, #1
 8005090:	d107      	bne.n	80050a2 <HAL_SPI_TransmitReceive+0xaa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005092:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005094:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005096:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8005098:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800509a:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800509c:	3b01      	subs	r3, #1
 800509e:	b29b      	uxth	r3, r3
 80050a0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80050a2:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050a4:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050a6:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050a8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10e      	bne.n	80050cc <HAL_SPI_TransmitReceive+0xd4>
 80050ae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10b      	bne.n	80050cc <HAL_SPI_TransmitReceive+0xd4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050b4:	0020      	movs	r0, r4
 80050b6:	9a01      	ldr	r2, [sp, #4]
 80050b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80050ba:	f7ff ff07 	bl	8004ecc <SPI_EndRxTxTransaction>
 80050be:	2800      	cmp	r0, #0
 80050c0:	d100      	bne.n	80050c4 <HAL_SPI_TransmitReceive+0xcc>
 80050c2:	e083      	b.n	80051cc <HAL_SPI_TransmitReceive+0x1d4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050c4:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 80050c6:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050c8:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 80050ca:	e02e      	b.n	800512a <HAL_SPI_TransmitReceive+0x132>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050cc:	6821      	ldr	r1, [r4, #0]
 80050ce:	688b      	ldr	r3, [r1, #8]
 80050d0:	423b      	tst	r3, r7
 80050d2:	d00e      	beq.n	80050f2 <HAL_SPI_TransmitReceive+0xfa>
 80050d4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00b      	beq.n	80050f2 <HAL_SPI_TransmitReceive+0xfa>
 80050da:	2d01      	cmp	r5, #1
 80050dc:	d109      	bne.n	80050f2 <HAL_SPI_TransmitReceive+0xfa>
        txallowed = 0U;
 80050de:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80050e2:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050e4:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050e6:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050e8:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80050ea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050f2:	688b      	ldr	r3, [r1, #8]
 80050f4:	001a      	movs	r2, r3
 80050f6:	4032      	ands	r2, r6
 80050f8:	4233      	tst	r3, r6
 80050fa:	d00c      	beq.n	8005116 <HAL_SPI_TransmitReceive+0x11e>
 80050fc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d009      	beq.n	8005116 <HAL_SPI_TransmitReceive+0x11e>
        txallowed = 1U;
 8005102:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005104:	68c9      	ldr	r1, [r1, #12]
 8005106:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005108:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800510a:	3302      	adds	r3, #2
 800510c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800510e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005110:	3b01      	subs	r3, #1
 8005112:	b29b      	uxth	r3, r3
 8005114:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005116:	f7fd fc8f 	bl	8002a38 <HAL_GetTick>
 800511a:	9b01      	ldr	r3, [sp, #4]
 800511c:	1ac0      	subs	r0, r0, r3
 800511e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005120:	4298      	cmp	r0, r3
 8005122:	d3c1      	bcc.n	80050a8 <HAL_SPI_TransmitReceive+0xb0>
 8005124:	3301      	adds	r3, #1
 8005126:	d0bf      	beq.n	80050a8 <HAL_SPI_TransmitReceive+0xb0>
        errorcode = HAL_TIMEOUT;
 8005128:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800512a:	0023      	movs	r3, r4
 800512c:	2201      	movs	r2, #1
 800512e:	3351      	adds	r3, #81	; 0x51
 8005130:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8005132:	2300      	movs	r3, #0
 8005134:	3450      	adds	r4, #80	; 0x50
 8005136:	7023      	strb	r3, [r4, #0]
}
 8005138:	b005      	add	sp, #20
 800513a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800513c:	2900      	cmp	r1, #0
 800513e:	d001      	beq.n	8005144 <HAL_SPI_TransmitReceive+0x14c>
 8005140:	2e01      	cmp	r6, #1
 8005142:	d108      	bne.n	8005156 <HAL_SPI_TransmitReceive+0x15e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005144:	782a      	ldrb	r2, [r5, #0]
 8005146:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005148:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800514a:	3301      	adds	r3, #1
 800514c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800514e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005150:	3b01      	subs	r3, #1
 8005152:	b29b      	uxth	r3, r3
 8005154:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8005156:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005158:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800515a:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800515c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800515e:	2b00      	cmp	r3, #0
 8005160:	d102      	bne.n	8005168 <HAL_SPI_TransmitReceive+0x170>
 8005162:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005164:	2b00      	cmp	r3, #0
 8005166:	d0a5      	beq.n	80050b4 <HAL_SPI_TransmitReceive+0xbc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	423a      	tst	r2, r7
 800516e:	d00f      	beq.n	8005190 <HAL_SPI_TransmitReceive+0x198>
 8005170:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005172:	2a00      	cmp	r2, #0
 8005174:	d00c      	beq.n	8005190 <HAL_SPI_TransmitReceive+0x198>
 8005176:	2d01      	cmp	r5, #1
 8005178:	d10a      	bne.n	8005190 <HAL_SPI_TransmitReceive+0x198>
        txallowed = 0U;
 800517a:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800517c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800517e:	7812      	ldrb	r2, [r2, #0]
 8005180:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8005182:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005184:	3301      	adds	r3, #1
 8005186:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005188:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800518a:	3b01      	subs	r3, #1
 800518c:	b29b      	uxth	r3, r3
 800518e:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	6899      	ldr	r1, [r3, #8]
 8005194:	000a      	movs	r2, r1
 8005196:	4032      	ands	r2, r6
 8005198:	4231      	tst	r1, r6
 800519a:	d00d      	beq.n	80051b8 <HAL_SPI_TransmitReceive+0x1c0>
 800519c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800519e:	2900      	cmp	r1, #0
 80051a0:	d00a      	beq.n	80051b8 <HAL_SPI_TransmitReceive+0x1c0>
        txallowed = 1U;
 80051a2:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80051a8:	700b      	strb	r3, [r1, #0]
        hspi->pRxBuffPtr++;
 80051aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051ac:	3301      	adds	r3, #1
 80051ae:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80051b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051b8:	f7fd fc3e 	bl	8002a38 <HAL_GetTick>
 80051bc:	9b01      	ldr	r3, [sp, #4]
 80051be:	1ac0      	subs	r0, r0, r3
 80051c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051c2:	4298      	cmp	r0, r3
 80051c4:	d3ca      	bcc.n	800515c <HAL_SPI_TransmitReceive+0x164>
 80051c6:	3301      	adds	r3, #1
 80051c8:	d0c8      	beq.n	800515c <HAL_SPI_TransmitReceive+0x164>
 80051ca:	e7ad      	b.n	8005128 <HAL_SPI_TransmitReceive+0x130>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051cc:	68a3      	ldr	r3, [r4, #8]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1ab      	bne.n	800512a <HAL_SPI_TransmitReceive+0x132>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051d2:	6823      	ldr	r3, [r4, #0]
 80051d4:	9003      	str	r0, [sp, #12]
 80051d6:	68da      	ldr	r2, [r3, #12]
 80051d8:	9203      	str	r2, [sp, #12]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	9303      	str	r3, [sp, #12]
 80051de:	9b03      	ldr	r3, [sp, #12]
 80051e0:	e7a3      	b.n	800512a <HAL_SPI_TransmitReceive+0x132>

080051e2 <HAL_SPI_GetState>:
  return hspi->State;
 80051e2:	3051      	adds	r0, #81	; 0x51
 80051e4:	7800      	ldrb	r0, [r0, #0]
 80051e6:	b2c0      	uxtb	r0, r0
}
 80051e8:	4770      	bx	lr
	...

080051ec <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ec:	6803      	ldr	r3, [r0, #0]
 80051ee:	490b      	ldr	r1, [pc, #44]	; (800521c <UART_EndRxTransfer+0x30>)
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	400a      	ands	r2, r1
 80051f4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	3123      	adds	r1, #35	; 0x23
 80051fa:	31ff      	adds	r1, #255	; 0xff
 80051fc:	438a      	bics	r2, r1
 80051fe:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005200:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8005202:	428a      	cmp	r2, r1
 8005204:	d103      	bne.n	800520e <UART_EndRxTransfer+0x22>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	310f      	adds	r1, #15
 800520a:	438a      	bics	r2, r1
 800520c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800520e:	2320      	movs	r3, #32
 8005210:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005212:	2300      	movs	r3, #0
 8005214:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005216:	6643      	str	r3, [r0, #100]	; 0x64
}
 8005218:	4770      	bx	lr
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	fffffedf 	.word	0xfffffedf

08005220 <HAL_UART_Transmit_DMA>:
{
 8005220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005222:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005224:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 8005226:	0004      	movs	r4, r0
    return HAL_BUSY;
 8005228:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800522a:	2a20      	cmp	r2, #32
 800522c:	d13a      	bne.n	80052a4 <HAL_UART_Transmit_DMA+0x84>
      return HAL_ERROR;
 800522e:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8005230:	2900      	cmp	r1, #0
 8005232:	d037      	beq.n	80052a4 <HAL_UART_Transmit_DMA+0x84>
 8005234:	2b00      	cmp	r3, #0
 8005236:	d035      	beq.n	80052a4 <HAL_UART_Transmit_DMA+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005238:	2280      	movs	r2, #128	; 0x80
 800523a:	68a0      	ldr	r0, [r4, #8]
 800523c:	0152      	lsls	r2, r2, #5
 800523e:	4290      	cmp	r0, r2
 8005240:	d106      	bne.n	8005250 <HAL_UART_Transmit_DMA+0x30>
 8005242:	6922      	ldr	r2, [r4, #16]
 8005244:	2a00      	cmp	r2, #0
 8005246:	d103      	bne.n	8005250 <HAL_UART_Transmit_DMA+0x30>
      if ((((uint32_t)pData) & 1U) != 0U)
 8005248:	3201      	adds	r2, #1
      return HAL_ERROR;
 800524a:	0010      	movs	r0, r2
      if ((((uint32_t)pData) & 1U) != 0U)
 800524c:	4211      	tst	r1, r2
 800524e:	d129      	bne.n	80052a4 <HAL_UART_Transmit_DMA+0x84>
    __HAL_LOCK(huart);
 8005250:	0025      	movs	r5, r4
 8005252:	3574      	adds	r5, #116	; 0x74
 8005254:	782a      	ldrb	r2, [r5, #0]
    return HAL_BUSY;
 8005256:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8005258:	2a01      	cmp	r2, #1
 800525a:	d023      	beq.n	80052a4 <HAL_UART_Transmit_DMA+0x84>
 800525c:	2201      	movs	r2, #1
 800525e:	702a      	strb	r2, [r5, #0]
    huart->TxXferSize  = Size;
 8005260:	0022      	movs	r2, r4
 8005262:	3250      	adds	r2, #80	; 0x50
    huart->pTxBuffPtr  = pData;
 8005264:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005266:	2600      	movs	r6, #0
    huart->TxXferSize  = Size;
 8005268:	8013      	strh	r3, [r2, #0]
    huart->TxXferCount = Size;
 800526a:	8053      	strh	r3, [r2, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800526c:	2221      	movs	r2, #33	; 0x21
    if (huart->hdmatx != NULL)
 800526e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005270:	1d27      	adds	r7, r4, #4
 8005272:	67fe      	str	r6, [r7, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005274:	67a2      	str	r2, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 8005276:	42b0      	cmp	r0, r6
 8005278:	d015      	beq.n	80052a6 <HAL_UART_Transmit_DMA+0x86>
 800527a:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferAbortCallback = NULL;
 800527c:	6386      	str	r6, [r0, #56]	; 0x38
 800527e:	9201      	str	r2, [sp, #4]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005280:	4a0e      	ldr	r2, [pc, #56]	; (80052bc <HAL_UART_Transmit_DMA+0x9c>)
 8005282:	62c2      	str	r2, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005284:	4a0e      	ldr	r2, [pc, #56]	; (80052c0 <HAL_UART_Transmit_DMA+0xa0>)
 8005286:	6302      	str	r2, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005288:	4a0e      	ldr	r2, [pc, #56]	; (80052c4 <HAL_UART_Transmit_DMA+0xa4>)
 800528a:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800528c:	9a01      	ldr	r2, [sp, #4]
 800528e:	3228      	adds	r2, #40	; 0x28
 8005290:	f7fe f9b2 	bl	80035f8 <HAL_DMA_Start_IT>
 8005294:	42b0      	cmp	r0, r6
 8005296:	d006      	beq.n	80052a6 <HAL_UART_Transmit_DMA+0x86>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005298:	2310      	movs	r3, #16
        return HAL_ERROR;
 800529a:	2001      	movs	r0, #1
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800529c:	67fb      	str	r3, [r7, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 800529e:	18db      	adds	r3, r3, r3
        __HAL_UNLOCK(huart);
 80052a0:	702e      	strb	r6, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 80052a2:	67a3      	str	r3, [r4, #120]	; 0x78
}
 80052a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80052a6:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 80052a8:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80052aa:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 80052ac:	3474      	adds	r4, #116	; 0x74
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80052ae:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 80052b0:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80052b2:	6899      	ldr	r1, [r3, #8]
 80052b4:	1892      	adds	r2, r2, r2
 80052b6:	430a      	orrs	r2, r1
 80052b8:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 80052ba:	e7f3      	b.n	80052a4 <HAL_UART_Transmit_DMA+0x84>
 80052bc:	080052c9 	.word	0x080052c9
 80052c0:	080052ff 	.word	0x080052ff
 80052c4:	0800530b 	.word	0x0800530b

080052c8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80052c8:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80052ca:	681b      	ldr	r3, [r3, #0]
{
 80052cc:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	2320      	movs	r3, #32
 80052d2:	0011      	movs	r1, r2
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052d4:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80052d6:	4019      	ands	r1, r3
 80052d8:	421a      	tst	r2, r3
 80052da:	d10c      	bne.n	80052f6 <UART_DMATransmitCplt+0x2e>
  {
    huart->TxXferCount = 0U;
 80052dc:	0003      	movs	r3, r0
 80052de:	3352      	adds	r3, #82	; 0x52
 80052e0:	8019      	strh	r1, [r3, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80052e2:	2180      	movs	r1, #128	; 0x80
 80052e4:	6803      	ldr	r3, [r0, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	438a      	bics	r2, r1
 80052ea:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052ec:	2240      	movs	r2, #64	; 0x40
 80052ee:	6819      	ldr	r1, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052f4:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 80052f6:	f7fd fd91 	bl	8002e1c <HAL_UART_TxCpltCallback>
}
 80052fa:	e7fb      	b.n	80052f4 <UART_DMATransmitCplt+0x2c>

080052fc <HAL_UART_TxHalfCpltCallback>:
 80052fc:	4770      	bx	lr

080052fe <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052fe:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005300:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005302:	f7ff fffb 	bl	80052fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005306:	bd10      	pop	{r4, pc}

08005308 <HAL_UART_ErrorCallback>:
 8005308:	4770      	bx	lr

0800530a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800530a:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800530c:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800530e:	6823      	ldr	r3, [r4, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005310:	6fa2      	ldr	r2, [r4, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005312:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005314:	6898      	ldr	r0, [r3, #8]
 8005316:	0600      	lsls	r0, r0, #24
 8005318:	d50b      	bpl.n	8005332 <UART_DMAError+0x28>
 800531a:	2a21      	cmp	r2, #33	; 0x21
 800531c:	d109      	bne.n	8005332 <UART_DMAError+0x28>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800531e:	0022      	movs	r2, r4
 8005320:	2000      	movs	r0, #0
 8005322:	3252      	adds	r2, #82	; 0x52
 8005324:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	30c0      	adds	r0, #192	; 0xc0
 800532a:	4382      	bics	r2, r0
 800532c:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800532e:	2220      	movs	r2, #32
 8005330:	67a2      	str	r2, [r4, #120]	; 0x78
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	065b      	lsls	r3, r3, #25
 8005336:	d508      	bpl.n	800534a <UART_DMAError+0x40>
 8005338:	2922      	cmp	r1, #34	; 0x22
 800533a:	d106      	bne.n	800534a <UART_DMAError+0x40>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800533c:	0023      	movs	r3, r4
 800533e:	2200      	movs	r2, #0
 8005340:	335a      	adds	r3, #90	; 0x5a
    UART_EndRxTransfer(huart);
 8005342:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 8005344:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 8005346:	f7ff ff51 	bl	80051ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800534a:	2310      	movs	r3, #16
 800534c:	1d22      	adds	r2, r4, #4
 800534e:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005350:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005352:	430b      	orrs	r3, r1
 8005354:	67d3      	str	r3, [r2, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 8005356:	f7ff ffd7 	bl	8005308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800535a:	bd10      	pop	{r4, pc}

0800535c <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800535c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800535e:	2300      	movs	r3, #0
 8005360:	0002      	movs	r2, r0
{
 8005362:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8005364:	325a      	adds	r2, #90	; 0x5a
 8005366:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8005368:	3a08      	subs	r2, #8
 800536a:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800536c:	f7ff ffcc 	bl	8005308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005370:	bd10      	pop	{r4, pc}

08005372 <HAL_UARTEx_RxEventCallback>:
}
 8005372:	4770      	bx	lr

08005374 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005374:	6803      	ldr	r3, [r0, #0]
{
 8005376:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005378:	69d9      	ldr	r1, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800537a:	4a85      	ldr	r2, [pc, #532]	; (8005590 <HAL_UART_IRQHandler+0x21c>)
{
 800537c:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800537e:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005380:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 8005382:	4211      	tst	r1, r2
 8005384:	d10b      	bne.n	800539e <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005386:	2220      	movs	r2, #32
 8005388:	4211      	tst	r1, r2
 800538a:	d100      	bne.n	800538e <HAL_UART_IRQHandler+0x1a>
 800538c:	e076      	b.n	800547c <HAL_UART_IRQHandler+0x108>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800538e:	4210      	tst	r0, r2
 8005390:	d100      	bne.n	8005394 <HAL_UART_IRQHandler+0x20>
 8005392:	e073      	b.n	800547c <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 8005394:	6e63      	ldr	r3, [r4, #100]	; 0x64
      huart->TxISR(huart);
 8005396:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8005398:	2b00      	cmp	r3, #0
 800539a:	d165      	bne.n	8005468 <HAL_UART_IRQHandler+0xf4>
 800539c:	e065      	b.n	800546a <HAL_UART_IRQHandler+0xf6>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800539e:	2201      	movs	r2, #1
 80053a0:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80053a2:	4d7c      	ldr	r5, [pc, #496]	; (8005594 <HAL_UART_IRQHandler+0x220>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 80053a4:	4017      	ands	r7, r2
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80053a6:	4005      	ands	r5, r0
 80053a8:	433d      	orrs	r5, r7
 80053aa:	d067      	beq.n	800547c <HAL_UART_IRQHandler+0x108>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053ac:	1d25      	adds	r5, r4, #4
 80053ae:	4211      	tst	r1, r2
 80053b0:	d005      	beq.n	80053be <HAL_UART_IRQHandler+0x4a>
 80053b2:	05c6      	lsls	r6, r0, #23
 80053b4:	d503      	bpl.n	80053be <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053b6:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053b8:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 80053ba:	4332      	orrs	r2, r6
 80053bc:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053be:	2202      	movs	r2, #2
 80053c0:	4211      	tst	r1, r2
 80053c2:	d006      	beq.n	80053d2 <HAL_UART_IRQHandler+0x5e>
 80053c4:	2f00      	cmp	r7, #0
 80053c6:	d004      	beq.n	80053d2 <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80053c8:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053ca:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 80053cc:	1892      	adds	r2, r2, r2
 80053ce:	4332      	orrs	r2, r6
 80053d0:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053d2:	2204      	movs	r2, #4
 80053d4:	4211      	tst	r1, r2
 80053d6:	d006      	beq.n	80053e6 <HAL_UART_IRQHandler+0x72>
 80053d8:	2f00      	cmp	r7, #0
 80053da:	d004      	beq.n	80053e6 <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80053dc:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053de:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 80053e0:	3a02      	subs	r2, #2
 80053e2:	4332      	orrs	r2, r6
 80053e4:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80053e6:	2208      	movs	r2, #8
 80053e8:	4211      	tst	r1, r2
 80053ea:	d007      	beq.n	80053fc <HAL_UART_IRQHandler+0x88>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053ec:	2620      	movs	r6, #32
 80053ee:	4006      	ands	r6, r0
 80053f0:	433e      	orrs	r6, r7
 80053f2:	d003      	beq.n	80053fc <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053f4:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053f6:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 80053f8:	4332      	orrs	r2, r6
 80053fa:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80053fc:	2280      	movs	r2, #128	; 0x80
 80053fe:	0112      	lsls	r2, r2, #4
 8005400:	4211      	tst	r1, r2
 8005402:	d006      	beq.n	8005412 <HAL_UART_IRQHandler+0x9e>
 8005404:	0146      	lsls	r6, r0, #5
 8005406:	d504      	bpl.n	8005412 <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005408:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800540a:	2320      	movs	r3, #32
 800540c:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 800540e:	4313      	orrs	r3, r2
 8005410:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005412:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8005414:	2b00      	cmp	r3, #0
 8005416:	d028      	beq.n	800546a <HAL_UART_IRQHandler+0xf6>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005418:	2320      	movs	r3, #32
 800541a:	4219      	tst	r1, r3
 800541c:	d006      	beq.n	800542c <HAL_UART_IRQHandler+0xb8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800541e:	4218      	tst	r0, r3
 8005420:	d004      	beq.n	800542c <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 8005422:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 8005428:	0020      	movs	r0, r4
 800542a:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800542c:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 800542e:	6feb      	ldr	r3, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005430:	2740      	movs	r7, #64	; 0x40
 8005432:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005434:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005436:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005438:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 800543a:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800543c:	431e      	orrs	r6, r3
 800543e:	d019      	beq.n	8005474 <HAL_UART_IRQHandler+0x100>
        UART_EndRxTransfer(huart);
 8005440:	f7ff fed4 	bl	80051ec <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005444:	6823      	ldr	r3, [r4, #0]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	423a      	tst	r2, r7
 800544a:	d00f      	beq.n	800546c <HAL_UART_IRQHandler+0xf8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800544c:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800544e:	6f20      	ldr	r0, [r4, #112]	; 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005450:	43ba      	bics	r2, r7
 8005452:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8005454:	2800      	cmp	r0, #0
 8005456:	d009      	beq.n	800546c <HAL_UART_IRQHandler+0xf8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005458:	4b4f      	ldr	r3, [pc, #316]	; (8005598 <HAL_UART_IRQHandler+0x224>)
 800545a:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800545c:	f7fe f92c 	bl	80036b8 <HAL_DMA_Abort_IT>
 8005460:	2800      	cmp	r0, #0
 8005462:	d002      	beq.n	800546a <HAL_UART_IRQHandler+0xf6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005464:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005466:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005468:	4798      	blx	r3
}
 800546a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 800546c:	0020      	movs	r0, r4
 800546e:	f7ff ff4b 	bl	8005308 <HAL_UART_ErrorCallback>
 8005472:	e7fa      	b.n	800546a <HAL_UART_IRQHandler+0xf6>
        HAL_UART_ErrorCallback(huart);
 8005474:	f7ff ff48 	bl	8005308 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005478:	67ee      	str	r6, [r5, #124]	; 0x7c
 800547a:	e7f6      	b.n	800546a <HAL_UART_IRQHandler+0xf6>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800547c:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800547e:	2d01      	cmp	r5, #1
 8005480:	d161      	bne.n	8005546 <HAL_UART_IRQHandler+0x1d2>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005482:	2210      	movs	r2, #16
 8005484:	4211      	tst	r1, r2
 8005486:	d05e      	beq.n	8005546 <HAL_UART_IRQHandler+0x1d2>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005488:	4210      	tst	r0, r2
 800548a:	d05c      	beq.n	8005546 <HAL_UART_IRQHandler+0x1d2>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800548c:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800548e:	6899      	ldr	r1, [r3, #8]
 8005490:	2640      	movs	r6, #64	; 0x40
 8005492:	000f      	movs	r7, r1
 8005494:	4037      	ands	r7, r6
 8005496:	4231      	tst	r1, r6
 8005498:	d038      	beq.n	800550c <HAL_UART_IRQHandler+0x198>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800549a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800549c:	680f      	ldr	r7, [r1, #0]
 800549e:	9100      	str	r1, [sp, #0]
 80054a0:	6879      	ldr	r1, [r7, #4]
 80054a2:	b289      	uxth	r1, r1
      if (  (nb_remaining_rx_data > 0U)
 80054a4:	2900      	cmp	r1, #0
 80054a6:	d0e0      	beq.n	800546a <HAL_UART_IRQHandler+0xf6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80054a8:	2058      	movs	r0, #88	; 0x58
 80054aa:	4684      	mov	ip, r0
 80054ac:	44a4      	add	ip, r4
 80054ae:	4660      	mov	r0, ip
 80054b0:	8800      	ldrh	r0, [r0, #0]
 80054b2:	4288      	cmp	r0, r1
 80054b4:	d9d9      	bls.n	800546a <HAL_UART_IRQHandler+0xf6>
        huart->RxXferCount = nb_remaining_rx_data;
 80054b6:	205a      	movs	r0, #90	; 0x5a
 80054b8:	4684      	mov	ip, r0
 80054ba:	44a4      	add	ip, r4
 80054bc:	4660      	mov	r0, ip
 80054be:	8001      	strh	r1, [r0, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80054c0:	683f      	ldr	r7, [r7, #0]
 80054c2:	2120      	movs	r1, #32
 80054c4:	0038      	movs	r0, r7
 80054c6:	4008      	ands	r0, r1
 80054c8:	9001      	str	r0, [sp, #4]
 80054ca:	420f      	tst	r7, r1
 80054cc:	d112      	bne.n	80054f4 <HAL_UART_IRQHandler+0x180>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054ce:	681f      	ldr	r7, [r3, #0]
 80054d0:	4832      	ldr	r0, [pc, #200]	; (800559c <HAL_UART_IRQHandler+0x228>)
 80054d2:	4007      	ands	r7, r0
 80054d4:	601f      	str	r7, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d6:	689f      	ldr	r7, [r3, #8]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054d8:	9800      	ldr	r0, [sp, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054da:	43af      	bics	r7, r5
 80054dc:	609f      	str	r7, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054de:	689d      	ldr	r5, [r3, #8]
 80054e0:	43b5      	bics	r5, r6
 80054e2:	609d      	str	r5, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 80054e4:	67e1      	str	r1, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e6:	9901      	ldr	r1, [sp, #4]
 80054e8:	6621      	str	r1, [r4, #96]	; 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ea:	6819      	ldr	r1, [r3, #0]
 80054ec:	4391      	bics	r1, r2
 80054ee:	6019      	str	r1, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054f0:	f7fe f8c2 	bl	8003678 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054f4:	0023      	movs	r3, r4
 80054f6:	0022      	movs	r2, r4
 80054f8:	335a      	adds	r3, #90	; 0x5a
 80054fa:	3258      	adds	r2, #88	; 0x58
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	8811      	ldrh	r1, [r2, #0]
 8005500:	1ac9      	subs	r1, r1, r3
 8005502:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005504:	0020      	movs	r0, r4
 8005506:	f7ff ff34 	bl	8005372 <HAL_UARTEx_RxEventCallback>
 800550a:	e7ae      	b.n	800546a <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800550c:	0026      	movs	r6, r4
 800550e:	365a      	adds	r6, #90	; 0x5a
 8005510:	8830      	ldrh	r0, [r6, #0]
      if (  (huart->RxXferCount > 0U)
 8005512:	8831      	ldrh	r1, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005514:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 8005516:	2900      	cmp	r1, #0
 8005518:	d0a7      	beq.n	800546a <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800551a:	0021      	movs	r1, r4
 800551c:	3158      	adds	r1, #88	; 0x58
 800551e:	8809      	ldrh	r1, [r1, #0]
 8005520:	1a09      	subs	r1, r1, r0
 8005522:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8005524:	2900      	cmp	r1, #0
 8005526:	d0a0      	beq.n	800546a <HAL_UART_IRQHandler+0xf6>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005528:	6818      	ldr	r0, [r3, #0]
 800552a:	4e1d      	ldr	r6, [pc, #116]	; (80055a0 <HAL_UART_IRQHandler+0x22c>)
 800552c:	4030      	ands	r0, r6
 800552e:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005530:	6898      	ldr	r0, [r3, #8]
 8005532:	43a8      	bics	r0, r5
 8005534:	6098      	str	r0, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8005536:	2020      	movs	r0, #32
 8005538:	67e0      	str	r0, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800553a:	6627      	str	r7, [r4, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800553c:	6818      	ldr	r0, [r3, #0]
        huart->RxISR = NULL;
 800553e:	6667      	str	r7, [r4, #100]	; 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005540:	4390      	bics	r0, r2
 8005542:	6018      	str	r0, [r3, #0]
 8005544:	e7de      	b.n	8005504 <HAL_UART_IRQHandler+0x190>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005546:	2280      	movs	r2, #128	; 0x80
 8005548:	0352      	lsls	r2, r2, #13
 800554a:	4211      	tst	r1, r2
 800554c:	d006      	beq.n	800555c <HAL_UART_IRQHandler+0x1e8>
 800554e:	0275      	lsls	r5, r6, #9
 8005550:	d504      	bpl.n	800555c <HAL_UART_IRQHandler+0x1e8>
    HAL_UARTEx_WakeupCallback(huart);
 8005552:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005554:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8005556:	f000 fb55 	bl	8005c04 <HAL_UARTEx_WakeupCallback>
    return;
 800555a:	e786      	b.n	800546a <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800555c:	2280      	movs	r2, #128	; 0x80
 800555e:	4211      	tst	r1, r2
 8005560:	d003      	beq.n	800556a <HAL_UART_IRQHandler+0x1f6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005562:	4210      	tst	r0, r2
 8005564:	d001      	beq.n	800556a <HAL_UART_IRQHandler+0x1f6>
    if (huart->TxISR != NULL)
 8005566:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005568:	e715      	b.n	8005396 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800556a:	2540      	movs	r5, #64	; 0x40
 800556c:	4229      	tst	r1, r5
 800556e:	d100      	bne.n	8005572 <HAL_UART_IRQHandler+0x1fe>
 8005570:	e77b      	b.n	800546a <HAL_UART_IRQHandler+0xf6>
 8005572:	4228      	tst	r0, r5
 8005574:	d100      	bne.n	8005578 <HAL_UART_IRQHandler+0x204>
 8005576:	e778      	b.n	800546a <HAL_UART_IRQHandler+0xf6>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005578:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800557a:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800557c:	43aa      	bics	r2, r5
 800557e:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005580:	2320      	movs	r3, #32
 8005582:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 8005584:	2300      	movs	r3, #0
 8005586:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 8005588:	f7fd fc48 	bl	8002e1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800558c:	e76d      	b.n	800546a <HAL_UART_IRQHandler+0xf6>
 800558e:	46c0      	nop			; (mov r8, r8)
 8005590:	0000080f 	.word	0x0000080f
 8005594:	04000120 	.word	0x04000120
 8005598:	0800535d 	.word	0x0800535d
 800559c:	fffffeff 	.word	0xfffffeff
 80055a0:	fffffedf 	.word	0xfffffedf

080055a4 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055a4:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 80055a6:	b510      	push	{r4, lr}
 80055a8:	6803      	ldr	r3, [r0, #0]
 80055aa:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055ac:	2a22      	cmp	r2, #34	; 0x22
 80055ae:	d134      	bne.n	800561a <UART_RxISR_8BIT+0x76>
  uint16_t uhMask = huart->Mask;
 80055b0:	0002      	movs	r2, r0
 80055b2:	325c      	adds	r2, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80055b6:	8812      	ldrh	r2, [r2, #0]
 80055b8:	4013      	ands	r3, r2
 80055ba:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80055bc:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 80055be:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 80055c0:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80055c2:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 80055c4:	3301      	adds	r3, #1
 80055c6:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80055c8:	8813      	ldrh	r3, [r2, #0]
 80055ca:	3b01      	subs	r3, #1
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 80055d0:	8813      	ldrh	r3, [r2, #0]
 80055d2:	b299      	uxth	r1, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d11b      	bne.n	8005610 <UART_RxISR_8BIT+0x6c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055d8:	6803      	ldr	r3, [r0, #0]
 80055da:	4812      	ldr	r0, [pc, #72]	; (8005624 <UART_RxISR_8BIT+0x80>)
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	4002      	ands	r2, r0
 80055e0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	3023      	adds	r0, #35	; 0x23
 80055e6:	30ff      	adds	r0, #255	; 0xff
 80055e8:	4382      	bics	r2, r0
 80055ea:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055ec:	2220      	movs	r2, #32
 80055ee:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055f0:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 80055f2:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055f4:	4282      	cmp	r2, r0
 80055f6:	d10c      	bne.n	8005612 <UART_RxISR_8BIT+0x6e>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055f8:	2110      	movs	r1, #16
 80055fa:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055fc:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055fe:	438a      	bics	r2, r1
 8005600:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005602:	0023      	movs	r3, r4
 8005604:	3358      	adds	r3, #88	; 0x58
 8005606:	8819      	ldrh	r1, [r3, #0]
 8005608:	f7ff feb3 	bl	8005372 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800560c:	2300      	movs	r3, #0
 800560e:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005610:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 8005612:	0020      	movs	r0, r4
 8005614:	f7fd fc0a 	bl	8002e2c <HAL_UART_RxCpltCallback>
 8005618:	e7f8      	b.n	800560c <UART_RxISR_8BIT+0x68>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800561a:	2208      	movs	r2, #8
 800561c:	6999      	ldr	r1, [r3, #24]
 800561e:	430a      	orrs	r2, r1
 8005620:	619a      	str	r2, [r3, #24]
}
 8005622:	e7f5      	b.n	8005610 <UART_RxISR_8BIT+0x6c>
 8005624:	fffffedf 	.word	0xfffffedf

08005628 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005628:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 800562a:	b510      	push	{r4, lr}
 800562c:	6803      	ldr	r3, [r0, #0]
 800562e:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005630:	2a22      	cmp	r2, #34	; 0x22
 8005632:	d131      	bne.n	8005698 <UART_RxISR_16BIT+0x70>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005634:	6d42      	ldr	r2, [r0, #84]	; 0x54
  uint16_t uhMask = huart->Mask;
 8005636:	305c      	adds	r0, #92	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005638:	6a59      	ldr	r1, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 800563a:	8800      	ldrh	r0, [r0, #0]
 800563c:	4001      	ands	r1, r0
 800563e:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8005640:	0021      	movs	r1, r4
    huart->pRxBuffPtr += 2U;
 8005642:	3202      	adds	r2, #2
    huart->RxXferCount--;
 8005644:	315a      	adds	r1, #90	; 0x5a
    huart->pRxBuffPtr += 2U;
 8005646:	6562      	str	r2, [r4, #84]	; 0x54
    huart->RxXferCount--;
 8005648:	880a      	ldrh	r2, [r1, #0]
 800564a:	3a01      	subs	r2, #1
 800564c:	b292      	uxth	r2, r2
 800564e:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 8005650:	880a      	ldrh	r2, [r1, #0]
 8005652:	b291      	uxth	r1, r2
 8005654:	2a00      	cmp	r2, #0
 8005656:	d11a      	bne.n	800568e <UART_RxISR_16BIT+0x66>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	4812      	ldr	r0, [pc, #72]	; (80056a4 <UART_RxISR_16BIT+0x7c>)
 800565c:	4002      	ands	r2, r0
 800565e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005660:	689a      	ldr	r2, [r3, #8]
 8005662:	3023      	adds	r0, #35	; 0x23
 8005664:	30ff      	adds	r0, #255	; 0xff
 8005666:	4382      	bics	r2, r0
 8005668:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800566a:	2220      	movs	r2, #32
 800566c:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800566e:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 8005670:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005672:	4282      	cmp	r2, r0
 8005674:	d10c      	bne.n	8005690 <UART_RxISR_16BIT+0x68>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005676:	2110      	movs	r1, #16
 8005678:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800567a:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800567c:	438a      	bics	r2, r1
 800567e:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005680:	0023      	movs	r3, r4
 8005682:	3358      	adds	r3, #88	; 0x58
 8005684:	8819      	ldrh	r1, [r3, #0]
 8005686:	f7ff fe74 	bl	8005372 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568a:	2300      	movs	r3, #0
 800568c:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800568e:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 8005690:	0020      	movs	r0, r4
 8005692:	f7fd fbcb 	bl	8002e2c <HAL_UART_RxCpltCallback>
 8005696:	e7f8      	b.n	800568a <UART_RxISR_16BIT+0x62>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005698:	2208      	movs	r2, #8
 800569a:	6999      	ldr	r1, [r3, #24]
 800569c:	430a      	orrs	r2, r1
 800569e:	619a      	str	r2, [r3, #24]
}
 80056a0:	e7f5      	b.n	800568e <UART_RxISR_16BIT+0x66>
 80056a2:	46c0      	nop			; (mov r8, r8)
 80056a4:	fffffedf 	.word	0xfffffedf

080056a8 <UART_SetConfig>:
{
 80056a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056aa:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056ac:	6925      	ldr	r5, [r4, #16]
 80056ae:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 80056b0:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056b2:	4329      	orrs	r1, r5
 80056b4:	6965      	ldr	r5, [r4, #20]
 80056b6:	69c3      	ldr	r3, [r0, #28]
 80056b8:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056ba:	6810      	ldr	r0, [r2, #0]
 80056bc:	4d79      	ldr	r5, [pc, #484]	; (80058a4 <UART_SetConfig+0x1fc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056be:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056c0:	4028      	ands	r0, r5
 80056c2:	4301      	orrs	r1, r0
 80056c4:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056c6:	6851      	ldr	r1, [r2, #4]
 80056c8:	4877      	ldr	r0, [pc, #476]	; (80058a8 <UART_SetConfig+0x200>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056ca:	4d78      	ldr	r5, [pc, #480]	; (80058ac <UART_SetConfig+0x204>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056cc:	4001      	ands	r1, r0
 80056ce:	68e0      	ldr	r0, [r4, #12]
 80056d0:	4301      	orrs	r1, r0
 80056d2:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056d4:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056d6:	42aa      	cmp	r2, r5
 80056d8:	d001      	beq.n	80056de <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 80056da:	6a21      	ldr	r1, [r4, #32]
 80056dc:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056de:	6891      	ldr	r1, [r2, #8]
 80056e0:	4e73      	ldr	r6, [pc, #460]	; (80058b0 <UART_SetConfig+0x208>)
 80056e2:	4031      	ands	r1, r6
 80056e4:	4301      	orrs	r1, r0
 80056e6:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056e8:	4972      	ldr	r1, [pc, #456]	; (80058b4 <UART_SetConfig+0x20c>)
 80056ea:	428a      	cmp	r2, r1
 80056ec:	d10f      	bne.n	800570e <UART_SetConfig+0x66>
 80056ee:	2103      	movs	r1, #3
 80056f0:	4a71      	ldr	r2, [pc, #452]	; (80058b8 <UART_SetConfig+0x210>)
 80056f2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80056f4:	400a      	ands	r2, r1
 80056f6:	3a01      	subs	r2, #1
 80056f8:	4970      	ldr	r1, [pc, #448]	; (80058bc <UART_SetConfig+0x214>)
 80056fa:	2a02      	cmp	r2, #2
 80056fc:	d910      	bls.n	8005720 <UART_SetConfig+0x78>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056fe:	2280      	movs	r2, #128	; 0x80
 8005700:	0212      	lsls	r2, r2, #8
 8005702:	4293      	cmp	r3, r2
 8005704:	d000      	beq.n	8005708 <UART_SetConfig+0x60>
 8005706:	e0a3      	b.n	8005850 <UART_SetConfig+0x1a8>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005708:	f7fe ff20 	bl	800454c <HAL_RCC_GetPCLK2Freq>
 800570c:	e0c5      	b.n	800589a <UART_SetConfig+0x1f2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800570e:	496c      	ldr	r1, [pc, #432]	; (80058c0 <UART_SetConfig+0x218>)
 8005710:	428a      	cmp	r2, r1
 8005712:	d118      	bne.n	8005746 <UART_SetConfig+0x9e>
 8005714:	200c      	movs	r0, #12
 8005716:	4a68      	ldr	r2, [pc, #416]	; (80058b8 <UART_SetConfig+0x210>)
 8005718:	4968      	ldr	r1, [pc, #416]	; (80058bc <UART_SetConfig+0x214>)
 800571a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800571c:	3103      	adds	r1, #3
 800571e:	4002      	ands	r2, r0
 8005720:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005722:	2280      	movs	r2, #128	; 0x80
 8005724:	0212      	lsls	r2, r2, #8
 8005726:	4293      	cmp	r3, r2
 8005728:	d000      	beq.n	800572c <UART_SetConfig+0x84>
 800572a:	e083      	b.n	8005834 <UART_SetConfig+0x18c>
    switch (clocksource)
 800572c:	2808      	cmp	r0, #8
 800572e:	d824      	bhi.n	800577a <UART_SetConfig+0xd2>
 8005730:	f7fa fd06 	bl	8000140 <__gnu_thumb1_case_shi>
 8005734:	ffea00b1 	.word	0xffea00b1
 8005738:	0023005c 	.word	0x0023005c
 800573c:	0023007d 	.word	0x0023007d
 8005740:	00230023 	.word	0x00230023
 8005744:	0067      	.short	0x0067
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005746:	495f      	ldr	r1, [pc, #380]	; (80058c4 <UART_SetConfig+0x21c>)
 8005748:	428a      	cmp	r2, r1
 800574a:	d100      	bne.n	800574e <UART_SetConfig+0xa6>
 800574c:	e09f      	b.n	800588e <UART_SetConfig+0x1e6>
 800574e:	495e      	ldr	r1, [pc, #376]	; (80058c8 <UART_SetConfig+0x220>)
 8005750:	428a      	cmp	r2, r1
 8005752:	d100      	bne.n	8005756 <UART_SetConfig+0xae>
 8005754:	e09b      	b.n	800588e <UART_SetConfig+0x1e6>
 8005756:	42aa      	cmp	r2, r5
 8005758:	d10f      	bne.n	800577a <UART_SetConfig+0xd2>
 800575a:	21c0      	movs	r1, #192	; 0xc0
 800575c:	2080      	movs	r0, #128	; 0x80
 800575e:	4a56      	ldr	r2, [pc, #344]	; (80058b8 <UART_SetConfig+0x210>)
 8005760:	0109      	lsls	r1, r1, #4
 8005762:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005764:	0100      	lsls	r0, r0, #4
 8005766:	400b      	ands	r3, r1
 8005768:	4283      	cmp	r3, r0
 800576a:	d016      	beq.n	800579a <UART_SetConfig+0xf2>
 800576c:	d807      	bhi.n	800577e <UART_SetConfig+0xd6>
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00a      	beq.n	8005788 <UART_SetConfig+0xe0>
 8005772:	2280      	movs	r2, #128	; 0x80
 8005774:	00d2      	lsls	r2, r2, #3
 8005776:	4293      	cmp	r3, r2
 8005778:	d035      	beq.n	80057e6 <UART_SetConfig+0x13e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800577a:	2001      	movs	r0, #1
 800577c:	e009      	b.n	8005792 <UART_SetConfig+0xea>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800577e:	428b      	cmp	r3, r1
 8005780:	d1fb      	bne.n	800577a <UART_SetConfig+0xd2>
 8005782:	2080      	movs	r0, #128	; 0x80
 8005784:	0200      	lsls	r0, r0, #8
 8005786:	e012      	b.n	80057ae <UART_SetConfig+0x106>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005788:	f7fe fed0 	bl	800452c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800578c:	2800      	cmp	r0, #0
 800578e:	d10e      	bne.n	80057ae <UART_SetConfig+0x106>
 8005790:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8005792:	2300      	movs	r3, #0
 8005794:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8005796:	66a3      	str	r3, [r4, #104]	; 0x68
}
 8005798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800579a:	2310      	movs	r3, #16
 800579c:	6810      	ldr	r0, [r2, #0]
 800579e:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80057a0:	4243      	negs	r3, r0
 80057a2:	4158      	adcs	r0, r3
 80057a4:	4b49      	ldr	r3, [pc, #292]	; (80058cc <UART_SetConfig+0x224>)
 80057a6:	4240      	negs	r0, r0
 80057a8:	4018      	ands	r0, r3
 80057aa:	4b49      	ldr	r3, [pc, #292]	; (80058d0 <UART_SetConfig+0x228>)
 80057ac:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057ae:	2203      	movs	r2, #3
 80057b0:	6863      	ldr	r3, [r4, #4]
 80057b2:	435a      	muls	r2, r3
 80057b4:	4282      	cmp	r2, r0
 80057b6:	d8e0      	bhi.n	800577a <UART_SetConfig+0xd2>
          (pclk > (4096U * huart->Init.BaudRate)))
 80057b8:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057ba:	4282      	cmp	r2, r0
 80057bc:	d3dd      	bcc.n	800577a <UART_SetConfig+0xd2>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80057be:	2700      	movs	r7, #0
 80057c0:	0e02      	lsrs	r2, r0, #24
 80057c2:	0201      	lsls	r1, r0, #8
 80057c4:	085e      	lsrs	r6, r3, #1
 80057c6:	1989      	adds	r1, r1, r6
 80057c8:	417a      	adcs	r2, r7
 80057ca:	0008      	movs	r0, r1
 80057cc:	0011      	movs	r1, r2
 80057ce:	001a      	movs	r2, r3
 80057d0:	003b      	movs	r3, r7
 80057d2:	f7fa fe3f 	bl	8000454 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057d6:	4b3f      	ldr	r3, [pc, #252]	; (80058d4 <UART_SetConfig+0x22c>)
 80057d8:	18c2      	adds	r2, r0, r3
 80057da:	4b3f      	ldr	r3, [pc, #252]	; (80058d8 <UART_SetConfig+0x230>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057dc:	429a      	cmp	r2, r3
 80057de:	d8cc      	bhi.n	800577a <UART_SetConfig+0xd2>
        huart->Instance->BRR = usartdiv;
 80057e0:	6823      	ldr	r3, [r4, #0]
 80057e2:	60d8      	str	r0, [r3, #12]
 80057e4:	e7d4      	b.n	8005790 <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetSysClockFreq();
 80057e6:	f7fe faff 	bl	8003de8 <HAL_RCC_GetSysClockFreq>
        break;
 80057ea:	e7cf      	b.n	800578c <UART_SetConfig+0xe4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057ec:	4b32      	ldr	r3, [pc, #200]	; (80058b8 <UART_SetConfig+0x210>)
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80057ee:	4a38      	ldr	r2, [pc, #224]	; (80058d0 <UART_SetConfig+0x228>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057f0:	6818      	ldr	r0, [r3, #0]
 80057f2:	2310      	movs	r3, #16
 80057f4:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80057f6:	4243      	negs	r3, r0
 80057f8:	4158      	adcs	r0, r3
 80057fa:	4b34      	ldr	r3, [pc, #208]	; (80058cc <UART_SetConfig+0x224>)
 80057fc:	4240      	negs	r0, r0
 80057fe:	4003      	ands	r3, r0
 8005800:	189b      	adds	r3, r3, r2
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005802:	0058      	lsls	r0, r3, #1
 8005804:	6863      	ldr	r3, [r4, #4]
 8005806:	6861      	ldr	r1, [r4, #4]
 8005808:	085b      	lsrs	r3, r3, #1
 800580a:	18c0      	adds	r0, r0, r3
 800580c:	f7fa fcac 	bl	8000168 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005810:	4932      	ldr	r1, [pc, #200]	; (80058dc <UART_SetConfig+0x234>)
 8005812:	b282      	uxth	r2, r0
 8005814:	3a10      	subs	r2, #16
 8005816:	0403      	lsls	r3, r0, #16
 8005818:	428a      	cmp	r2, r1
 800581a:	d8ae      	bhi.n	800577a <UART_SetConfig+0xd2>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800581c:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800581e:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005820:	4390      	bics	r0, r2
 8005822:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8005824:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005826:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8005828:	4318      	orrs	r0, r3
 800582a:	60d0      	str	r0, [r2, #12]
 800582c:	e7b0      	b.n	8005790 <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetSysClockFreq();
 800582e:	f7fe fadb 	bl	8003de8 <HAL_RCC_GetSysClockFreq>
 8005832:	e032      	b.n	800589a <UART_SetConfig+0x1f2>
    switch (clocksource)
 8005834:	2808      	cmp	r0, #8
 8005836:	d8a0      	bhi.n	800577a <UART_SetConfig+0xd2>
 8005838:	f7fa fc6e 	bl	8000118 <__gnu_thumb1_case_sqi>
 800583c:	9f0d0a05 	.word	0x9f0d0a05
 8005840:	9f9f9f23 	.word	0x9f9f9f23
 8005844:	26          	.byte	0x26
 8005845:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8005846:	f7fe fe71 	bl	800452c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800584a:	2800      	cmp	r0, #0
 800584c:	d0a0      	beq.n	8005790 <UART_SetConfig+0xe8>
 800584e:	e00d      	b.n	800586c <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005850:	f7fe fe7c 	bl	800454c <HAL_RCC_GetPCLK2Freq>
        break;
 8005854:	e7f9      	b.n	800584a <UART_SetConfig+0x1a2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005856:	4b18      	ldr	r3, [pc, #96]	; (80058b8 <UART_SetConfig+0x210>)
 8005858:	6818      	ldr	r0, [r3, #0]
 800585a:	2310      	movs	r3, #16
 800585c:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800585e:	4243      	negs	r3, r0
 8005860:	4158      	adcs	r0, r3
 8005862:	4b1a      	ldr	r3, [pc, #104]	; (80058cc <UART_SetConfig+0x224>)
 8005864:	4240      	negs	r0, r0
 8005866:	4018      	ands	r0, r3
 8005868:	4b19      	ldr	r3, [pc, #100]	; (80058d0 <UART_SetConfig+0x228>)
 800586a:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800586c:	6863      	ldr	r3, [r4, #4]
 800586e:	6861      	ldr	r1, [r4, #4]
 8005870:	085b      	lsrs	r3, r3, #1
 8005872:	1818      	adds	r0, r3, r0
 8005874:	f7fa fc78 	bl	8000168 <__udivsi3>
 8005878:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800587a:	0002      	movs	r2, r0
 800587c:	4b17      	ldr	r3, [pc, #92]	; (80058dc <UART_SetConfig+0x234>)
 800587e:	3a10      	subs	r2, #16
 8005880:	e7ac      	b.n	80057dc <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetSysClockFreq();
 8005882:	f7fe fab1 	bl	8003de8 <HAL_RCC_GetSysClockFreq>
        break;
 8005886:	e7e0      	b.n	800584a <UART_SetConfig+0x1a2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005888:	2080      	movs	r0, #128	; 0x80
 800588a:	0200      	lsls	r0, r0, #8
 800588c:	e7ee      	b.n	800586c <UART_SetConfig+0x1c4>
 800588e:	2280      	movs	r2, #128	; 0x80
 8005890:	0212      	lsls	r2, r2, #8
 8005892:	4293      	cmp	r3, r2
 8005894:	d1d7      	bne.n	8005846 <UART_SetConfig+0x19e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005896:	f7fe fe49 	bl	800452c <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 800589a:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 800589c:	d100      	bne.n	80058a0 <UART_SetConfig+0x1f8>
 800589e:	e777      	b.n	8005790 <UART_SetConfig+0xe8>
 80058a0:	e7af      	b.n	8005802 <UART_SetConfig+0x15a>
 80058a2:	46c0      	nop			; (mov r8, r8)
 80058a4:	efff69f3 	.word	0xefff69f3
 80058a8:	ffffcfff 	.word	0xffffcfff
 80058ac:	40004800 	.word	0x40004800
 80058b0:	fffff4ff 	.word	0xfffff4ff
 80058b4:	40013800 	.word	0x40013800
 80058b8:	40021000 	.word	0x40021000
 80058bc:	08008c29 	.word	0x08008c29
 80058c0:	40004400 	.word	0x40004400
 80058c4:	40004c00 	.word	0x40004c00
 80058c8:	40005000 	.word	0x40005000
 80058cc:	00b71b00 	.word	0x00b71b00
 80058d0:	003d0900 	.word	0x003d0900
 80058d4:	fffffd00 	.word	0xfffffd00
 80058d8:	000ffcff 	.word	0x000ffcff
 80058dc:	0000ffef 	.word	0x0000ffef

080058e0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80058e2:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058e4:	07da      	lsls	r2, r3, #31
 80058e6:	d506      	bpl.n	80058f6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058e8:	6801      	ldr	r1, [r0, #0]
 80058ea:	4c28      	ldr	r4, [pc, #160]	; (800598c <UART_AdvFeatureConfig+0xac>)
 80058ec:	684a      	ldr	r2, [r1, #4]
 80058ee:	4022      	ands	r2, r4
 80058f0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80058f2:	4322      	orrs	r2, r4
 80058f4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058f6:	079a      	lsls	r2, r3, #30
 80058f8:	d506      	bpl.n	8005908 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058fa:	6801      	ldr	r1, [r0, #0]
 80058fc:	4c24      	ldr	r4, [pc, #144]	; (8005990 <UART_AdvFeatureConfig+0xb0>)
 80058fe:	684a      	ldr	r2, [r1, #4]
 8005900:	4022      	ands	r2, r4
 8005902:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005904:	4322      	orrs	r2, r4
 8005906:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005908:	075a      	lsls	r2, r3, #29
 800590a:	d506      	bpl.n	800591a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800590c:	6801      	ldr	r1, [r0, #0]
 800590e:	4c21      	ldr	r4, [pc, #132]	; (8005994 <UART_AdvFeatureConfig+0xb4>)
 8005910:	684a      	ldr	r2, [r1, #4]
 8005912:	4022      	ands	r2, r4
 8005914:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005916:	4322      	orrs	r2, r4
 8005918:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800591a:	071a      	lsls	r2, r3, #28
 800591c:	d506      	bpl.n	800592c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800591e:	6801      	ldr	r1, [r0, #0]
 8005920:	4c1d      	ldr	r4, [pc, #116]	; (8005998 <UART_AdvFeatureConfig+0xb8>)
 8005922:	684a      	ldr	r2, [r1, #4]
 8005924:	4022      	ands	r2, r4
 8005926:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005928:	4322      	orrs	r2, r4
 800592a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800592c:	06da      	lsls	r2, r3, #27
 800592e:	d506      	bpl.n	800593e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005930:	6801      	ldr	r1, [r0, #0]
 8005932:	4c1a      	ldr	r4, [pc, #104]	; (800599c <UART_AdvFeatureConfig+0xbc>)
 8005934:	688a      	ldr	r2, [r1, #8]
 8005936:	4022      	ands	r2, r4
 8005938:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800593a:	4322      	orrs	r2, r4
 800593c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800593e:	069a      	lsls	r2, r3, #26
 8005940:	d506      	bpl.n	8005950 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005942:	6801      	ldr	r1, [r0, #0]
 8005944:	4c16      	ldr	r4, [pc, #88]	; (80059a0 <UART_AdvFeatureConfig+0xc0>)
 8005946:	688a      	ldr	r2, [r1, #8]
 8005948:	4022      	ands	r2, r4
 800594a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800594c:	4322      	orrs	r2, r4
 800594e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005950:	065a      	lsls	r2, r3, #25
 8005952:	d510      	bpl.n	8005976 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005954:	6801      	ldr	r1, [r0, #0]
 8005956:	4d13      	ldr	r5, [pc, #76]	; (80059a4 <UART_AdvFeatureConfig+0xc4>)
 8005958:	684a      	ldr	r2, [r1, #4]
 800595a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800595c:	402a      	ands	r2, r5
 800595e:	4322      	orrs	r2, r4
 8005960:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005962:	2280      	movs	r2, #128	; 0x80
 8005964:	0352      	lsls	r2, r2, #13
 8005966:	4294      	cmp	r4, r2
 8005968:	d105      	bne.n	8005976 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800596a:	684a      	ldr	r2, [r1, #4]
 800596c:	4c0e      	ldr	r4, [pc, #56]	; (80059a8 <UART_AdvFeatureConfig+0xc8>)
 800596e:	4022      	ands	r2, r4
 8005970:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005972:	4322      	orrs	r2, r4
 8005974:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005976:	061b      	lsls	r3, r3, #24
 8005978:	d506      	bpl.n	8005988 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800597a:	6802      	ldr	r2, [r0, #0]
 800597c:	490b      	ldr	r1, [pc, #44]	; (80059ac <UART_AdvFeatureConfig+0xcc>)
 800597e:	6853      	ldr	r3, [r2, #4]
 8005980:	400b      	ands	r3, r1
 8005982:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005984:	430b      	orrs	r3, r1
 8005986:	6053      	str	r3, [r2, #4]
}
 8005988:	bd30      	pop	{r4, r5, pc}
 800598a:	46c0      	nop			; (mov r8, r8)
 800598c:	fffdffff 	.word	0xfffdffff
 8005990:	fffeffff 	.word	0xfffeffff
 8005994:	fffbffff 	.word	0xfffbffff
 8005998:	ffff7fff 	.word	0xffff7fff
 800599c:	ffffefff 	.word	0xffffefff
 80059a0:	ffffdfff 	.word	0xffffdfff
 80059a4:	ffefffff 	.word	0xffefffff
 80059a8:	ff9fffff 	.word	0xff9fffff
 80059ac:	fff7ffff 	.word	0xfff7ffff

080059b0 <UART_WaitOnFlagUntilTimeout>:
{
 80059b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059b2:	2780      	movs	r7, #128	; 0x80
{
 80059b4:	0004      	movs	r4, r0
 80059b6:	000d      	movs	r5, r1
 80059b8:	0016      	movs	r6, r2
 80059ba:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059bc:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059be:	6822      	ldr	r2, [r4, #0]
 80059c0:	69d3      	ldr	r3, [r2, #28]
 80059c2:	402b      	ands	r3, r5
 80059c4:	1b5b      	subs	r3, r3, r5
 80059c6:	4259      	negs	r1, r3
 80059c8:	414b      	adcs	r3, r1
 80059ca:	42b3      	cmp	r3, r6
 80059cc:	d001      	beq.n	80059d2 <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 80059ce:	2000      	movs	r0, #0
 80059d0:	e01c      	b.n	8005a0c <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80059d2:	9b08      	ldr	r3, [sp, #32]
 80059d4:	3301      	adds	r3, #1
 80059d6:	d0f3      	beq.n	80059c0 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059d8:	f7fd f82e 	bl	8002a38 <HAL_GetTick>
 80059dc:	9b01      	ldr	r3, [sp, #4]
 80059de:	9a08      	ldr	r2, [sp, #32]
 80059e0:	1ac0      	subs	r0, r0, r3
 80059e2:	6823      	ldr	r3, [r4, #0]
 80059e4:	4290      	cmp	r0, r2
 80059e6:	d801      	bhi.n	80059ec <UART_WaitOnFlagUntilTimeout+0x3c>
 80059e8:	2a00      	cmp	r2, #0
 80059ea:	d110      	bne.n	8005a0e <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	4913      	ldr	r1, [pc, #76]	; (8005a3c <UART_WaitOnFlagUntilTimeout+0x8c>)
 80059f0:	400a      	ands	r2, r1
 80059f2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	31a3      	adds	r1, #163	; 0xa3
 80059f8:	31ff      	adds	r1, #255	; 0xff
 80059fa:	438a      	bics	r2, r1
 80059fc:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80059fe:	2320      	movs	r3, #32
 8005a00:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005a02:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8005a04:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8005a06:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8005a08:	3474      	adds	r4, #116	; 0x74
 8005a0a:	7023      	strb	r3, [r4, #0]
}
 8005a0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a0e:	2104      	movs	r1, #4
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	420a      	tst	r2, r1
 8005a14:	d0d3      	beq.n	80059be <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a16:	69da      	ldr	r2, [r3, #28]
 8005a18:	423a      	tst	r2, r7
 8005a1a:	d0d0      	beq.n	80059be <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a1c:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	4906      	ldr	r1, [pc, #24]	; (8005a3c <UART_WaitOnFlagUntilTimeout+0x8c>)
 8005a22:	400a      	ands	r2, r1
 8005a24:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a26:	689a      	ldr	r2, [r3, #8]
 8005a28:	31a3      	adds	r1, #163	; 0xa3
 8005a2a:	31ff      	adds	r1, #255	; 0xff
 8005a2c:	438a      	bics	r2, r1
 8005a2e:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8005a30:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a32:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 8005a34:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005a36:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a38:	67d3      	str	r3, [r2, #124]	; 0x7c
 8005a3a:	e7e3      	b.n	8005a04 <UART_WaitOnFlagUntilTimeout+0x54>
 8005a3c:	fffffe5f 	.word	0xfffffe5f

08005a40 <UART_CheckIdleState>:
{
 8005a40:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a42:	2600      	movs	r6, #0
{
 8005a44:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a46:	1d03      	adds	r3, r0, #4
 8005a48:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8005a4a:	f7fc fff5 	bl	8002a38 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a4e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005a50:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	071b      	lsls	r3, r3, #28
 8005a56:	d416      	bmi.n	8005a86 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a58:	6823      	ldr	r3, [r4, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	075b      	lsls	r3, r3, #29
 8005a5e:	d50a      	bpl.n	8005a76 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a60:	2180      	movs	r1, #128	; 0x80
 8005a62:	4b0f      	ldr	r3, [pc, #60]	; (8005aa0 <UART_CheckIdleState+0x60>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	0020      	movs	r0, r4
 8005a6a:	002b      	movs	r3, r5
 8005a6c:	03c9      	lsls	r1, r1, #15
 8005a6e:	f7ff ff9f 	bl	80059b0 <UART_WaitOnFlagUntilTimeout>
 8005a72:	2800      	cmp	r0, #0
 8005a74:	d112      	bne.n	8005a9c <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 8005a76:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a78:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005a7a:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005a7c:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a7e:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8005a80:	3474      	adds	r4, #116	; 0x74
 8005a82:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8005a84:	e00b      	b.n	8005a9e <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a86:	2180      	movs	r1, #128	; 0x80
 8005a88:	4b05      	ldr	r3, [pc, #20]	; (8005aa0 <UART_CheckIdleState+0x60>)
 8005a8a:	0032      	movs	r2, r6
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	0389      	lsls	r1, r1, #14
 8005a90:	0003      	movs	r3, r0
 8005a92:	0020      	movs	r0, r4
 8005a94:	f7ff ff8c 	bl	80059b0 <UART_WaitOnFlagUntilTimeout>
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	d0dd      	beq.n	8005a58 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8005a9c:	2003      	movs	r0, #3
}
 8005a9e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8005aa0:	01ffffff 	.word	0x01ffffff

08005aa4 <HAL_UART_Init>:
{
 8005aa4:	b510      	push	{r4, lr}
 8005aa6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8005aa8:	d101      	bne.n	8005aae <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8005aaa:	2001      	movs	r0, #1
}
 8005aac:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8005aae:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d104      	bne.n	8005abe <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8005ab4:	0002      	movs	r2, r0
 8005ab6:	3274      	adds	r2, #116	; 0x74
 8005ab8:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8005aba:	f7fc ffe1 	bl	8002a80 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8005abe:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005ac4:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8005ac6:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ac8:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8005aca:	438b      	bics	r3, r1
 8005acc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ace:	f7ff fdeb 	bl	80056a8 <UART_SetConfig>
 8005ad2:	2801      	cmp	r0, #1
 8005ad4:	d0e9      	beq.n	8005aaa <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d002      	beq.n	8005ae2 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8005adc:	0020      	movs	r0, r4
 8005ade:	f7ff feff 	bl	80058e0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	4907      	ldr	r1, [pc, #28]	; (8005b04 <HAL_UART_Init+0x60>)
 8005ae6:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8005ae8:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aea:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aec:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005af0:	689a      	ldr	r2, [r3, #8]
 8005af2:	438a      	bics	r2, r1
 8005af4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005af6:	2201      	movs	r2, #1
 8005af8:	6819      	ldr	r1, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005afe:	f7ff ff9f 	bl	8005a40 <UART_CheckIdleState>
 8005b02:	e7d3      	b.n	8005aac <HAL_UART_Init+0x8>
 8005b04:	ffffb7ff 	.word	0xffffb7ff

08005b08 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 8005b08:	0003      	movs	r3, r0
 8005b0a:	3358      	adds	r3, #88	; 0x58
{
 8005b0c:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 8005b0e:	6541      	str	r1, [r0, #84]	; 0x54
  UART_MASK_COMPUTATION(huart);
 8005b10:	2480      	movs	r4, #128	; 0x80
  huart->RxXferSize  = Size;
 8005b12:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 8005b14:	805a      	strh	r2, [r3, #2]
  huart->RxISR       = NULL;
 8005b16:	2200      	movs	r2, #0
  UART_MASK_COMPUTATION(huart);
 8005b18:	6881      	ldr	r1, [r0, #8]
  huart->RxISR       = NULL;
 8005b1a:	6642      	str	r2, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8005b1c:	0164      	lsls	r4, r4, #5
 8005b1e:	3304      	adds	r3, #4
 8005b20:	42a1      	cmp	r1, r4
 8005b22:	d124      	bne.n	8005b6e <UART_Start_Receive_IT+0x66>
 8005b24:	6902      	ldr	r2, [r0, #16]
 8005b26:	2a00      	cmp	r2, #0
 8005b28:	d11f      	bne.n	8005b6a <UART_Start_Receive_IT+0x62>
 8005b2a:	4a19      	ldr	r2, [pc, #100]	; (8005b90 <UART_Start_Receive_IT+0x88>)
 8005b2c:	801a      	strh	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b2e:	2200      	movs	r2, #0
 8005b30:	1d03      	adds	r3, r0, #4
 8005b32:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b34:	2322      	movs	r3, #34	; 0x22
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b36:	6802      	ldr	r2, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b38:	67c3      	str	r3, [r0, #124]	; 0x7c
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b3a:	6894      	ldr	r4, [r2, #8]
 8005b3c:	3b21      	subs	r3, #33	; 0x21
 8005b3e:	4323      	orrs	r3, r4
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b40:	2480      	movs	r4, #128	; 0x80
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b42:	6093      	str	r3, [r2, #8]
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b44:	0164      	lsls	r4, r4, #5
    huart->RxISR = UART_RxISR_8BIT;
 8005b46:	4b13      	ldr	r3, [pc, #76]	; (8005b94 <UART_Start_Receive_IT+0x8c>)
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b48:	42a1      	cmp	r1, r4
 8005b4a:	d103      	bne.n	8005b54 <UART_Start_Receive_IT+0x4c>
 8005b4c:	6901      	ldr	r1, [r0, #16]
 8005b4e:	2900      	cmp	r1, #0
 8005b50:	d100      	bne.n	8005b54 <UART_Start_Receive_IT+0x4c>
    huart->RxISR = UART_RxISR_16BIT;
 8005b52:	4b11      	ldr	r3, [pc, #68]	; (8005b98 <UART_Start_Receive_IT+0x90>)
 8005b54:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8005b56:	0003      	movs	r3, r0
 8005b58:	2000      	movs	r0, #0
 8005b5a:	3374      	adds	r3, #116	; 0x74
 8005b5c:	7018      	strb	r0, [r3, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005b5e:	2390      	movs	r3, #144	; 0x90
 8005b60:	6811      	ldr	r1, [r2, #0]
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	430b      	orrs	r3, r1
 8005b66:	6013      	str	r3, [r2, #0]
}
 8005b68:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 8005b6a:	22ff      	movs	r2, #255	; 0xff
 8005b6c:	e7de      	b.n	8005b2c <UART_Start_Receive_IT+0x24>
 8005b6e:	2900      	cmp	r1, #0
 8005b70:	d104      	bne.n	8005b7c <UART_Start_Receive_IT+0x74>
 8005b72:	6902      	ldr	r2, [r0, #16]
 8005b74:	2a00      	cmp	r2, #0
 8005b76:	d0f8      	beq.n	8005b6a <UART_Start_Receive_IT+0x62>
 8005b78:	227f      	movs	r2, #127	; 0x7f
 8005b7a:	e7d7      	b.n	8005b2c <UART_Start_Receive_IT+0x24>
 8005b7c:	2480      	movs	r4, #128	; 0x80
 8005b7e:	0564      	lsls	r4, r4, #21
 8005b80:	42a1      	cmp	r1, r4
 8005b82:	d1d3      	bne.n	8005b2c <UART_Start_Receive_IT+0x24>
 8005b84:	6902      	ldr	r2, [r0, #16]
 8005b86:	2a00      	cmp	r2, #0
 8005b88:	d0f6      	beq.n	8005b78 <UART_Start_Receive_IT+0x70>
 8005b8a:	223f      	movs	r2, #63	; 0x3f
 8005b8c:	e7ce      	b.n	8005b2c <UART_Start_Receive_IT+0x24>
 8005b8e:	46c0      	nop			; (mov r8, r8)
 8005b90:	000001ff 	.word	0x000001ff
 8005b94:	080055a5 	.word	0x080055a5
 8005b98:	08005629 	.word	0x08005629

08005b9c <HAL_UART_Receive_IT>:
{
 8005b9c:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b9e:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    return HAL_BUSY;
 8005ba0:	2302      	movs	r3, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ba2:	2c20      	cmp	r4, #32
 8005ba4:	d129      	bne.n	8005bfa <HAL_UART_Receive_IT+0x5e>
      return HAL_ERROR;
 8005ba6:	3b01      	subs	r3, #1
    if ((pData == NULL) || (Size == 0U))
 8005ba8:	2900      	cmp	r1, #0
 8005baa:	d026      	beq.n	8005bfa <HAL_UART_Receive_IT+0x5e>
 8005bac:	2a00      	cmp	r2, #0
 8005bae:	d024      	beq.n	8005bfa <HAL_UART_Receive_IT+0x5e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bb0:	2380      	movs	r3, #128	; 0x80
 8005bb2:	6884      	ldr	r4, [r0, #8]
 8005bb4:	015b      	lsls	r3, r3, #5
 8005bb6:	429c      	cmp	r4, r3
 8005bb8:	d106      	bne.n	8005bc8 <HAL_UART_Receive_IT+0x2c>
 8005bba:	6903      	ldr	r3, [r0, #16]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d103      	bne.n	8005bc8 <HAL_UART_Receive_IT+0x2c>
      if ((((uint32_t)pData) & 1U) != 0U)
 8005bc0:	2401      	movs	r4, #1
      return HAL_ERROR;
 8005bc2:	0023      	movs	r3, r4
      if ((((uint32_t)pData) & 1U) != 0U)
 8005bc4:	4221      	tst	r1, r4
 8005bc6:	d118      	bne.n	8005bfa <HAL_UART_Receive_IT+0x5e>
    __HAL_LOCK(huart);
 8005bc8:	0004      	movs	r4, r0
 8005bca:	3474      	adds	r4, #116	; 0x74
 8005bcc:	7825      	ldrb	r5, [r4, #0]
    return HAL_BUSY;
 8005bce:	2302      	movs	r3, #2
    __HAL_LOCK(huart);
 8005bd0:	2d01      	cmp	r5, #1
 8005bd2:	d012      	beq.n	8005bfa <HAL_UART_Receive_IT+0x5e>
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	7023      	strb	r3, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd8:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005bda:	4c09      	ldr	r4, [pc, #36]	; (8005c00 <HAL_UART_Receive_IT+0x64>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bdc:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005bde:	6803      	ldr	r3, [r0, #0]
 8005be0:	42a3      	cmp	r3, r4
 8005be2:	d007      	beq.n	8005bf4 <HAL_UART_Receive_IT+0x58>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005be4:	685c      	ldr	r4, [r3, #4]
 8005be6:	0224      	lsls	r4, r4, #8
 8005be8:	d504      	bpl.n	8005bf4 <HAL_UART_Receive_IT+0x58>
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005bea:	2480      	movs	r4, #128	; 0x80
 8005bec:	681d      	ldr	r5, [r3, #0]
 8005bee:	04e4      	lsls	r4, r4, #19
 8005bf0:	432c      	orrs	r4, r5
 8005bf2:	601c      	str	r4, [r3, #0]
    return(UART_Start_Receive_IT(huart, pData, Size));
 8005bf4:	f7ff ff88 	bl	8005b08 <UART_Start_Receive_IT>
 8005bf8:	0003      	movs	r3, r0
}
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	bd70      	pop	{r4, r5, r6, pc}
 8005bfe:	46c0      	nop			; (mov r8, r8)
 8005c00:	40004800 	.word	0x40004800

08005c04 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c04:	4770      	bx	lr
	...

08005c08 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8005c08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c0a:	0005      	movs	r5, r0
{
 8005c0c:	9102      	str	r1, [sp, #8]
 8005c0e:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(huart);
 8005c10:	3574      	adds	r5, #116	; 0x74
 8005c12:	782b      	ldrb	r3, [r5, #0]
{
 8005c14:	0004      	movs	r4, r0
 8005c16:	ae02      	add	r6, sp, #8
  __HAL_LOCK(huart);
 8005c18:	2002      	movs	r0, #2
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d030      	beq.n	8005c80 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8005c1e:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8005c20:	3801      	subs	r0, #1
 8005c22:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005c24:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	4382      	bics	r2, r0
 8005c2c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8005c2e:	689a      	ldr	r2, [r3, #8]
 8005c30:	4815      	ldr	r0, [pc, #84]	; (8005c88 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x80>)
 8005c32:	4002      	ands	r2, r0
 8005c34:	430a      	orrs	r2, r1
 8005c36:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8005c38:	2900      	cmp	r1, #0
 8005c3a:	d10c      	bne.n	8005c56 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x4e>
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8005c3c:	2210      	movs	r2, #16
 8005c3e:	6859      	ldr	r1, [r3, #4]
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8005c40:	79b0      	ldrb	r0, [r6, #6]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8005c42:	4391      	bics	r1, r2
 8005c44:	88b2      	ldrh	r2, [r6, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8005c46:	0600      	lsls	r0, r0, #24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8005c48:	4311      	orrs	r1, r2
 8005c4a:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	0212      	lsls	r2, r2, #8
 8005c50:	0a12      	lsrs	r2, r2, #8
 8005c52:	4302      	orrs	r2, r0
 8005c54:	605a      	str	r2, [r3, #4]
  __HAL_UART_ENABLE(huart);
 8005c56:	2201      	movs	r2, #1
 8005c58:	6819      	ldr	r1, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8005c5e:	f7fc feeb 	bl	8002a38 <HAL_GetTick>
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c62:	2180      	movs	r1, #128	; 0x80
 8005c64:	4a09      	ldr	r2, [pc, #36]	; (8005c8c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x84>)
  tickstart = HAL_GetTick();
 8005c66:	0003      	movs	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c68:	9200      	str	r2, [sp, #0]
 8005c6a:	0020      	movs	r0, r4
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	03c9      	lsls	r1, r1, #15
 8005c70:	f7ff fe9e 	bl	80059b0 <UART_WaitOnFlagUntilTimeout>
 8005c74:	2800      	cmp	r0, #0
 8005c76:	d105      	bne.n	8005c84 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 8005c78:	2320      	movs	r3, #32
 8005c7a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	702b      	strb	r3, [r5, #0]
}
 8005c80:	b004      	add	sp, #16
 8005c82:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_TIMEOUT;
 8005c84:	2003      	movs	r0, #3
 8005c86:	e7f9      	b.n	8005c7c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
 8005c88:	ffcfffff 	.word	0xffcfffff
 8005c8c:	01ffffff 	.word	0x01ffffff

08005c90 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8005c90:	0001      	movs	r1, r0
 8005c92:	2302      	movs	r3, #2
{
 8005c94:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 8005c96:	3174      	adds	r1, #116	; 0x74
 8005c98:	780c      	ldrb	r4, [r1, #0]
{
 8005c9a:	0002      	movs	r2, r0
  __HAL_LOCK(huart);
 8005c9c:	0018      	movs	r0, r3
 8005c9e:	2c01      	cmp	r4, #1
 8005ca0:	d005      	beq.n	8005cae <HAL_UARTEx_EnableStopMode+0x1e>
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8005ca2:	6812      	ldr	r2, [r2, #0]
 8005ca4:	6810      	ldr	r0, [r2, #0]
 8005ca6:	4303      	orrs	r3, r0
  __HAL_UNLOCK(huart);
 8005ca8:	2000      	movs	r0, #0
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8005caa:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8005cac:	7008      	strb	r0, [r1, #0]
}
 8005cae:	bd10      	pop	{r4, pc}

08005cb0 <HAL_UARTEx_DisableStopMode>:
  __HAL_LOCK(huart);
 8005cb0:	0002      	movs	r2, r0
{
 8005cb2:	b510      	push	{r4, lr}
 8005cb4:	2402      	movs	r4, #2
  __HAL_LOCK(huart);
 8005cb6:	3274      	adds	r2, #116	; 0x74
 8005cb8:	7811      	ldrb	r1, [r2, #0]
{
 8005cba:	0003      	movs	r3, r0
  __HAL_LOCK(huart);
 8005cbc:	0020      	movs	r0, r4
 8005cbe:	2901      	cmp	r1, #1
 8005cc0:	d005      	beq.n	8005cce <HAL_UARTEx_DisableStopMode+0x1e>
  __HAL_UNLOCK(huart);
 8005cc2:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8005cc4:	6819      	ldr	r1, [r3, #0]
 8005cc6:	680b      	ldr	r3, [r1, #0]
 8005cc8:	43a3      	bics	r3, r4
 8005cca:	600b      	str	r3, [r1, #0]
  __HAL_UNLOCK(huart);
 8005ccc:	7010      	strb	r0, [r2, #0]
}
 8005cce:	bd10      	pop	{r4, pc}

08005cd0 <RadioCheckRfFrequency>:
}

bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 8005cd0:	2001      	movs	r0, #1
 8005cd2:	4770      	bx	lr

08005cd4 <RadioOnTxTimeoutIrq>:
    return (uint32_t) Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
}

void RadioOnTxTimeoutIrq( void* context )
{
    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8005cd4:	4b04      	ldr	r3, [pc, #16]	; (8005ce8 <RadioOnTxTimeoutIrq+0x14>)
{
 8005cd6:	b510      	push	{r4, lr}
    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d003      	beq.n	8005ce6 <RadioOnTxTimeoutIrq+0x12>
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d000      	beq.n	8005ce6 <RadioOnTxTimeoutIrq+0x12>
    {
        RadioEvents->TxTimeout( );
 8005ce4:	4798      	blx	r3
    }
}
 8005ce6:	bd10      	pop	{r4, pc}
 8005ce8:	20000140 	.word	0x20000140

08005cec <RadioOnRxTimeoutIrq>:

void RadioOnRxTimeoutIrq( void* context )
{
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005cec:	4b04      	ldr	r3, [pc, #16]	; (8005d00 <RadioOnRxTimeoutIrq+0x14>)
{
 8005cee:	b510      	push	{r4, lr}
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <RadioOnRxTimeoutIrq+0x12>
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d000      	beq.n	8005cfe <RadioOnRxTimeoutIrq+0x12>
    {
        RadioEvents->RxTimeout( );
 8005cfc:	4798      	blx	r3
    }
}
 8005cfe:	bd10      	pop	{r4, pc}
 8005d00:	20000140 	.word	0x20000140

08005d04 <RadioStandby>:
{
 8005d04:	b510      	push	{r4, lr}
    SX126xSetStandby( STDBY_RC );
 8005d06:	2000      	movs	r0, #0
 8005d08:	f000 fd86 	bl	8006818 <SX126xSetStandby>
}
 8005d0c:	bd10      	pop	{r4, pc}
	...

08005d10 <RadioGetStatus>:
{
 8005d10:	b510      	push	{r4, lr}
    switch( SX126xGetOperatingMode( ) )
 8005d12:	f000 fd27 	bl	8006764 <SX126xGetOperatingMode>
 8005d16:	1f03      	subs	r3, r0, #4
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	2b03      	cmp	r3, #3
 8005d1e:	d801      	bhi.n	8005d24 <RadioGetStatus+0x14>
 8005d20:	4a01      	ldr	r2, [pc, #4]	; (8005d28 <RadioGetStatus+0x18>)
 8005d22:	5cd0      	ldrb	r0, [r2, r3]
}
 8005d24:	bd10      	pop	{r4, pc}
 8005d26:	46c0      	nop			; (mov r8, r8)
 8005d28:	08008c3c 	.word	0x08008c3c

08005d2c <RadioSetChannel>:
{
 8005d2c:	b510      	push	{r4, lr}
    SX126xSetRfFrequency( freq );
 8005d2e:	f000 fe93 	bl	8006a58 <SX126xSetRfFrequency>
}
 8005d32:	bd10      	pop	{r4, pc}

08005d34 <RadioRead>:
{
 8005d34:	b510      	push	{r4, lr}
    return SX126xReadRegister( addr );
 8005d36:	b280      	uxth	r0, r0
 8005d38:	f001 f88e 	bl	8006e58 <SX126xReadRegister>
}
 8005d3c:	bd10      	pop	{r4, pc}

08005d3e <RadioWrite>:
{
 8005d3e:	b510      	push	{r4, lr}
    SX126xWriteRegister( addr, data );
 8005d40:	b280      	uxth	r0, r0
 8005d42:	f001 f82d 	bl	8006da0 <SX126xWriteRegister>
}
 8005d46:	bd10      	pop	{r4, pc}

08005d48 <RadioSend>:
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8005d48:	2300      	movs	r3, #0
{
 8005d4a:	b570      	push	{r4, r5, r6, lr}
 8005d4c:	000c      	movs	r4, r1
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8005d4e:	4910      	ldr	r1, [pc, #64]	; (8005d90 <RadioSend+0x48>)
 8005d50:	001a      	movs	r2, r3
{
 8005d52:	0005      	movs	r5, r0
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8005d54:	0008      	movs	r0, r1
 8005d56:	f000 fe35 	bl	80069c4 <SX126xSetDioIrqParams>
    if( SX126xGetPacketType( ) == PACKET_TYPE_LORA )
 8005d5a:	f000 fd1d 	bl	8006798 <SX126xGetPacketType>
 8005d5e:	4b0d      	ldr	r3, [pc, #52]	; (8005d94 <RadioSend+0x4c>)
 8005d60:	2801      	cmp	r0, #1
 8005d62:	d112      	bne.n	8005d8a <RadioSend+0x42>
        SX126x.PacketParams.Params.LoRa.PayloadLength = size;
 8005d64:	73dc      	strb	r4, [r3, #15]
    SX126xSetPacketParams( &SX126x.PacketParams );
 8005d66:	0018      	movs	r0, r3
 8005d68:	f000 ffc4 	bl	8006cf4 <SX126xSetPacketParams>
    SX126xSendPayload( buffer, size, 0 );
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	0028      	movs	r0, r5
 8005d70:	0021      	movs	r1, r4
 8005d72:	f001 f965 	bl	8007040 <SX126xSendPayload>
    TimerSetValue( &TxTimeoutTimer, TxTimeout );
 8005d76:	4c08      	ldr	r4, [pc, #32]	; (8005d98 <RadioSend+0x50>)
 8005d78:	4b08      	ldr	r3, [pc, #32]	; (8005d9c <RadioSend+0x54>)
 8005d7a:	0020      	movs	r0, r4
 8005d7c:	6859      	ldr	r1, [r3, #4]
 8005d7e:	f001 fd5b 	bl	8007838 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8005d82:	0020      	movs	r0, r4
 8005d84:	f001 fd16 	bl	80077b4 <UTIL_TIMER_Start>
}
 8005d88:	bd70      	pop	{r4, r5, r6, pc}
        SX126x.PacketParams.Params.Gfsk.PayloadLength = size;
 8005d8a:	721c      	strb	r4, [r3, #8]
 8005d8c:	e7eb      	b.n	8005d66 <RadioSend+0x1e>
 8005d8e:	46c0      	nop			; (mov r8, r8)
 8005d90:	00000201 	.word	0x00000201
 8005d94:	20000710 	.word	0x20000710
 8005d98:	2000074c 	.word	0x2000074c
 8005d9c:	20000140 	.word	0x20000140

08005da0 <RadioSleep>:
{
 8005da0:	b510      	push	{r4, lr}
    SX126xSetSleep( params );
 8005da2:	2004      	movs	r0, #4
 8005da4:	f000 fd20 	bl	80067e8 <SX126xSetSleep>
    RADIO_DELAY_MS( 2 );
 8005da8:	2002      	movs	r0, #2
 8005daa:	f7fc fe49 	bl	8002a40 <HAL_Delay>
}
 8005dae:	bd10      	pop	{r4, pc}

08005db0 <RadioSetRxDutyCycle>:
{
 8005db0:	b510      	push	{r4, lr}
    SX126xSetRxDutyCycle( rxTime, sleepTime );
 8005db2:	f000 fd6b 	bl	800688c <SX126xSetRxDutyCycle>
}
 8005db6:	bd10      	pop	{r4, pc}

08005db8 <RadioStartCad>:
    SX126xSetDioIrqParams( IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8005db8:	20c0      	movs	r0, #192	; 0xc0
 8005dba:	2300      	movs	r3, #0
{
 8005dbc:	b510      	push	{r4, lr}
    SX126xSetDioIrqParams( IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8005dbe:	0040      	lsls	r0, r0, #1
 8005dc0:	001a      	movs	r2, r3
 8005dc2:	0001      	movs	r1, r0
 8005dc4:	f000 fdfe 	bl	80069c4 <SX126xSetDioIrqParams>
    SX126xSetCad( );
 8005dc8:	f000 fd76 	bl	80068b8 <SX126xSetCad>
}
 8005dcc:	bd10      	pop	{r4, pc}
	...

08005dd0 <RadioSetTxContinuousWave>:
{
 8005dd0:	b570      	push	{r4, r5, r6, lr}
 8005dd2:	000d      	movs	r5, r1
 8005dd4:	0014      	movs	r4, r2
    SX126xSetRfFrequency( freq );
 8005dd6:	f000 fe3f 	bl	8006a58 <SX126xSetRfFrequency>
    SX126xSetRfTxPower( power );
 8005dda:	0028      	movs	r0, r5
 8005ddc:	f001 f8e6 	bl	8006fac <SX126xSetRfTxPower>
    SX126xSetTxContinuousWave( );
 8005de0:	f000 fd76 	bl	80068d0 <SX126xSetTxContinuousWave>
    uint32_t timeout = ( uint32_t )time * 1000;
 8005de4:	21fa      	movs	r1, #250	; 0xfa
 8005de6:	0089      	lsls	r1, r1, #2
 8005de8:	4361      	muls	r1, r4
    TimerSetValue( &TxTimeoutTimer, timeout );
 8005dea:	4c04      	ldr	r4, [pc, #16]	; (8005dfc <RadioSetTxContinuousWave+0x2c>)
 8005dec:	0020      	movs	r0, r4
 8005dee:	f001 fd23 	bl	8007838 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8005df2:	0020      	movs	r0, r4
 8005df4:	f001 fcde 	bl	80077b4 <UTIL_TIMER_Start>
}
 8005df8:	bd70      	pop	{r4, r5, r6, pc}
 8005dfa:	46c0      	nop			; (mov r8, r8)
 8005dfc:	2000074c 	.word	0x2000074c

08005e00 <RadioRssi>:
{
 8005e00:	b510      	push	{r4, lr}
    return SX126xGetRssiInst( );
 8005e02:	f000 fee7 	bl	8006bd4 <SX126xGetRssiInst>
 8005e06:	b200      	sxth	r0, r0
}
 8005e08:	bd10      	pop	{r4, pc}

08005e0a <RadioWriteBuffer>:
{
 8005e0a:	b510      	push	{r4, lr}
    SX126xWriteRegisters( addr, buffer, size );
 8005e0c:	b280      	uxth	r0, r0
 8005e0e:	f000 ff23 	bl	8006c58 <SX126xWriteRegisters>
}
 8005e12:	bd10      	pop	{r4, pc}

08005e14 <RadioReadBuffer>:
{
 8005e14:	b510      	push	{r4, lr}
    SX126xReadRegisters( addr, buffer, size );
 8005e16:	b280      	uxth	r0, r0
 8005e18:	f000 fffa 	bl	8006e10 <SX126xReadRegisters>
}
 8005e1c:	bd10      	pop	{r4, pc}

08005e1e <RadioGetWakeupTime>:
{
 8005e1e:	b510      	push	{r4, lr}
    return (uint32_t) Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 8005e20:	f7fd fa4a 	bl	80032b8 <SX126x_RADIO_GetWakeUpTime>
 8005e24:	3003      	adds	r0, #3
}
 8005e26:	bd10      	pop	{r4, pc}

08005e28 <RadioInit>:
{
 8005e28:	b573      	push	{r0, r1, r4, r5, r6, lr}
    RadioEvents = events;
 8005e2a:	4d17      	ldr	r5, [pc, #92]	; (8005e88 <RadioInit+0x60>)
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8005e2c:	2601      	movs	r6, #1
    RadioEvents = events;
 8005e2e:	6028      	str	r0, [r5, #0]
    SX126xInit( RadioOnDioIrq );
 8005e30:	4816      	ldr	r0, [pc, #88]	; (8005e8c <RadioInit+0x64>)
 8005e32:	f000 fdef 	bl	8006a14 <SX126xInit>
    SX126xSetStandby( STDBY_RC );
 8005e36:	2000      	movs	r0, #0
 8005e38:	f000 fcee 	bl	8006818 <SX126xSetStandby>
    SX126xSetRegulatorMode( USE_DCDC );
 8005e3c:	2001      	movs	r0, #1
 8005e3e:	f000 fd5c 	bl	80068fa <SX126xSetRegulatorMode>
    SX126xSetBufferBaseAddress( 0x00, 0x00 );
 8005e42:	2100      	movs	r1, #0
 8005e44:	0008      	movs	r0, r1
 8005e46:	f000 fe85 	bl	8006b54 <SX126xSetBufferBaseAddress>
    SX126xSetTxParams( 0, RADIO_RAMP_200_US );
 8005e4a:	2104      	movs	r1, #4
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	f001 f865 	bl	8006f1c <SX126xSetTxParams>
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8005e52:	2300      	movs	r3, #0
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8005e54:	2400      	movs	r4, #0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8005e56:	480e      	ldr	r0, [pc, #56]	; (8005e90 <RadioInit+0x68>)
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8005e58:	4276      	negs	r6, r6
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8005e5a:	001a      	movs	r2, r3
 8005e5c:	0001      	movs	r1, r0
 8005e5e:	f000 fdb1 	bl	80069c4 <SX126xSetDioIrqParams>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8005e62:	0031      	movs	r1, r6
 8005e64:	0022      	movs	r2, r4
 8005e66:	4b0b      	ldr	r3, [pc, #44]	; (8005e94 <RadioInit+0x6c>)
 8005e68:	9400      	str	r4, [sp, #0]
 8005e6a:	480b      	ldr	r0, [pc, #44]	; (8005e98 <RadioInit+0x70>)
 8005e6c:	f001 fbee 	bl	800764c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8005e70:	0031      	movs	r1, r6
 8005e72:	0022      	movs	r2, r4
 8005e74:	4b09      	ldr	r3, [pc, #36]	; (8005e9c <RadioInit+0x74>)
 8005e76:	9400      	str	r4, [sp, #0]
 8005e78:	4809      	ldr	r0, [pc, #36]	; (8005ea0 <RadioInit+0x78>)
 8005e7a:	f001 fbe7 	bl	800764c <UTIL_TIMER_Create>
    IrqFired = false;
 8005e7e:	722c      	strb	r4, [r5, #8]
    return ( uint32_t )RadioGetWakeupTime( ) ;
 8005e80:	f7ff ffcd 	bl	8005e1e <RadioGetWakeupTime>
}
 8005e84:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8005e86:	46c0      	nop			; (mov r8, r8)
 8005e88:	20000140 	.word	0x20000140
 8005e8c:	08006289 	.word	0x08006289
 8005e90:	0000ffff 	.word	0x0000ffff
 8005e94:	08005cd5 	.word	0x08005cd5
 8005e98:	2000074c 	.word	0x2000074c
 8005e9c:	08005ced 	.word	0x08005ced
 8005ea0:	20000878 	.word	0x20000878

08005ea4 <RadioGetFskBandwidthRegValue>:
{
 8005ea4:	b510      	push	{r4, lr}
    if( bandwidth == 0 )
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d011      	beq.n	8005ece <RadioGetFskBandwidthRegValue+0x2a>
 8005eaa:	4a0a      	ldr	r2, [pc, #40]	; (8005ed4 <RadioGetFskBandwidthRegValue+0x30>)
 8005eac:	2301      	movs	r3, #1
 8005eae:	0011      	movs	r1, r2
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8005eb0:	6814      	ldr	r4, [r2, #0]
 8005eb2:	42a0      	cmp	r0, r4
 8005eb4:	d306      	bcc.n	8005ec4 <RadioGetFskBandwidthRegValue+0x20>
 8005eb6:	6894      	ldr	r4, [r2, #8]
 8005eb8:	42a0      	cmp	r0, r4
 8005eba:	d203      	bcs.n	8005ec4 <RadioGetFskBandwidthRegValue+0x20>
            return FskBandwidths[i+1].RegValue;
 8005ebc:	00db      	lsls	r3, r3, #3
 8005ebe:	18cb      	adds	r3, r1, r3
 8005ec0:	7918      	ldrb	r0, [r3, #4]
}
 8005ec2:	bd10      	pop	{r4, pc}
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	3208      	adds	r2, #8
 8005ec8:	2b16      	cmp	r3, #22
 8005eca:	d1f1      	bne.n	8005eb0 <RadioGetFskBandwidthRegValue+0xc>
    while( 1 );
 8005ecc:	e7fe      	b.n	8005ecc <RadioGetFskBandwidthRegValue+0x28>
        return( 0x1F );
 8005ece:	201f      	movs	r0, #31
 8005ed0:	e7f7      	b.n	8005ec2 <RadioGetFskBandwidthRegValue+0x1e>
 8005ed2:	46c0      	nop			; (mov r8, r8)
 8005ed4:	08008c78 	.word	0x08008c78

08005ed8 <RadioTimeOnAir>:
{
 8005ed8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005eda:	0014      	movs	r4, r2
 8005edc:	aa08      	add	r2, sp, #32
 8005ede:	8816      	ldrh	r6, [r2, #0]
 8005ee0:	aa09      	add	r2, sp, #36	; 0x24
 8005ee2:	7817      	ldrb	r7, [r2, #0]
 8005ee4:	aa0a      	add	r2, sp, #40	; 0x28
 8005ee6:	7812      	ldrb	r2, [r2, #0]
 8005ee8:	000d      	movs	r5, r1
 8005eea:	a90b      	add	r1, sp, #44	; 0x2c
 8005eec:	4694      	mov	ip, r2
 8005eee:	7809      	ldrb	r1, [r1, #0]
    switch( modem )
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	d009      	beq.n	8005f08 <RadioTimeOnAir+0x30>
 8005ef4:	2801      	cmp	r0, #1
 8005ef6:	d017      	beq.n	8005f28 <RadioTimeOnAir+0x50>
 8005ef8:	2401      	movs	r4, #1
 8005efa:	2000      	movs	r0, #0
    return ( numerator + denominator - 1 ) / denominator;
 8005efc:	1900      	adds	r0, r0, r4
 8005efe:	0021      	movs	r1, r4
 8005f00:	3801      	subs	r0, #1
 8005f02:	f7fa f931 	bl	8000168 <__udivsi3>
}
 8005f06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
               ( ( crcOn == true ) ? 2 : 0 ) 
 8005f08:	1e4b      	subs	r3, r1, #1
 8005f0a:	4199      	sbcs	r1, r3
           ( ( fixLen == false ) ? 8 : 0 ) +
 8005f0c:	4278      	negs	r0, r7
 8005f0e:	4178      	adcs	r0, r7
               ( ( crcOn == true ) ? 2 : 0 ) 
 8005f10:	0049      	lsls	r1, r1, #1
               ( addrComp == RADIO_ADDRESSCOMP_FILT_OFF ? 0 : 1 ) +
 8005f12:	000a      	movs	r2, r1
           ( ( fixLen == false ) ? 8 : 0 ) +
 8005f14:	1986      	adds	r6, r0, r6
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8005f16:	20fa      	movs	r0, #250	; 0xfa
    return ( preambleLen << 3 ) +
 8005f18:	00f6      	lsls	r6, r6, #3
               ( addrComp == RADIO_ADDRESSCOMP_FILT_OFF ? 0 : 1 ) +
 8005f1a:	4462      	add	r2, ip
           ( ( fixLen == false ) ? 8 : 0 ) +
 8005f1c:	3618      	adds	r6, #24
               ) << 3 
 8005f1e:	00d2      	lsls	r2, r2, #3
             ( syncWordLength << 3 ) +
 8005f20:	1992      	adds	r2, r2, r6
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8005f22:	0080      	lsls	r0, r0, #2
 8005f24:	4350      	muls	r0, r2
        break;
 8005f26:	e7e9      	b.n	8005efc <RadioTimeOnAir+0x24>
    int32_t crDenom           = coderate + 4;
 8005f28:	3304      	adds	r3, #4
 8005f2a:	9301      	str	r3, [sp, #4]
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8005f2c:	1f63      	subs	r3, r4, #5
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d804      	bhi.n	8005f3c <RadioTimeOnAir+0x64>
        if( preambleLen < 12 )
 8005f32:	1c33      	adds	r3, r6, #0
 8005f34:	2e0c      	cmp	r6, #12
 8005f36:	d200      	bcs.n	8005f3a <RadioTimeOnAir+0x62>
 8005f38:	230c      	movs	r3, #12
 8005f3a:	b29e      	uxth	r6, r3
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005f3c:	2d00      	cmp	r5, #0
 8005f3e:	d139      	bne.n	8005fb4 <RadioTimeOnAir+0xdc>
 8005f40:	0023      	movs	r3, r4
 8005f42:	2001      	movs	r0, #1
 8005f44:	002a      	movs	r2, r5
 8005f46:	3b0b      	subs	r3, #11
 8005f48:	4298      	cmp	r0, r3
 8005f4a:	416a      	adcs	r2, r5
 8005f4c:	0013      	movs	r3, r2
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005f4e:	b2db      	uxtb	r3, r3
                            ( crcOn ? 16 : 0 ) -
 8005f50:	1e48      	subs	r0, r1, #1
 8005f52:	4181      	sbcs	r1, r0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005f54:	4662      	mov	r2, ip
                            ( crcOn ? 16 : 0 ) -
 8005f56:	0108      	lsls	r0, r1, #4
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005f58:	00d2      	lsls	r2, r2, #3
 8005f5a:	1810      	adds	r0, r2, r0
                            ( fixLen ? 0 : 20 );
 8005f5c:	2200      	movs	r2, #0
                            ( 4 * datarate ) +
 8005f5e:	00a1      	lsls	r1, r4, #2
                            ( crcOn ? 16 : 0 ) -
 8005f60:	1a40      	subs	r0, r0, r1
                            ( fixLen ? 0 : 20 );
 8005f62:	4297      	cmp	r7, r2
 8005f64:	d100      	bne.n	8005f68 <RadioTimeOnAir+0x90>
 8005f66:	3214      	adds	r2, #20
                            ( 4 * datarate ) +
 8005f68:	1880      	adds	r0, r0, r2
    if( datarate <= 6 )
 8005f6a:	1ea7      	subs	r7, r4, #2
 8005f6c:	2c06      	cmp	r4, #6
 8005f6e:	d903      	bls.n	8005f78 <RadioTimeOnAir+0xa0>
        ceilNumerator += 8;
 8005f70:	3008      	adds	r0, #8
        if( lowDatareOptimize == true )
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d000      	beq.n	8005f78 <RadioTimeOnAir+0xa0>
            ceilDenominator = 4 * ( datarate - 2 );
 8005f76:	00b9      	lsls	r1, r7, #2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8005f78:	43c3      	mvns	r3, r0
 8005f7a:	17db      	asrs	r3, r3, #31
 8005f7c:	4018      	ands	r0, r3
 8005f7e:	1840      	adds	r0, r0, r1
 8005f80:	3801      	subs	r0, #1
 8005f82:	f7fa f97b 	bl	800027c <__divsi3>
 8005f86:	9b01      	ldr	r3, [sp, #4]
 8005f88:	4343      	muls	r3, r0
 8005f8a:	199e      	adds	r6, r3, r6
        intermediate += 2;
 8005f8c:	0032      	movs	r2, r6
 8005f8e:	320e      	adds	r2, #14
    if( datarate <= 6 )
 8005f90:	2c06      	cmp	r4, #6
 8005f92:	d900      	bls.n	8005f96 <RadioTimeOnAir+0xbe>
    int32_t intermediate =
 8005f94:	3a02      	subs	r2, #2
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8005f96:	4b0c      	ldr	r3, [pc, #48]	; (8005fc8 <RadioTimeOnAir+0xf0>)
 8005f98:	195d      	adds	r5, r3, r5
 8005f9a:	7929      	ldrb	r1, [r5, #4]
    switch( bw )
 8005f9c:	290a      	cmp	r1, #10
 8005f9e:	d811      	bhi.n	8005fc4 <RadioTimeOnAir+0xec>
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8005fa0:	0092      	lsls	r2, r2, #2
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8005fa2:	20fa      	movs	r0, #250	; 0xfa
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8005fa4:	3201      	adds	r2, #1
 8005fa6:	40ba      	lsls	r2, r7
 8005fa8:	0089      	lsls	r1, r1, #2
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8005faa:	0080      	lsls	r0, r0, #2
 8005fac:	185b      	adds	r3, r3, r1
 8005fae:	4350      	muls	r0, r2
 8005fb0:	689c      	ldr	r4, [r3, #8]
 8005fb2:	e7a3      	b.n	8005efc <RadioTimeOnAir+0x24>
    bool    lowDatareOptimize = false;
 8005fb4:	2300      	movs	r3, #0
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005fb6:	2d01      	cmp	r5, #1
 8005fb8:	d1ca      	bne.n	8005f50 <RadioTimeOnAir+0x78>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005fba:	0023      	movs	r3, r4
 8005fbc:	3b0c      	subs	r3, #12
 8005fbe:	4258      	negs	r0, r3
 8005fc0:	4143      	adcs	r3, r0
 8005fc2:	e7c4      	b.n	8005f4e <RadioTimeOnAir+0x76>
    return ( numerator + denominator - 1 ) / denominator;
 8005fc4:	deff      	udf	#255	; 0xff
 8005fc6:	46c0      	nop			; (mov r8, r8)
 8005fc8:	08008c3c 	.word	0x08008c3c

08005fcc <RadioSetMaxPayloadLength>:
{
 8005fcc:	0003      	movs	r3, r0
 8005fce:	b510      	push	{r4, lr}
 8005fd0:	4807      	ldr	r0, [pc, #28]	; (8005ff0 <RadioSetMaxPayloadLength+0x24>)
    if( modem == MODEM_LORA )
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d105      	bne.n	8005fe2 <RadioSetMaxPayloadLength+0x16>
        SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8005fd6:	4b07      	ldr	r3, [pc, #28]	; (8005ff4 <RadioSetMaxPayloadLength+0x28>)
 8005fd8:	73c1      	strb	r1, [r0, #15]
 8005fda:	7019      	strb	r1, [r3, #0]
            SX126xSetPacketParams( &SX126x.PacketParams );
 8005fdc:	f000 fe8a 	bl	8006cf4 <SX126xSetPacketParams>
}
 8005fe0:	bd10      	pop	{r4, pc}
        if( SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8005fe2:	79c3      	ldrb	r3, [r0, #7]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d1fb      	bne.n	8005fe0 <RadioSetMaxPayloadLength+0x14>
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8005fe8:	4b02      	ldr	r3, [pc, #8]	; (8005ff4 <RadioSetMaxPayloadLength+0x28>)
 8005fea:	7201      	strb	r1, [r0, #8]
 8005fec:	7019      	strb	r1, [r3, #0]
 8005fee:	e7f5      	b.n	8005fdc <RadioSetMaxPayloadLength+0x10>
 8005ff0:	20000710 	.word	0x20000710
 8005ff4:	20000024 	.word	0x20000024

08005ff8 <RadioRx>:
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	490e      	ldr	r1, [pc, #56]	; (8006034 <RadioRx+0x3c>)
{
 8005ffc:	b570      	push	{r4, r5, r6, lr}
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8005ffe:	001a      	movs	r2, r3
{
 8006000:	0004      	movs	r4, r0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8006002:	0008      	movs	r0, r1
 8006004:	f000 fcde 	bl	80069c4 <SX126xSetDioIrqParams>
    if( timeout != 0 )
 8006008:	2c00      	cmp	r4, #0
 800600a:	d007      	beq.n	800601c <RadioRx+0x24>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800600c:	4d0a      	ldr	r5, [pc, #40]	; (8006038 <RadioRx+0x40>)
 800600e:	0021      	movs	r1, r4
 8006010:	0028      	movs	r0, r5
 8006012:	f001 fc11 	bl	8007838 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8006016:	0028      	movs	r0, r5
 8006018:	f001 fbcc 	bl	80077b4 <UTIL_TIMER_Start>
    if( RxContinuous == true )
 800601c:	4b07      	ldr	r3, [pc, #28]	; (800603c <RadioRx+0x44>)
 800601e:	7a5a      	ldrb	r2, [r3, #9]
 8006020:	2a00      	cmp	r2, #0
 8006022:	d003      	beq.n	800602c <RadioRx+0x34>
        SX126xSetRx( 0xFFFFFF ); // Rx Continuous
 8006024:	4806      	ldr	r0, [pc, #24]	; (8006040 <RadioRx+0x48>)
        SX126xSetRx( RxTimeout << 6 );
 8006026:	f000 fc1d 	bl	8006864 <SX126xSetRx>
}
 800602a:	bd70      	pop	{r4, r5, r6, pc}
        SX126xSetRx( RxTimeout << 6 );
 800602c:	68d8      	ldr	r0, [r3, #12]
 800602e:	0180      	lsls	r0, r0, #6
 8006030:	e7f9      	b.n	8006026 <RadioRx+0x2e>
 8006032:	46c0      	nop			; (mov r8, r8)
 8006034:	0000ffff 	.word	0x0000ffff
 8006038:	20000878 	.word	0x20000878
 800603c:	20000140 	.word	0x20000140
 8006040:	00ffffff 	.word	0x00ffffff

08006044 <RadioRxBoosted>:
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8006044:	2300      	movs	r3, #0
 8006046:	490e      	ldr	r1, [pc, #56]	; (8006080 <RadioRxBoosted+0x3c>)
{
 8006048:	b570      	push	{r4, r5, r6, lr}
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800604a:	001a      	movs	r2, r3
{
 800604c:	0004      	movs	r4, r0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800604e:	0008      	movs	r0, r1
 8006050:	f000 fcb8 	bl	80069c4 <SX126xSetDioIrqParams>
    if( timeout != 0 )
 8006054:	2c00      	cmp	r4, #0
 8006056:	d007      	beq.n	8006068 <RadioRxBoosted+0x24>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8006058:	4d0a      	ldr	r5, [pc, #40]	; (8006084 <RadioRxBoosted+0x40>)
 800605a:	0021      	movs	r1, r4
 800605c:	0028      	movs	r0, r5
 800605e:	f001 fbeb 	bl	8007838 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8006062:	0028      	movs	r0, r5
 8006064:	f001 fba6 	bl	80077b4 <UTIL_TIMER_Start>
    if( RxContinuous == true )
 8006068:	4b07      	ldr	r3, [pc, #28]	; (8006088 <RadioRxBoosted+0x44>)
 800606a:	7a5a      	ldrb	r2, [r3, #9]
 800606c:	2a00      	cmp	r2, #0
 800606e:	d003      	beq.n	8006078 <RadioRxBoosted+0x34>
        SX126xSetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8006070:	4806      	ldr	r0, [pc, #24]	; (800608c <RadioRxBoosted+0x48>)
        SX126xSetRxBoosted( RxTimeout << 6 );
 8006072:	f000 fe9f 	bl	8006db4 <SX126xSetRxBoosted>
}
 8006076:	bd70      	pop	{r4, r5, r6, pc}
        SX126xSetRxBoosted( RxTimeout << 6 );
 8006078:	68d8      	ldr	r0, [r3, #12]
 800607a:	0180      	lsls	r0, r0, #6
 800607c:	e7f9      	b.n	8006072 <RadioRxBoosted+0x2e>
 800607e:	46c0      	nop			; (mov r8, r8)
 8006080:	0000ffff 	.word	0x0000ffff
 8006084:	20000878 	.word	0x20000878
 8006088:	20000140 	.word	0x20000140
 800608c:	00ffffff 	.word	0x00ffffff

08006090 <RadioIrqProcess>:

  RadioIrqProcess();
}

void RadioIrqProcess( void )
{
 8006090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( IrqFired == true )
 8006092:	4c71      	ldr	r4, [pc, #452]	; (8006258 <RadioIrqProcess+0x1c8>)
 8006094:	7a23      	ldrb	r3, [r4, #8]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d100      	bne.n	800609c <RadioIrqProcess+0xc>
 800609a:	e090      	b.n	80061be <RadioIrqProcess+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800609c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80060a0:	b672      	cpsid	i
    {
        CRITICAL_SECTION_BEGIN( );
        // Clear IRQ flag
        IrqFired = false;
 80060a2:	2600      	movs	r6, #0
 80060a4:	7226      	strb	r6, [r4, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060a6:	f383 8810 	msr	PRIMASK, r3
        CRITICAL_SECTION_END( );

        uint16_t irqRegs = SX126xGetIrqStatus( );
 80060aa:	f000 fd86 	bl	8006bba <SX126xGetIrqStatus>
        SX126xClearIrqStatus( IRQ_RADIO_ALL );

        if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 80060ae:	2701      	movs	r7, #1
        uint16_t irqRegs = SX126xGetIrqStatus( );
 80060b0:	0005      	movs	r5, r0
        SX126xClearIrqStatus( IRQ_RADIO_ALL );
 80060b2:	486a      	ldr	r0, [pc, #424]	; (800625c <RadioIrqProcess+0x1cc>)
 80060b4:	f000 fd58 	bl	8006b68 <SX126xClearIrqStatus>
        if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 80060b8:	423d      	tst	r5, r7
 80060ba:	d00f      	beq.n	80060dc <RadioIrqProcess+0x4c>
        {
            TimerStop( &TxTimeoutTimer );
 80060bc:	4868      	ldr	r0, [pc, #416]	; (8006260 <RadioIrqProcess+0x1d0>)
 80060be:	f001 fb25 	bl	800770c <UTIL_TIMER_Stop>
            //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
            SX126xSetOperatingMode( MODE_STDBY_RC );
 80060c2:	0038      	movs	r0, r7
 80060c4:	f000 fb54 	bl	8006770 <SX126xSetOperatingMode>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	42b3      	cmp	r3, r6
 80060cc:	d006      	beq.n	80060dc <RadioIrqProcess+0x4c>
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	42b3      	cmp	r3, r6
 80060d2:	d003      	beq.n	80060dc <RadioIrqProcess+0x4c>
            {
                RadioEvents->TxDone( );
 80060d4:	4798      	blx	r3
                Sx_Board_SetLedTx(false);
 80060d6:	0030      	movs	r0, r6
 80060d8:	f7fd f957 	bl	800338a <SX126x_RADIO_BoardSetLedTx>
            }
        }

        if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 80060dc:	2602      	movs	r6, #2
 80060de:	4235      	tst	r5, r6
 80060e0:	d012      	beq.n	8006108 <RadioIrqProcess+0x78>
        {
            if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 80060e2:	066b      	lsls	r3, r5, #25
 80060e4:	d400      	bmi.n	80060e8 <RadioIrqProcess+0x58>
 80060e6:	e06b      	b.n	80061c0 <RadioIrqProcess+0x130>
            {
                if( RxContinuous == false )
 80060e8:	7a63      	ldrb	r3, [r4, #9]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d102      	bne.n	80060f4 <RadioIrqProcess+0x64>
                {
                    //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                    SX126xSetOperatingMode( MODE_STDBY_RC );
 80060ee:	2001      	movs	r0, #1
 80060f0:	f000 fb3e 	bl	8006770 <SX126xSetOperatingMode>
                }
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80060f4:	6823      	ldr	r3, [r4, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d006      	beq.n	8006108 <RadioIrqProcess+0x78>
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d003      	beq.n	8006108 <RadioIrqProcess+0x78>
                {
                    RadioEvents->RxError( );
 8006100:	4798      	blx	r3
                SX126xGetPayload( RadioRxPayload, &size , 255 );
                SX126xGetPacketStatus( &RadioPktStatus );
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
                {
                    RadioEvents->RxDone( RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt );
                    Sx_Board_SetLedRx(false);
 8006102:	2000      	movs	r0, #0
 8006104:	f7fd f942 	bl	800338c <SX126x_RADIO_BoardSetLedRx>
                }
            }
        }

        if( ( irqRegs & IRQ_CAD_DONE ) == IRQ_CAD_DONE )
 8006108:	062b      	lsls	r3, r5, #24
 800610a:	d50e      	bpl.n	800612a <RadioIrqProcess+0x9a>
        {
            //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
            SX126xSetOperatingMode( MODE_STDBY_RC );
 800610c:	2001      	movs	r0, #1
 800610e:	f000 fb2f 	bl	8006770 <SX126xSetOperatingMode>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8006112:	6823      	ldr	r3, [r4, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d008      	beq.n	800612a <RadioIrqProcess+0x9a>
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d005      	beq.n	800612a <RadioIrqProcess+0x9a>
            {
                RadioEvents->CadDone( ( ( irqRegs & IRQ_CAD_ACTIVITY_DETECTED ) == IRQ_CAD_ACTIVITY_DETECTED ) );
 800611e:	05e8      	lsls	r0, r5, #23
 8006120:	0fc0      	lsrs	r0, r0, #31
 8006122:	4798      	blx	r3
                Sx_Board_SetLedRx(false);
 8006124:	2000      	movs	r0, #0
 8006126:	f7fd f931 	bl	800338c <SX126x_RADIO_BoardSetLedRx>
            }
        }

        if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 800612a:	05ab      	lsls	r3, r5, #22
 800612c:	d514      	bpl.n	8006158 <RadioIrqProcess+0xc8>
        {
            if( SX126xGetOperatingMode( ) == MODE_TX )
 800612e:	f000 fb19 	bl	8006764 <SX126xGetOperatingMode>
 8006132:	2804      	cmp	r0, #4
 8006134:	d000      	beq.n	8006138 <RadioIrqProcess+0xa8>
 8006136:	e076      	b.n	8006226 <RadioIrqProcess+0x196>
            {
                TimerStop( &TxTimeoutTimer );
 8006138:	4849      	ldr	r0, [pc, #292]	; (8006260 <RadioIrqProcess+0x1d0>)
 800613a:	f001 fae7 	bl	800770c <UTIL_TIMER_Stop>
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                SX126xSetOperatingMode( MODE_STDBY_RC );
 800613e:	2001      	movs	r0, #1
 8006140:	f000 fb16 	bl	8006770 <SX126xSetOperatingMode>
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8006144:	6823      	ldr	r3, [r4, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d006      	beq.n	8006158 <RadioIrqProcess+0xc8>
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <RadioIrqProcess+0xc8>
                {
                    RadioEvents->TxTimeout( );
 8006150:	4798      	blx	r3
                    Sx_Board_SetLedTx(false);
 8006152:	2000      	movs	r0, #0
 8006154:	f7fd f919 	bl	800338a <SX126x_RADIO_BoardSetLedTx>
                    Sx_Board_SetLedRx(false);
                }
            }
        }

        if( ( irqRegs & IRQ_PREAMBLE_DETECTED ) == IRQ_PREAMBLE_DETECTED )
 8006158:	076b      	lsls	r3, r5, #29
 800615a:	d505      	bpl.n	8006168 <RadioIrqProcess+0xd8>
        {
            MW_LOG(TS_OFF, VLEVEL_H, "PHY PRE OK\n\r" );
 800615c:	2200      	movs	r2, #0
 800615e:	2003      	movs	r0, #3
 8006160:	0011      	movs	r1, r2
 8006162:	4b40      	ldr	r3, [pc, #256]	; (8006264 <RadioIrqProcess+0x1d4>)
 8006164:	f001 f870 	bl	8007248 <UTIL_ADV_TRACE_COND_FSend>
        }

        if( ( irqRegs & IRQ_SYNCWORD_VALID ) == IRQ_SYNCWORD_VALID )
 8006168:	072b      	lsls	r3, r5, #28
 800616a:	d505      	bpl.n	8006178 <RadioIrqProcess+0xe8>
        {
            MW_LOG(TS_OFF, VLEVEL_H, "PHY SYNC OK\n\r" );
 800616c:	2200      	movs	r2, #0
 800616e:	2003      	movs	r0, #3
 8006170:	0011      	movs	r1, r2
 8006172:	4b3d      	ldr	r3, [pc, #244]	; (8006268 <RadioIrqProcess+0x1d8>)
 8006174:	f001 f868 	bl	8007248 <UTIL_ADV_TRACE_COND_FSend>
        }

        if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
 8006178:	06eb      	lsls	r3, r5, #27
 800617a:	d505      	bpl.n	8006188 <RadioIrqProcess+0xf8>
        {
            MW_LOG(TS_OFF, VLEVEL_H, "PHY HDR OK\n\r" );
 800617c:	2200      	movs	r2, #0
 800617e:	2003      	movs	r0, #3
 8006180:	0011      	movs	r1, r2
 8006182:	4b3a      	ldr	r3, [pc, #232]	; (800626c <RadioIrqProcess+0x1dc>)
 8006184:	f001 f860 	bl	8007248 <UTIL_ADV_TRACE_COND_FSend>
        }

        if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
 8006188:	06ab      	lsls	r3, r5, #26
 800618a:	d518      	bpl.n	80061be <RadioIrqProcess+0x12e>
        {
            TimerStop( &RxTimeoutTimer );
 800618c:	4838      	ldr	r0, [pc, #224]	; (8006270 <RadioIrqProcess+0x1e0>)
 800618e:	f001 fabd 	bl	800770c <UTIL_TIMER_Stop>
            if( RxContinuous == false )
 8006192:	7a63      	ldrb	r3, [r4, #9]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d102      	bne.n	800619e <RadioIrqProcess+0x10e>
            {
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                SX126xSetOperatingMode( MODE_STDBY_RC );
 8006198:	2001      	movs	r0, #1
 800619a:	f000 fae9 	bl	8006770 <SX126xSetOperatingMode>
            }
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00c      	beq.n	80061be <RadioIrqProcess+0x12e>
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d009      	beq.n	80061be <RadioIrqProcess+0x12e>
            {
                RadioEvents->RxTimeout( );
 80061aa:	4798      	blx	r3
                MW_LOG(TS_OFF, VLEVEL_H, "PHY HDR KO\n\r" );
 80061ac:	2200      	movs	r2, #0
 80061ae:	2003      	movs	r0, #3
 80061b0:	0011      	movs	r1, r2
 80061b2:	4b30      	ldr	r3, [pc, #192]	; (8006274 <RadioIrqProcess+0x1e4>)
 80061b4:	f001 f848 	bl	8007248 <UTIL_ADV_TRACE_COND_FSend>
                Sx_Board_SetLedRx(false);
 80061b8:	2000      	movs	r0, #0
 80061ba:	f7fd f8e7 	bl	800338c <SX126x_RADIO_BoardSetLedRx>
            }
        }
    }
}
 80061be:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
                TimerStop( &RxTimeoutTimer );
 80061c0:	482b      	ldr	r0, [pc, #172]	; (8006270 <RadioIrqProcess+0x1e0>)
 80061c2:	f001 faa3 	bl	800770c <UTIL_TIMER_Stop>
                if( RxContinuous == false )
 80061c6:	7a67      	ldrb	r7, [r4, #9]
 80061c8:	2f00      	cmp	r7, #0
 80061ca:	d10e      	bne.n	80061ea <RadioIrqProcess+0x15a>
                    SX126xSetOperatingMode( MODE_STDBY_RC );
 80061cc:	2001      	movs	r0, #1
 80061ce:	f000 facf 	bl	8006770 <SX126xSetOperatingMode>
                    SX126xWriteRegister( 0x0902, 0x00 );
 80061d2:	0039      	movs	r1, r7
 80061d4:	4828      	ldr	r0, [pc, #160]	; (8006278 <RadioIrqProcess+0x1e8>)
 80061d6:	f000 fde3 	bl	8006da0 <SX126xWriteRegister>
                    SX126xWriteRegister( 0x0944, SX126xReadRegister( 0x0944 ) | ( 1 << 1 ) );
 80061da:	4828      	ldr	r0, [pc, #160]	; (800627c <RadioIrqProcess+0x1ec>)
 80061dc:	f000 fe3c 	bl	8006e58 <SX126xReadRegister>
 80061e0:	4306      	orrs	r6, r0
 80061e2:	b2f1      	uxtb	r1, r6
 80061e4:	4825      	ldr	r0, [pc, #148]	; (800627c <RadioIrqProcess+0x1ec>)
 80061e6:	f000 fddb 	bl	8006da0 <SX126xWriteRegister>
                SX126xGetPayload( RadioRxPayload, &size , 255 );
 80061ea:	466b      	mov	r3, sp
 80061ec:	4f24      	ldr	r7, [pc, #144]	; (8006280 <RadioIrqProcess+0x1f0>)
 80061ee:	1dd9      	adds	r1, r3, #7
 80061f0:	22ff      	movs	r2, #255	; 0xff
 80061f2:	0038      	movs	r0, r7
 80061f4:	f000 ff4d 	bl	8007092 <SX126xGetPayload>
                SX126xGetPacketStatus( &RadioPktStatus );
 80061f8:	4e22      	ldr	r6, [pc, #136]	; (8006284 <RadioIrqProcess+0x1f4>)
 80061fa:	0030      	movs	r0, r6
 80061fc:	f000 fcf6 	bl	8006bec <SX126xGetPacketStatus>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d100      	bne.n	8006208 <RadioIrqProcess+0x178>
 8006206:	e77f      	b.n	8006108 <RadioIrqProcess+0x78>
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	469c      	mov	ip, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	d100      	bne.n	8006212 <RadioIrqProcess+0x182>
 8006210:	e77a      	b.n	8006108 <RadioIrqProcess+0x78>
                    RadioEvents->RxDone( RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt );
 8006212:	4669      	mov	r1, sp
 8006214:	230d      	movs	r3, #13
 8006216:	220c      	movs	r2, #12
 8006218:	56f3      	ldrsb	r3, [r6, r3]
 800621a:	56b2      	ldrsb	r2, [r6, r2]
 800621c:	0038      	movs	r0, r7
 800621e:	4666      	mov	r6, ip
 8006220:	79c9      	ldrb	r1, [r1, #7]
 8006222:	47b0      	blx	r6
 8006224:	e76d      	b.n	8006102 <RadioIrqProcess+0x72>
            else if( SX126xGetOperatingMode( ) == MODE_RX )
 8006226:	f000 fa9d 	bl	8006764 <SX126xGetOperatingMode>
 800622a:	2805      	cmp	r0, #5
 800622c:	d000      	beq.n	8006230 <RadioIrqProcess+0x1a0>
 800622e:	e793      	b.n	8006158 <RadioIrqProcess+0xc8>
                TimerStop( &RxTimeoutTimer );
 8006230:	480f      	ldr	r0, [pc, #60]	; (8006270 <RadioIrqProcess+0x1e0>)
 8006232:	f001 fa6b 	bl	800770c <UTIL_TIMER_Stop>
                SX126xSetOperatingMode( MODE_STDBY_RC );
 8006236:	2001      	movs	r0, #1
 8006238:	f000 fa9a 	bl	8006770 <SX126xSetOperatingMode>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d100      	bne.n	8006244 <RadioIrqProcess+0x1b4>
 8006242:	e789      	b.n	8006158 <RadioIrqProcess+0xc8>
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d100      	bne.n	800624c <RadioIrqProcess+0x1bc>
 800624a:	e785      	b.n	8006158 <RadioIrqProcess+0xc8>
                    RadioEvents->RxTimeout( );
 800624c:	4798      	blx	r3
                    Sx_Board_SetLedRx(false);
 800624e:	2000      	movs	r0, #0
 8006250:	f7fd f89c 	bl	800338c <SX126x_RADIO_BoardSetLedRx>
 8006254:	e780      	b.n	8006158 <RadioIrqProcess+0xc8>
 8006256:	46c0      	nop			; (mov r8, r8)
 8006258:	20000140 	.word	0x20000140
 800625c:	0000ffff 	.word	0x0000ffff
 8006260:	2000074c 	.word	0x2000074c
 8006264:	08008f39 	.word	0x08008f39
 8006268:	08008f46 	.word	0x08008f46
 800626c:	08008f54 	.word	0x08008f54
 8006270:	20000878 	.word	0x20000878
 8006274:	08008f61 	.word	0x08008f61
 8006278:	00000902 	.word	0x00000902
 800627c:	00000944 	.word	0x00000944
 8006280:	20000764 	.word	0x20000764
 8006284:	20000864 	.word	0x20000864

08006288 <RadioOnDioIrq>:
  IrqFired = true;
 8006288:	2201      	movs	r2, #1
{
 800628a:	b510      	push	{r4, lr}
  IrqFired = true;
 800628c:	4b02      	ldr	r3, [pc, #8]	; (8006298 <RadioOnDioIrq+0x10>)
 800628e:	721a      	strb	r2, [r3, #8]
  RadioIrqProcess();
 8006290:	f7ff fefe 	bl	8006090 <RadioIrqProcess>
}
 8006294:	bd10      	pop	{r4, pc}
 8006296:	46c0      	nop			; (mov r8, r8)
 8006298:	20000140 	.word	0x20000140

0800629c <RadioSetPublicNetwork>:
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 800629c:	4b0c      	ldr	r3, [pc, #48]	; (80062d0 <RadioSetPublicNetwork+0x34>)
{
 800629e:	b510      	push	{r4, lr}
 80062a0:	0004      	movs	r4, r0
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 80062a2:	7418      	strb	r0, [r3, #16]
 80062a4:	7458      	strb	r0, [r3, #17]
    switch( modem )
 80062a6:	f000 f817 	bl	80062d8 <RadioSetModem.part.0>
    if( enable == true )
 80062aa:	2c00      	cmp	r4, #0
 80062ac:	d009      	beq.n	80062c2 <RadioSetPublicNetwork+0x26>
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80062ae:	20e8      	movs	r0, #232	; 0xe8
 80062b0:	2134      	movs	r1, #52	; 0x34
 80062b2:	00c0      	lsls	r0, r0, #3
 80062b4:	f000 fd74 	bl	8006da0 <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80062b8:	2144      	movs	r1, #68	; 0x44
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80062ba:	4806      	ldr	r0, [pc, #24]	; (80062d4 <RadioSetPublicNetwork+0x38>)
 80062bc:	f000 fd70 	bl	8006da0 <SX126xWriteRegister>
}
 80062c0:	bd10      	pop	{r4, pc}
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80062c2:	20e8      	movs	r0, #232	; 0xe8
 80062c4:	2114      	movs	r1, #20
 80062c6:	00c0      	lsls	r0, r0, #3
 80062c8:	f000 fd6a 	bl	8006da0 <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80062cc:	2124      	movs	r1, #36	; 0x24
 80062ce:	e7f4      	b.n	80062ba <RadioSetPublicNetwork+0x1e>
 80062d0:	20000140 	.word	0x20000140
 80062d4:	00000741 	.word	0x00000741

080062d8 <RadioSetModem.part.0>:
        SX126xSetPacketType( PACKET_TYPE_LORA );
 80062d8:	2001      	movs	r0, #1
void RadioSetModem( RadioModems_t modem )
 80062da:	b510      	push	{r4, lr}
        SX126xSetPacketType( PACKET_TYPE_LORA );
 80062dc:	f000 fbdc 	bl	8006a98 <SX126xSetPacketType>
        if( RadioPublicNetwork.Current != RadioPublicNetwork.Previous )
 80062e0:	4b04      	ldr	r3, [pc, #16]	; (80062f4 <RadioSetModem.part.0+0x1c>)
 80062e2:	7c18      	ldrb	r0, [r3, #16]
 80062e4:	7c5a      	ldrb	r2, [r3, #17]
 80062e6:	4282      	cmp	r2, r0
 80062e8:	d002      	beq.n	80062f0 <RadioSetModem.part.0+0x18>
            RadioPublicNetwork.Current = RadioPublicNetwork.Previous;
 80062ea:	7458      	strb	r0, [r3, #17]
            RadioSetPublicNetwork( RadioPublicNetwork.Current );
 80062ec:	f7ff ffd6 	bl	800629c <RadioSetPublicNetwork>
}
 80062f0:	bd10      	pop	{r4, pc}
 80062f2:	46c0      	nop			; (mov r8, r8)
 80062f4:	20000140 	.word	0x20000140

080062f8 <RadioSetModem>:
{
 80062f8:	b510      	push	{r4, lr}
    switch( modem )
 80062fa:	2801      	cmp	r0, #1
 80062fc:	d006      	beq.n	800630c <RadioSetModem+0x14>
        SX126xSetPacketType( PACKET_TYPE_GFSK );
 80062fe:	2000      	movs	r0, #0
 8006300:	f000 fbca 	bl	8006a98 <SX126xSetPacketType>
        RadioPublicNetwork.Current = false;
 8006304:	2200      	movs	r2, #0
 8006306:	4b03      	ldr	r3, [pc, #12]	; (8006314 <RadioSetModem+0x1c>)
 8006308:	745a      	strb	r2, [r3, #17]
}
 800630a:	bd10      	pop	{r4, pc}
 800630c:	f7ff ffe4 	bl	80062d8 <RadioSetModem.part.0>
 8006310:	e7fb      	b.n	800630a <RadioSetModem+0x12>
 8006312:	46c0      	nop			; (mov r8, r8)
 8006314:	20000140 	.word	0x20000140

08006318 <RadioSetRxConfig>:
{
 8006318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800631a:	b089      	sub	sp, #36	; 0x24
 800631c:	9304      	str	r3, [sp, #16]
 800631e:	ab0f      	add	r3, sp, #60	; 0x3c
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	0015      	movs	r5, r2
 8006324:	9301      	str	r3, [sp, #4]
 8006326:	ab10      	add	r3, sp, #64	; 0x40
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	000f      	movs	r7, r1
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	ab11      	add	r3, sp, #68	; 0x44
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	a906      	add	r1, sp, #24
 8006334:	9302      	str	r3, [sp, #8]
 8006336:	ab12      	add	r3, sp, #72	; 0x48
 8006338:	781a      	ldrb	r2, [r3, #0]
 800633a:	ab13      	add	r3, sp, #76	; 0x4c
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	0006      	movs	r6, r0
 8006340:	9303      	str	r3, [sp, #12]
 8006342:	2321      	movs	r3, #33	; 0x21
 8006344:	185b      	adds	r3, r3, r1
 8006346:	7fdb      	ldrb	r3, [r3, #31]
 8006348:	9305      	str	r3, [sp, #20]
 800634a:	2325      	movs	r3, #37	; 0x25
 800634c:	185b      	adds	r3, r3, r1
 800634e:	7fdb      	ldrb	r3, [r3, #31]
    RxContinuous = rxContinuous;
 8006350:	496e      	ldr	r1, [pc, #440]	; (800650c <RadioSetRxConfig+0x1f4>)
 8006352:	724b      	strb	r3, [r1, #9]
        symbTimeout = 0;
 8006354:	4259      	negs	r1, r3
 8006356:	414b      	adcs	r3, r1
 8006358:	9900      	ldr	r1, [sp, #0]
 800635a:	425b      	negs	r3, r3
 800635c:	4019      	ands	r1, r3
    if( fixLen == true )
 800635e:	9b02      	ldr	r3, [sp, #8]
        symbTimeout = 0;
 8006360:	9100      	str	r1, [sp, #0]
    if( fixLen == true )
 8006362:	2b00      	cmp	r3, #0
 8006364:	d100      	bne.n	8006368 <RadioSetRxConfig+0x50>
        MaxPayloadLength = 0xFF;
 8006366:	22ff      	movs	r2, #255	; 0xff
 8006368:	4b69      	ldr	r3, [pc, #420]	; (8006510 <RadioSetRxConfig+0x1f8>)
 800636a:	701a      	strb	r2, [r3, #0]
    switch( modem )
 800636c:	2e00      	cmp	r6, #0
 800636e:	d003      	beq.n	8006378 <RadioSetRxConfig+0x60>
 8006370:	2e01      	cmp	r6, #1
 8006372:	d065      	beq.n	8006440 <RadioSetRxConfig+0x128>
}
 8006374:	b009      	add	sp, #36	; 0x24
 8006376:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX126xSetStopRxTimerOnPreambleDetect( false );
 8006378:	0030      	movs	r0, r6
 800637a:	f000 fab5 	bl	80068e8 <SX126xSetStopRxTimerOnPreambleDetect>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800637e:	4c65      	ldr	r4, [pc, #404]	; (8006514 <RadioSetRxConfig+0x1fc>)
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8006380:	220b      	movs	r2, #11
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006382:	0023      	movs	r3, r4
 8006384:	3328      	adds	r3, #40	; 0x28
 8006386:	701e      	strb	r6, [r3, #0]
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8006388:	0023      	movs	r3, r4
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 800638a:	0078      	lsls	r0, r7, #1
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800638c:	3334      	adds	r3, #52	; 0x34
 800638e:	701a      	strb	r2, [r3, #0]
            SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006390:	62e5      	str	r5, [r4, #44]	; 0x2c
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 8006392:	f7ff fd87 	bl	8005ea4 <RadioGetFskBandwidthRegValue>
 8006396:	0023      	movs	r3, r4
 8006398:	3335      	adds	r3, #53	; 0x35
 800639a:	7018      	strb	r0, [r3, #0]
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800639c:	9b01      	ldr	r3, [sp, #4]
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800639e:	9a02      	ldr	r2, [sp, #8]
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80063a0:	00db      	lsls	r3, r3, #3
 80063a2:	8063      	strh	r3, [r4, #2]
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80063a4:	4b5c      	ldr	r3, [pc, #368]	; (8006518 <RadioSetRxConfig+0x200>)
            if( crcOn == true )
 80063a6:	9903      	ldr	r1, [sp, #12]
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80063a8:	80a3      	strh	r3, [r4, #4]
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80063aa:	2301      	movs	r3, #1
 80063ac:	405a      	eors	r2, r3
 80063ae:	71e2      	strb	r2, [r4, #7]
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80063b0:	4a57      	ldr	r2, [pc, #348]	; (8006510 <RadioSetRxConfig+0x1f8>)
            SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80063b2:	7026      	strb	r6, [r4, #0]
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80063b4:	7812      	ldrb	r2, [r2, #0]
            SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80063b6:	71a6      	strb	r6, [r4, #6]
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80063b8:	7222      	strb	r2, [r4, #8]
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80063ba:	22f2      	movs	r2, #242	; 0xf2
            if( crcOn == true )
 80063bc:	2900      	cmp	r1, #0
 80063be:	d100      	bne.n	80063c2 <RadioSetRxConfig+0xaa>
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80063c0:	001a      	movs	r2, r3
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80063c2:	0026      	movs	r6, r4
 80063c4:	3628      	adds	r6, #40	; 0x28
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80063c6:	72a3      	strb	r3, [r4, #10]
 80063c8:	7262      	strb	r2, [r4, #9]
            RadioStandby( );
 80063ca:	f7ff fc9b 	bl	8005d04 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80063ce:	7830      	ldrb	r0, [r6, #0]
 80063d0:	1e43      	subs	r3, r0, #1
 80063d2:	4198      	sbcs	r0, r3
 80063d4:	b2c0      	uxtb	r0, r0
 80063d6:	f7ff ff8f 	bl	80062f8 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 80063da:	0030      	movs	r0, r6
 80063dc:	f000 fb6a 	bl	8006ab4 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 80063e0:	0020      	movs	r0, r4
 80063e2:	f000 fc87 	bl	8006cf4 <SX126xSetPacketParams>
            SX126xSetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80063e6:	494d      	ldr	r1, [pc, #308]	; (800651c <RadioSetRxConfig+0x204>)
 80063e8:	2208      	movs	r2, #8
 80063ea:	3134      	adds	r1, #52	; 0x34
 80063ec:	a806      	add	r0, sp, #24
 80063ee:	f001 fbdd 	bl	8007bac <memcpy>
 80063f2:	a806      	add	r0, sp, #24
 80063f4:	f000 fc50 	bl	8006c98 <SX126xSetSyncWord>
            SX126xSetWhiteningSeed( 0x01FF );
 80063f8:	4849      	ldr	r0, [pc, #292]	; (8006520 <RadioSetRxConfig+0x208>)
 80063fa:	f000 fd37 	bl	8006e6c <SX126xSetWhiteningSeed>
            RxTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 80063fe:	0028      	movs	r0, r5
 8006400:	f7fb faa6 	bl	8001950 <__aeabi_ui2d>
 8006404:	0002      	movs	r2, r0
 8006406:	000b      	movs	r3, r1
 8006408:	2000      	movs	r0, #0
 800640a:	4946      	ldr	r1, [pc, #280]	; (8006524 <RadioSetRxConfig+0x20c>)
 800640c:	f7fa f954 	bl	80006b8 <__aeabi_ddiv>
 8006410:	2200      	movs	r2, #0
 8006412:	4b45      	ldr	r3, [pc, #276]	; (8006528 <RadioSetRxConfig+0x210>)
 8006414:	f7fa fc38 	bl	8000c88 <__aeabi_dmul>
 8006418:	0004      	movs	r4, r0
 800641a:	9800      	ldr	r0, [sp, #0]
 800641c:	000d      	movs	r5, r1
 800641e:	f7fb fa67 	bl	80018f0 <__aeabi_i2d>
 8006422:	0002      	movs	r2, r0
 8006424:	000b      	movs	r3, r1
 8006426:	0020      	movs	r0, r4
 8006428:	0029      	movs	r1, r5
 800642a:	f7fa fc2d 	bl	8000c88 <__aeabi_dmul>
 800642e:	4b3f      	ldr	r3, [pc, #252]	; (800652c <RadioSetRxConfig+0x214>)
 8006430:	2200      	movs	r2, #0
 8006432:	f7fa fc29 	bl	8000c88 <__aeabi_dmul>
 8006436:	f7fa f855 	bl	80004e4 <__aeabi_d2uiz>
 800643a:	4b34      	ldr	r3, [pc, #208]	; (800650c <RadioSetRxConfig+0x1f4>)
 800643c:	60d8      	str	r0, [r3, #12]
            break;
 800643e:	e799      	b.n	8006374 <RadioSetRxConfig+0x5c>
            SX126xSetStopRxTimerOnPreambleDetect( false );
 8006440:	2000      	movs	r0, #0
 8006442:	f000 fa51 	bl	80068e8 <SX126xSetStopRxTimerOnPreambleDetect>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006446:	4c33      	ldr	r4, [pc, #204]	; (8006514 <RadioSetRxConfig+0x1fc>)
 8006448:	0023      	movs	r3, r4
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800644a:	0022      	movs	r2, r4
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800644c:	0021      	movs	r1, r4
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800644e:	3328      	adds	r3, #40	; 0x28
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8006450:	3238      	adds	r2, #56	; 0x38
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006452:	701e      	strb	r6, [r3, #0]
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8006454:	b2eb      	uxtb	r3, r5
 8006456:	7013      	strb	r3, [r2, #0]
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8006458:	4a30      	ldr	r2, [pc, #192]	; (800651c <RadioSetRxConfig+0x204>)
 800645a:	3139      	adds	r1, #57	; 0x39
 800645c:	19d2      	adds	r2, r2, r7
 800645e:	7912      	ldrb	r2, [r2, #4]
 8006460:	700a      	strb	r2, [r1, #0]
            SX126x.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8006462:	0022      	movs	r2, r4
 8006464:	9904      	ldr	r1, [sp, #16]
 8006466:	323a      	adds	r2, #58	; 0x3a
 8006468:	7011      	strb	r1, [r2, #0]
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800646a:	2f00      	cmp	r7, #0
 800646c:	d13d      	bne.n	80064ea <RadioSetRxConfig+0x1d2>
 800646e:	3d0b      	subs	r5, #11
 8006470:	42ae      	cmp	r6, r5
 8006472:	417f      	adcs	r7, r7
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8006474:	b2f9      	uxtb	r1, r7
 8006476:	0022      	movs	r2, r4
 8006478:	323b      	adds	r2, #59	; 0x3b
 800647a:	7011      	strb	r1, [r2, #0]
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 800647c:	2201      	movs	r2, #1
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800647e:	3b05      	subs	r3, #5
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006480:	7022      	strb	r2, [r4, #0]
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006482:	4293      	cmp	r3, r2
 8006484:	d839      	bhi.n	80064fa <RadioSetRxConfig+0x1e2>
                if( preambleLen < 12 )
 8006486:	9b01      	ldr	r3, [sp, #4]
 8006488:	2b0b      	cmp	r3, #11
 800648a:	d836      	bhi.n	80064fa <RadioSetRxConfig+0x1e2>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 800648c:	230c      	movs	r3, #12
 800648e:	81a3      	strh	r3, [r4, #12]
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8006490:	0025      	movs	r5, r4
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8006492:	9b02      	ldr	r3, [sp, #8]
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8006494:	3528      	adds	r5, #40	; 0x28
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8006496:	73a3      	strb	r3, [r4, #14]
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8006498:	4b1d      	ldr	r3, [pc, #116]	; (8006510 <RadioSetRxConfig+0x1f8>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	73e3      	strb	r3, [r4, #15]
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800649e:	9b03      	ldr	r3, [sp, #12]
 80064a0:	7423      	strb	r3, [r4, #16]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80064a2:	9b05      	ldr	r3, [sp, #20]
 80064a4:	7463      	strb	r3, [r4, #17]
            RadioStandby( );
 80064a6:	f7ff fc2d 	bl	8005d04 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80064aa:	7828      	ldrb	r0, [r5, #0]
 80064ac:	1e43      	subs	r3, r0, #1
 80064ae:	4198      	sbcs	r0, r3
 80064b0:	b2c0      	uxtb	r0, r0
 80064b2:	f7ff ff21 	bl	80062f8 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 80064b6:	0028      	movs	r0, r5
 80064b8:	f000 fafc 	bl	8006ab4 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 80064bc:	0020      	movs	r0, r4
 80064be:	f000 fc19 	bl	8006cf4 <SX126xSetPacketParams>
            SX126xSetLoRaSymbNumTimeout( symbTimeout );
 80064c2:	466b      	mov	r3, sp
 80064c4:	7818      	ldrb	r0, [r3, #0]
 80064c6:	f000 fc8d 	bl	8006de4 <SX126xSetLoRaSymbNumTimeout>
            if( SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80064ca:	7c63      	ldrb	r3, [r4, #17]
                SX126xWriteRegister( 0x0736, SX126xReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 80064cc:	4818      	ldr	r0, [pc, #96]	; (8006530 <RadioSetRxConfig+0x218>)
 80064ce:	2404      	movs	r4, #4
            if( SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d116      	bne.n	8006502 <RadioSetRxConfig+0x1ea>
                SX126xWriteRegister( 0x0736, SX126xReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 80064d4:	f000 fcc0 	bl	8006e58 <SX126xReadRegister>
 80064d8:	43a0      	bics	r0, r4
 80064da:	b2c1      	uxtb	r1, r0
                SX126xWriteRegister( 0x0736, SX126xReadRegister( 0x0736 ) | ( 1 << 2 ) );
 80064dc:	4814      	ldr	r0, [pc, #80]	; (8006530 <RadioSetRxConfig+0x218>)
 80064de:	f000 fc5f 	bl	8006da0 <SX126xWriteRegister>
            RxTimeout = 0xFFFF;
 80064e2:	4b0a      	ldr	r3, [pc, #40]	; (800650c <RadioSetRxConfig+0x1f4>)
 80064e4:	4a13      	ldr	r2, [pc, #76]	; (8006534 <RadioSetRxConfig+0x21c>)
 80064e6:	60da      	str	r2, [r3, #12]
}
 80064e8:	e744      	b.n	8006374 <RadioSetRxConfig+0x5c>
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80064ea:	2100      	movs	r1, #0
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80064ec:	2f01      	cmp	r7, #1
 80064ee:	d1c2      	bne.n	8006476 <RadioSetRxConfig+0x15e>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80064f0:	3d0c      	subs	r5, #12
 80064f2:	426a      	negs	r2, r5
 80064f4:	4155      	adcs	r5, r2
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80064f6:	b2e9      	uxtb	r1, r5
 80064f8:	e7bd      	b.n	8006476 <RadioSetRxConfig+0x15e>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80064fa:	4b06      	ldr	r3, [pc, #24]	; (8006514 <RadioSetRxConfig+0x1fc>)
 80064fc:	9a01      	ldr	r2, [sp, #4]
 80064fe:	819a      	strh	r2, [r3, #12]
 8006500:	e7c6      	b.n	8006490 <RadioSetRxConfig+0x178>
                SX126xWriteRegister( 0x0736, SX126xReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8006502:	f000 fca9 	bl	8006e58 <SX126xReadRegister>
 8006506:	4304      	orrs	r4, r0
 8006508:	b2e1      	uxtb	r1, r4
 800650a:	e7e7      	b.n	80064dc <RadioSetRxConfig+0x1c4>
 800650c:	20000140 	.word	0x20000140
 8006510:	20000024 	.word	0x20000024
 8006514:	20000710 	.word	0x20000710
 8006518:	00001804 	.word	0x00001804
 800651c:	08008c3c 	.word	0x08008c3c
 8006520:	000001ff 	.word	0x000001ff
 8006524:	3ff00000 	.word	0x3ff00000
 8006528:	40200000 	.word	0x40200000
 800652c:	408f4000 	.word	0x408f4000
 8006530:	00000736 	.word	0x00000736
 8006534:	0000ffff 	.word	0x0000ffff

08006538 <RadioSetTxConfig>:
{
 8006538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800653a:	b087      	sub	sp, #28
 800653c:	9102      	str	r1, [sp, #8]
 800653e:	a90c      	add	r1, sp, #48	; 0x30
 8006540:	0017      	movs	r7, r2
 8006542:	c904      	ldmia	r1!, {r2}
 8006544:	0005      	movs	r5, r0
 8006546:	7809      	ldrb	r1, [r1, #0]
 8006548:	468c      	mov	ip, r1
 800654a:	a90e      	add	r1, sp, #56	; 0x38
 800654c:	880e      	ldrh	r6, [r1, #0]
 800654e:	a90f      	add	r1, sp, #60	; 0x3c
 8006550:	7809      	ldrb	r1, [r1, #0]
 8006552:	9100      	str	r1, [sp, #0]
 8006554:	a910      	add	r1, sp, #64	; 0x40
 8006556:	7809      	ldrb	r1, [r1, #0]
 8006558:	9101      	str	r1, [sp, #4]
 800655a:	a913      	add	r1, sp, #76	; 0x4c
 800655c:	7809      	ldrb	r1, [r1, #0]
 800655e:	9103      	str	r1, [sp, #12]
    switch( modem )
 8006560:	2800      	cmp	r0, #0
 8006562:	d008      	beq.n	8006576 <RadioSetTxConfig+0x3e>
 8006564:	2801      	cmp	r0, #1
 8006566:	d044      	beq.n	80065f2 <RadioSetTxConfig+0xba>
        SX126xWriteRegister( 0x0889, SX126xReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8006568:	4850      	ldr	r0, [pc, #320]	; (80066ac <RadioSetTxConfig+0x174>)
 800656a:	f000 fc75 	bl	8006e58 <SX126xReadRegister>
 800656e:	2104      	movs	r1, #4
 8006570:	4301      	orrs	r1, r0
 8006572:	b2c9      	uxtb	r1, r1
 8006574:	e084      	b.n	8006680 <RadioSetTxConfig+0x148>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006576:	4c4e      	ldr	r4, [pc, #312]	; (80066b0 <RadioSetTxConfig+0x178>)
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006578:	00f6      	lsls	r6, r6, #3
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800657a:	0021      	movs	r1, r4
            SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 800657c:	62e2      	str	r2, [r4, #44]	; 0x2c
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800657e:	3128      	adds	r1, #40	; 0x28
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8006580:	0022      	movs	r2, r4
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006582:	7008      	strb	r0, [r1, #0]
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8006584:	210b      	movs	r1, #11
 8006586:	3234      	adds	r2, #52	; 0x34
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 8006588:	0058      	lsls	r0, r3, #1
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800658a:	7011      	strb	r1, [r2, #0]
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 800658c:	f7ff fc8a 	bl	8005ea4 <RadioGetFskBandwidthRegValue>
 8006590:	0023      	movs	r3, r4
 8006592:	3335      	adds	r3, #53	; 0x35
 8006594:	7018      	strb	r0, [r3, #0]
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8006596:	4b47      	ldr	r3, [pc, #284]	; (80066b4 <RadioSetTxConfig+0x17c>)
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8006598:	9a00      	ldr	r2, [sp, #0]
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800659a:	80a3      	strh	r3, [r4, #4]
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800659c:	2301      	movs	r3, #1
            if( crcOn == true )
 800659e:	9901      	ldr	r1, [sp, #4]
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80065a0:	405a      	eors	r2, r3
 80065a2:	71e2      	strb	r2, [r4, #7]
            SX126x.ModulationParams.Params.Gfsk.Fdev = fdev;
 80065a4:	6327      	str	r7, [r4, #48]	; 0x30
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80065a6:	22f2      	movs	r2, #242	; 0xf2
            SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80065a8:	7025      	strb	r5, [r4, #0]
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80065aa:	8066      	strh	r6, [r4, #2]
            SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80065ac:	71a5      	strb	r5, [r4, #6]
            if( crcOn == true )
 80065ae:	2900      	cmp	r1, #0
 80065b0:	d100      	bne.n	80065b4 <RadioSetTxConfig+0x7c>
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80065b2:	001a      	movs	r2, r3
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80065b4:	0025      	movs	r5, r4
 80065b6:	3528      	adds	r5, #40	; 0x28
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80065b8:	72a3      	strb	r3, [r4, #10]
 80065ba:	7262      	strb	r2, [r4, #9]
            RadioStandby( );
 80065bc:	f7ff fba2 	bl	8005d04 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80065c0:	7828      	ldrb	r0, [r5, #0]
 80065c2:	1e43      	subs	r3, r0, #1
 80065c4:	4198      	sbcs	r0, r3
 80065c6:	b2c0      	uxtb	r0, r0
 80065c8:	f7ff fe96 	bl	80062f8 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 80065cc:	0028      	movs	r0, r5
 80065ce:	f000 fa71 	bl	8006ab4 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 80065d2:	0020      	movs	r0, r4
 80065d4:	f000 fb8e 	bl	8006cf4 <SX126xSetPacketParams>
            SX126xSetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80065d8:	4937      	ldr	r1, [pc, #220]	; (80066b8 <RadioSetTxConfig+0x180>)
 80065da:	2208      	movs	r2, #8
 80065dc:	3134      	adds	r1, #52	; 0x34
 80065de:	a804      	add	r0, sp, #16
 80065e0:	f001 fae4 	bl	8007bac <memcpy>
 80065e4:	a804      	add	r0, sp, #16
 80065e6:	f000 fb57 	bl	8006c98 <SX126xSetSyncWord>
            SX126xSetWhiteningSeed( 0x01FF );
 80065ea:	4834      	ldr	r0, [pc, #208]	; (80066bc <RadioSetTxConfig+0x184>)
 80065ec:	f000 fc3e 	bl	8006e6c <SX126xSetWhiteningSeed>
    if( ( modem == MODEM_LORA ) && ( SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80065f0:	e7ba      	b.n	8006568 <RadioSetTxConfig+0x30>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80065f2:	4c2f      	ldr	r4, [pc, #188]	; (80066b0 <RadioSetTxConfig+0x178>)
 80065f4:	0021      	movs	r1, r4
 80065f6:	3128      	adds	r1, #40	; 0x28
 80065f8:	7008      	strb	r0, [r1, #0]
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80065fa:	0020      	movs	r0, r4
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80065fc:	0027      	movs	r7, r4
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80065fe:	3038      	adds	r0, #56	; 0x38
 8006600:	b2d1      	uxtb	r1, r2
 8006602:	7001      	strb	r1, [r0, #0]
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8006604:	482c      	ldr	r0, [pc, #176]	; (80066b8 <RadioSetTxConfig+0x180>)
 8006606:	3739      	adds	r7, #57	; 0x39
 8006608:	18c0      	adds	r0, r0, r3
 800660a:	7900      	ldrb	r0, [r0, #4]
 800660c:	7038      	strb	r0, [r7, #0]
            SX126x.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800660e:	0020      	movs	r0, r4
 8006610:	4667      	mov	r7, ip
 8006612:	303a      	adds	r0, #58	; 0x3a
 8006614:	7007      	strb	r7, [r0, #0]
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006616:	2b00      	cmp	r3, #0
 8006618:	d13d      	bne.n	8006696 <RadioSetTxConfig+0x15e>
 800661a:	3a0b      	subs	r2, #11
 800661c:	4295      	cmp	r5, r2
 800661e:	415b      	adcs	r3, r3
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8006620:	b2d8      	uxtb	r0, r3
 8006622:	0023      	movs	r3, r4
 8006624:	333b      	adds	r3, #59	; 0x3b
 8006626:	7018      	strb	r0, [r3, #0]
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006628:	2301      	movs	r3, #1
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800662a:	3905      	subs	r1, #5
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 800662c:	7023      	strb	r3, [r4, #0]
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800662e:	4299      	cmp	r1, r3
 8006630:	d839      	bhi.n	80066a6 <RadioSetTxConfig+0x16e>
                if( preambleLen < 12 )
 8006632:	2e0b      	cmp	r6, #11
 8006634:	d837      	bhi.n	80066a6 <RadioSetTxConfig+0x16e>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 8006636:	330b      	adds	r3, #11
 8006638:	81a3      	strh	r3, [r4, #12]
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800663a:	0025      	movs	r5, r4
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800663c:	9b00      	ldr	r3, [sp, #0]
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800663e:	3528      	adds	r5, #40	; 0x28
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8006640:	73a3      	strb	r3, [r4, #14]
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8006642:	4b1f      	ldr	r3, [pc, #124]	; (80066c0 <RadioSetTxConfig+0x188>)
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	73e3      	strb	r3, [r4, #15]
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8006648:	9b01      	ldr	r3, [sp, #4]
 800664a:	7423      	strb	r3, [r4, #16]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800664c:	9b03      	ldr	r3, [sp, #12]
 800664e:	7463      	strb	r3, [r4, #17]
            RadioStandby( );
 8006650:	f7ff fb58 	bl	8005d04 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8006654:	7828      	ldrb	r0, [r5, #0]
 8006656:	1e43      	subs	r3, r0, #1
 8006658:	4198      	sbcs	r0, r3
 800665a:	b2c0      	uxtb	r0, r0
 800665c:	f7ff fe4c 	bl	80062f8 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 8006660:	0028      	movs	r0, r5
 8006662:	f000 fa27 	bl	8006ab4 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 8006666:	0020      	movs	r0, r4
    if( ( modem == MODEM_LORA ) && ( SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8006668:	3439      	adds	r4, #57	; 0x39
            SX126xSetPacketParams( &SX126x.PacketParams );
 800666a:	f000 fb43 	bl	8006cf4 <SX126xSetPacketParams>
    if( ( modem == MODEM_LORA ) && ( SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800666e:	7823      	ldrb	r3, [r4, #0]
 8006670:	2b06      	cmp	r3, #6
 8006672:	d000      	beq.n	8006676 <RadioSetTxConfig+0x13e>
 8006674:	e778      	b.n	8006568 <RadioSetTxConfig+0x30>
        SX126xWriteRegister( 0x0889, SX126xReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8006676:	480d      	ldr	r0, [pc, #52]	; (80066ac <RadioSetTxConfig+0x174>)
 8006678:	f000 fbee 	bl	8006e58 <SX126xReadRegister>
 800667c:	21fb      	movs	r1, #251	; 0xfb
 800667e:	4001      	ands	r1, r0
        SX126xWriteRegister( 0x0889, SX126xReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8006680:	480a      	ldr	r0, [pc, #40]	; (80066ac <RadioSetTxConfig+0x174>)
 8006682:	f000 fb8d 	bl	8006da0 <SX126xWriteRegister>
    SX126xSetRfTxPower( power );
 8006686:	9802      	ldr	r0, [sp, #8]
 8006688:	f000 fc90 	bl	8006fac <SX126xSetRfTxPower>
    TxTimeout = timeout;
 800668c:	4b0d      	ldr	r3, [pc, #52]	; (80066c4 <RadioSetTxConfig+0x18c>)
 800668e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006690:	605a      	str	r2, [r3, #4]
}
 8006692:	b007      	add	sp, #28
 8006694:	bdf0      	pop	{r4, r5, r6, r7, pc}
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8006696:	2000      	movs	r0, #0
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006698:	2b01      	cmp	r3, #1
 800669a:	d1c2      	bne.n	8006622 <RadioSetTxConfig+0xea>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800669c:	3a0c      	subs	r2, #12
 800669e:	4253      	negs	r3, r2
 80066a0:	415a      	adcs	r2, r3
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80066a2:	b2d0      	uxtb	r0, r2
 80066a4:	e7bd      	b.n	8006622 <RadioSetTxConfig+0xea>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80066a6:	4b02      	ldr	r3, [pc, #8]	; (80066b0 <RadioSetTxConfig+0x178>)
 80066a8:	819e      	strh	r6, [r3, #12]
 80066aa:	e7c6      	b.n	800663a <RadioSetTxConfig+0x102>
 80066ac:	00000889 	.word	0x00000889
 80066b0:	20000710 	.word	0x20000710
 80066b4:	00001804 	.word	0x00001804
 80066b8:	08008c3c 	.word	0x08008c3c
 80066bc:	000001ff 	.word	0x000001ff
 80066c0:	20000024 	.word	0x20000024
 80066c4:	20000140 	.word	0x20000140

080066c8 <RadioIsChannelFree>:
{
 80066c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066ca:	0004      	movs	r4, r0
 80066cc:	b08d      	sub	sp, #52	; 0x34
    RadioSetModem( MODEM_FSK );
 80066ce:	2000      	movs	r0, #0
{
 80066d0:	000d      	movs	r5, r1
 80066d2:	0016      	movs	r6, r2
 80066d4:	930b      	str	r3, [sp, #44]	; 0x2c
    RadioSetModem( MODEM_FSK );
 80066d6:	f7ff fe0f 	bl	80062f8 <RadioSetModem>
    SX126xSetRfFrequency( freq );
 80066da:	0020      	movs	r0, r4
 80066dc:	f000 f9bc 	bl	8006a58 <SX126xSetRfFrequency>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80066e0:	2400      	movs	r4, #0
 80066e2:	2701      	movs	r7, #1
 80066e4:	2303      	movs	r3, #3
 80066e6:	2296      	movs	r2, #150	; 0x96
 80066e8:	0029      	movs	r1, r5
 80066ea:	0092      	lsls	r2, r2, #2
 80066ec:	0020      	movs	r0, r4
 80066ee:	9408      	str	r4, [sp, #32]
 80066f0:	9407      	str	r4, [sp, #28]
 80066f2:	9406      	str	r4, [sp, #24]
 80066f4:	9405      	str	r4, [sp, #20]
 80066f6:	9404      	str	r4, [sp, #16]
 80066f8:	9403      	str	r4, [sp, #12]
 80066fa:	9402      	str	r4, [sp, #8]
 80066fc:	9301      	str	r3, [sp, #4]
 80066fe:	9709      	str	r7, [sp, #36]	; 0x24
 8006700:	0023      	movs	r3, r4
 8006702:	9500      	str	r5, [sp, #0]
 8006704:	f7ff fe08 	bl	8006318 <RadioSetRxConfig>
    RadioRx( 0 );
 8006708:	0020      	movs	r0, r4
 800670a:	f7ff fc75 	bl	8005ff8 <RadioRx>
    RADIO_DELAY_MS( 1 );
 800670e:	0038      	movs	r0, r7
 8006710:	f7fc f996 	bl	8002a40 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8006714:	f000 ffb6 	bl	8007684 <UTIL_TIMER_GetCurrentTime>
 8006718:	0004      	movs	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800671a:	0020      	movs	r0, r4
 800671c:	f000 ffbc 	bl	8007698 <UTIL_TIMER_GetElapsedTime>
 8006720:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006722:	4298      	cmp	r0, r3
 8006724:	d305      	bcc.n	8006732 <RadioIsChannelFree+0x6a>
    bool     status           = true;
 8006726:	2401      	movs	r4, #1
    RadioSleep( );
 8006728:	f7ff fb3a 	bl	8005da0 <RadioSleep>
}
 800672c:	0020      	movs	r0, r4
 800672e:	b00d      	add	sp, #52	; 0x34
 8006730:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return SX126xGetRssiInst( );
 8006732:	f000 fa4f 	bl	8006bd4 <SX126xGetRssiInst>
        if( rssi > rssiThresh )
 8006736:	b200      	sxth	r0, r0
 8006738:	4286      	cmp	r6, r0
 800673a:	daee      	bge.n	800671a <RadioIsChannelFree+0x52>
            status = false;
 800673c:	2400      	movs	r4, #0
 800673e:	e7f3      	b.n	8006728 <RadioIsChannelFree+0x60>

08006740 <RadioRandom>:
{
 8006740:	b510      	push	{r4, lr}
 8006742:	f7ff fdc9 	bl	80062d8 <RadioSetModem.part.0>
    SX126xSetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8006746:	2300      	movs	r3, #0
 8006748:	001a      	movs	r2, r3
 800674a:	0019      	movs	r1, r3
 800674c:	0018      	movs	r0, r3
 800674e:	f000 f939 	bl	80069c4 <SX126xSetDioIrqParams>
    rnd = SX126xGetRandom( );
 8006752:	f000 fba9 	bl	8006ea8 <SX126xGetRandom>
 8006756:	0004      	movs	r4, r0
    Sx_Board_SetLedRx(false);
 8006758:	2000      	movs	r0, #0
 800675a:	f7fc fe17 	bl	800338c <SX126x_RADIO_BoardSetLedRx>
}
 800675e:	0020      	movs	r0, r4
 8006760:	bd10      	pop	{r4, pc}
	...

08006764 <SX126xGetOperatingMode>:
    SX126xSetOperatingMode( MODE_STDBY_RC );
}

RadioOperatingModes_t SX126xGetOperatingMode( void )
{
    return OperatingMode;
 8006764:	4b01      	ldr	r3, [pc, #4]	; (800676c <SX126xGetOperatingMode+0x8>)
 8006766:	7818      	ldrb	r0, [r3, #0]
}
 8006768:	4770      	bx	lr
 800676a:	46c0      	nop			; (mov r8, r8)
 800676c:	20000154 	.word	0x20000154

08006770 <SX126xSetOperatingMode>:

void SX126xSetOperatingMode( RadioOperatingModes_t mode )
{
    OperatingMode = mode;
 8006770:	4b01      	ldr	r3, [pc, #4]	; (8006778 <SX126xSetOperatingMode+0x8>)
 8006772:	7018      	strb	r0, [r3, #0]
}
 8006774:	4770      	bx	lr
 8006776:	46c0      	nop			; (mov r8, r8)
 8006778:	20000154 	.word	0x20000154

0800677c <SX126xCheckDeviceReady>:

void SX126xCheckDeviceReady( void )
{
 800677c:	b510      	push	{r4, lr}
    return OperatingMode;
 800677e:	4b05      	ldr	r3, [pc, #20]	; (8006794 <SX126xCheckDeviceReady+0x18>)
 8006780:	781b      	ldrb	r3, [r3, #0]
    if( ( SX126xGetOperatingMode( ) == MODE_SLEEP ) || ( SX126xGetOperatingMode( ) == MODE_RX_DC ) )
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <SX126xCheckDeviceReady+0xe>
 8006786:	2b06      	cmp	r3, #6
 8006788:	d101      	bne.n	800678e <SX126xCheckDeviceReady+0x12>
    {
        Sx_Board_WakeUp( );
 800678a:	f7fc fe13 	bl	80033b4 <SX126x_RADIO_WakeUp>
        // Switch is turned off when device is in sleep mode and turned on is all other modes
        //@Murata already ready for tx or sleep on Murata module.
        //Sx_Board_SetAntSw( RFSW_ON );
    }
    Sx_Board_WaitOnBusy( );
 800678e:	f7fc fdd3 	bl	8003338 <SX126x_RADIO_WaitOnBusy>
}
 8006792:	bd10      	pop	{r4, pc}
 8006794:	20000154 	.word	0x20000154

08006798 <SX126xGetPacketType>:
    SX126xWriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
}

RadioPacketTypes_t SX126xGetPacketType( void )
{
    return PacketType;
 8006798:	4b01      	ldr	r3, [pc, #4]	; (80067a0 <SX126xGetPacketType+0x8>)
 800679a:	7858      	ldrb	r0, [r3, #1]
}
 800679c:	4770      	bx	lr
 800679e:	46c0      	nop			; (mov r8, r8)
 80067a0:	20000154 	.word	0x20000154

080067a4 <SX126xWriteCommand>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SX126xWriteCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 80067a4:	b570      	push	{r4, r5, r6, lr}
 80067a6:	0005      	movs	r5, r0
 80067a8:	000c      	movs	r4, r1
 80067aa:	0016      	movs	r6, r2
    SX126xCheckDeviceReady( );
 80067ac:	f7ff ffe6 	bl	800677c <SX126xCheckDeviceReady>

  if(command == RADIO_SET_RX)//@Murta allow rx   
 80067b0:	2d82      	cmp	r5, #130	; 0x82
 80067b2:	d102      	bne.n	80067ba <SX126xWriteCommand+0x16>
    Sx_Board_SetAntSw( RFSW_RX );
 80067b4:	2001      	movs	r0, #1
 80067b6:	f7fc fdd9 	bl	800336c <SX126x_RADIO_SetAntSw>

    Sx_Board_ChipSelect( 0 );
 80067ba:	2000      	movs	r0, #0
 80067bc:	f7fc fdc6 	bl	800334c <SX126x_RADIO_ChipSelect>

    Sx_Board_SendRecv(  ( uint8_t )command );
 80067c0:	b2a8      	uxth	r0, r5
 80067c2:	f7fc fde8 	bl	8003396 <SX126x_RADIO_SendRecv>

    for( uint16_t i = 0; i < size; i++ )
 80067c6:	19a6      	adds	r6, r4, r6
 80067c8:	42b4      	cmp	r4, r6
 80067ca:	d107      	bne.n	80067dc <SX126xWriteCommand+0x38>
    {
        Sx_Board_SendRecv(  buffer[i] );
    }

    Sx_Board_ChipSelect( 1 );
 80067cc:	2001      	movs	r0, #1
 80067ce:	f7fc fdbd 	bl	800334c <SX126x_RADIO_ChipSelect>

    if( command != RADIO_SET_SLEEP )
 80067d2:	2d84      	cmp	r5, #132	; 0x84
 80067d4:	d001      	beq.n	80067da <SX126xWriteCommand+0x36>
    {
        Sx_Board_WaitOnBusy( );
 80067d6:	f7fc fdaf 	bl	8003338 <SX126x_RADIO_WaitOnBusy>
    }
}
 80067da:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv(  buffer[i] );
 80067dc:	7820      	ldrb	r0, [r4, #0]
 80067de:	f7fc fdda 	bl	8003396 <SX126x_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 80067e2:	3401      	adds	r4, #1
 80067e4:	e7f0      	b.n	80067c8 <SX126xWriteCommand+0x24>
	...

080067e8 <SX126xSetSleep>:
{
 80067e8:	b513      	push	{r0, r1, r4, lr}
 80067ea:	1c04      	adds	r4, r0, #0
    Sx_Board_SetAntSw( RFSW_OFF );
 80067ec:	2000      	movs	r0, #0
 80067ee:	f7fc fdbd 	bl	800336c <SX126x_RADIO_SetAntSw>
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80067f2:	2006      	movs	r0, #6
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80067f4:	466b      	mov	r3, sp
 80067f6:	4020      	ands	r0, r4
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80067f8:	07e4      	lsls	r4, r4, #31
 80067fa:	0fe4      	lsrs	r4, r4, #31
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80067fc:	1dd9      	adds	r1, r3, #7
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80067fe:	4304      	orrs	r4, r0
    SX126xWriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8006800:	2201      	movs	r2, #1
 8006802:	2084      	movs	r0, #132	; 0x84
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8006804:	700c      	strb	r4, [r1, #0]
    SX126xWriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8006806:	f7ff ffcd 	bl	80067a4 <SX126xWriteCommand>
    OperatingMode = mode;
 800680a:	2200      	movs	r2, #0
 800680c:	4b01      	ldr	r3, [pc, #4]	; (8006814 <SX126xSetSleep+0x2c>)
 800680e:	701a      	strb	r2, [r3, #0]
}
 8006810:	bd13      	pop	{r0, r1, r4, pc}
 8006812:	46c0      	nop			; (mov r8, r8)
 8006814:	20000154 	.word	0x20000154

08006818 <SX126xSetStandby>:
{
 8006818:	b507      	push	{r0, r1, r2, lr}
 800681a:	466b      	mov	r3, sp
    SX126xWriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800681c:	2201      	movs	r2, #1
{
 800681e:	71d8      	strb	r0, [r3, #7]
    SX126xWriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8006820:	1dd9      	adds	r1, r3, #7
 8006822:	2080      	movs	r0, #128	; 0x80
 8006824:	f7ff ffbe 	bl	80067a4 <SX126xWriteCommand>
    if( standbyConfig == STDBY_RC )
 8006828:	466b      	mov	r3, sp
 800682a:	79db      	ldrb	r3, [r3, #7]
    OperatingMode = mode;
 800682c:	1e5a      	subs	r2, r3, #1
 800682e:	4193      	sbcs	r3, r2
 8006830:	4a01      	ldr	r2, [pc, #4]	; (8006838 <SX126xSetStandby+0x20>)
 8006832:	3301      	adds	r3, #1
 8006834:	7013      	strb	r3, [r2, #0]
}
 8006836:	bd07      	pop	{r0, r1, r2, pc}
 8006838:	20000154 	.word	0x20000154

0800683c <SX126xSetTx>:
{
 800683c:	b507      	push	{r0, r1, r2, lr}
    OperatingMode = mode;
 800683e:	2204      	movs	r2, #4
 8006840:	4b07      	ldr	r3, [pc, #28]	; (8006860 <SX126xSetTx+0x24>)
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006842:	a901      	add	r1, sp, #4
    OperatingMode = mode;
 8006844:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006846:	0c03      	lsrs	r3, r0, #16
 8006848:	700b      	strb	r3, [r1, #0]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800684a:	7088      	strb	r0, [r1, #2]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800684c:	0a03      	lsrs	r3, r0, #8
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 800684e:	3a01      	subs	r2, #1
 8006850:	2083      	movs	r0, #131	; 0x83
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006852:	704b      	strb	r3, [r1, #1]
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 8006854:	f7ff ffa6 	bl	80067a4 <SX126xWriteCommand>
    Sx_Board_SetLedTx(true);
 8006858:	2001      	movs	r0, #1
 800685a:	f7fc fd96 	bl	800338a <SX126x_RADIO_BoardSetLedTx>
}
 800685e:	bd07      	pop	{r0, r1, r2, pc}
 8006860:	20000154 	.word	0x20000154

08006864 <SX126xSetRx>:
{
 8006864:	b507      	push	{r0, r1, r2, lr}
    OperatingMode = mode;
 8006866:	2205      	movs	r2, #5
 8006868:	4b07      	ldr	r3, [pc, #28]	; (8006888 <SX126xSetRx+0x24>)
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800686a:	a901      	add	r1, sp, #4
    OperatingMode = mode;
 800686c:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800686e:	0c03      	lsrs	r3, r0, #16
 8006870:	700b      	strb	r3, [r1, #0]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006872:	7088      	strb	r0, [r1, #2]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006874:	0a03      	lsrs	r3, r0, #8
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 8006876:	3a02      	subs	r2, #2
 8006878:	2082      	movs	r0, #130	; 0x82
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800687a:	704b      	strb	r3, [r1, #1]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 800687c:	f7ff ff92 	bl	80067a4 <SX126xWriteCommand>
    Sx_Board_SetLedRx(true);
 8006880:	2001      	movs	r0, #1
 8006882:	f7fc fd83 	bl	800338c <SX126x_RADIO_BoardSetLedRx>
}
 8006886:	bd07      	pop	{r0, r1, r2, pc}
 8006888:	20000154 	.word	0x20000154

0800688c <SX126xSetRxDutyCycle>:
{
 800688c:	b507      	push	{r0, r1, r2, lr}
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800688e:	466a      	mov	r2, sp
 8006890:	0c03      	lsrs	r3, r0, #16
 8006892:	7013      	strb	r3, [r2, #0]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8006894:	0a03      	lsrs	r3, r0, #8
 8006896:	7053      	strb	r3, [r2, #1]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8006898:	0c0b      	lsrs	r3, r1, #16
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800689a:	ba49      	rev16	r1, r1
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800689c:	7090      	strb	r0, [r2, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800689e:	70d3      	strb	r3, [r2, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80068a0:	8091      	strh	r1, [r2, #4]
    SX126xWriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80068a2:	2094      	movs	r0, #148	; 0x94
 80068a4:	2206      	movs	r2, #6
 80068a6:	4669      	mov	r1, sp
 80068a8:	f7ff ff7c 	bl	80067a4 <SX126xWriteCommand>
    OperatingMode = mode;
 80068ac:	2206      	movs	r2, #6
 80068ae:	4b01      	ldr	r3, [pc, #4]	; (80068b4 <SX126xSetRxDutyCycle+0x28>)
 80068b0:	701a      	strb	r2, [r3, #0]
}
 80068b2:	bd07      	pop	{r0, r1, r2, pc}
 80068b4:	20000154 	.word	0x20000154

080068b8 <SX126xSetCad>:
    SX126xWriteCommand( RADIO_SET_CAD, 0, 0 );
 80068b8:	2200      	movs	r2, #0
{
 80068ba:	b510      	push	{r4, lr}
    SX126xWriteCommand( RADIO_SET_CAD, 0, 0 );
 80068bc:	0011      	movs	r1, r2
 80068be:	20c5      	movs	r0, #197	; 0xc5
 80068c0:	f7ff ff70 	bl	80067a4 <SX126xWriteCommand>
    OperatingMode = mode;
 80068c4:	2207      	movs	r2, #7
 80068c6:	4b01      	ldr	r3, [pc, #4]	; (80068cc <SX126xSetCad+0x14>)
 80068c8:	701a      	strb	r2, [r3, #0]
}
 80068ca:	bd10      	pop	{r4, pc}
 80068cc:	20000154 	.word	0x20000154

080068d0 <SX126xSetTxContinuousWave>:
    SX126xWriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80068d0:	2200      	movs	r2, #0
{
 80068d2:	b510      	push	{r4, lr}
    SX126xWriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80068d4:	0011      	movs	r1, r2
 80068d6:	20d1      	movs	r0, #209	; 0xd1
 80068d8:	f7ff ff64 	bl	80067a4 <SX126xWriteCommand>
    OperatingMode = mode;
 80068dc:	2204      	movs	r2, #4
 80068de:	4b01      	ldr	r3, [pc, #4]	; (80068e4 <SX126xSetTxContinuousWave+0x14>)
 80068e0:	701a      	strb	r2, [r3, #0]
}
 80068e2:	bd10      	pop	{r4, pc}
 80068e4:	20000154 	.word	0x20000154

080068e8 <SX126xSetStopRxTimerOnPreambleDetect>:
{
 80068e8:	b507      	push	{r0, r1, r2, lr}
 80068ea:	466b      	mov	r3, sp
    SX126xWriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80068ec:	2201      	movs	r2, #1
{
 80068ee:	1dd9      	adds	r1, r3, #7
 80068f0:	7008      	strb	r0, [r1, #0]
    SX126xWriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80068f2:	209f      	movs	r0, #159	; 0x9f
 80068f4:	f7ff ff56 	bl	80067a4 <SX126xWriteCommand>
}
 80068f8:	bd07      	pop	{r0, r1, r2, pc}

080068fa <SX126xSetRegulatorMode>:
{
 80068fa:	b507      	push	{r0, r1, r2, lr}
 80068fc:	466b      	mov	r3, sp
    SX126xWriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80068fe:	2201      	movs	r2, #1
{
 8006900:	1dd9      	adds	r1, r3, #7
 8006902:	7008      	strb	r0, [r1, #0]
    SX126xWriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8006904:	2096      	movs	r0, #150	; 0x96
 8006906:	f7ff ff4d 	bl	80067a4 <SX126xWriteCommand>
}
 800690a:	bd07      	pop	{r0, r1, r2, pc}

0800690c <SX126xCalibrate>:
{
 800690c:	b507      	push	{r0, r1, r2, lr}
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800690e:	466a      	mov	r2, sp
{
 8006910:	1c03      	adds	r3, r0, #0
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8006912:	2060      	movs	r0, #96	; 0x60
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8006914:	1dd1      	adds	r1, r2, #7
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8006916:	07da      	lsls	r2, r3, #31
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8006918:	4018      	ands	r0, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800691a:	0fd2      	lsrs	r2, r2, #31
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800691c:	4310      	orrs	r0, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800691e:	2210      	movs	r2, #16
 8006920:	401a      	ands	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8006922:	4310      	orrs	r0, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8006924:	2208      	movs	r2, #8
 8006926:	401a      	ands	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8006928:	4310      	orrs	r0, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800692a:	2204      	movs	r2, #4
 800692c:	401a      	ands	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800692e:	4310      	orrs	r0, r2
 8006930:	2202      	movs	r2, #2
 8006932:	4013      	ands	r3, r2
 8006934:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8006936:	7008      	strb	r0, [r1, #0]
    SX126xWriteCommand( RADIO_CALIBRATE, &value, 1 );
 8006938:	3a01      	subs	r2, #1
 800693a:	2089      	movs	r0, #137	; 0x89
 800693c:	f7ff ff32 	bl	80067a4 <SX126xWriteCommand>
}
 8006940:	bd07      	pop	{r0, r1, r2, pc}
	...

08006944 <SX126xCalibrateImage>:
{
 8006944:	b507      	push	{r0, r1, r2, lr}
    if( freq > 900000000 )
 8006946:	4b0f      	ldr	r3, [pc, #60]	; (8006984 <SX126xCalibrateImage+0x40>)
 8006948:	a901      	add	r1, sp, #4
 800694a:	4298      	cmp	r0, r3
 800694c:	d906      	bls.n	800695c <SX126xCalibrateImage+0x18>
        calFreq[0] = 0xE1;
 800694e:	4b0e      	ldr	r3, [pc, #56]	; (8006988 <SX126xCalibrateImage+0x44>)
        calFreq[0] = 0x6B;
 8006950:	800b      	strh	r3, [r1, #0]
    SX126xWriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8006952:	2202      	movs	r2, #2
 8006954:	2098      	movs	r0, #152	; 0x98
 8006956:	f7ff ff25 	bl	80067a4 <SX126xWriteCommand>
}
 800695a:	bd07      	pop	{r0, r1, r2, pc}
    else if( freq > 850000000 )
 800695c:	4b0b      	ldr	r3, [pc, #44]	; (800698c <SX126xCalibrateImage+0x48>)
 800695e:	4298      	cmp	r0, r3
 8006960:	d901      	bls.n	8006966 <SX126xCalibrateImage+0x22>
        calFreq[0] = 0xD7;
 8006962:	4b0b      	ldr	r3, [pc, #44]	; (8006990 <SX126xCalibrateImage+0x4c>)
 8006964:	e7f4      	b.n	8006950 <SX126xCalibrateImage+0xc>
    else if( freq > 770000000 )
 8006966:	4b0b      	ldr	r3, [pc, #44]	; (8006994 <SX126xCalibrateImage+0x50>)
 8006968:	4298      	cmp	r0, r3
 800696a:	d901      	bls.n	8006970 <SX126xCalibrateImage+0x2c>
        calFreq[0] = 0xC1;
 800696c:	4b0a      	ldr	r3, [pc, #40]	; (8006998 <SX126xCalibrateImage+0x54>)
 800696e:	e7ef      	b.n	8006950 <SX126xCalibrateImage+0xc>
    else if( freq > 460000000 )
 8006970:	4b0a      	ldr	r3, [pc, #40]	; (800699c <SX126xCalibrateImage+0x58>)
 8006972:	4298      	cmp	r0, r3
 8006974:	d901      	bls.n	800697a <SX126xCalibrateImage+0x36>
        calFreq[0] = 0x75;
 8006976:	4b0a      	ldr	r3, [pc, #40]	; (80069a0 <SX126xCalibrateImage+0x5c>)
 8006978:	e7ea      	b.n	8006950 <SX126xCalibrateImage+0xc>
    else if( freq > 425000000 )
 800697a:	4b0a      	ldr	r3, [pc, #40]	; (80069a4 <SX126xCalibrateImage+0x60>)
 800697c:	4298      	cmp	r0, r3
 800697e:	d9e8      	bls.n	8006952 <SX126xCalibrateImage+0xe>
        calFreq[0] = 0x6B;
 8006980:	4b09      	ldr	r3, [pc, #36]	; (80069a8 <SX126xCalibrateImage+0x64>)
 8006982:	e7e5      	b.n	8006950 <SX126xCalibrateImage+0xc>
 8006984:	35a4e900 	.word	0x35a4e900
 8006988:	ffffe9e1 	.word	0xffffe9e1
 800698c:	32a9f880 	.word	0x32a9f880
 8006990:	ffffdbd7 	.word	0xffffdbd7
 8006994:	2de54480 	.word	0x2de54480
 8006998:	ffffc5c1 	.word	0xffffc5c1
 800699c:	1b6b0b00 	.word	0x1b6b0b00
 80069a0:	ffff8175 	.word	0xffff8175
 80069a4:	1954fc40 	.word	0x1954fc40
 80069a8:	00006f6b 	.word	0x00006f6b

080069ac <SX126xSetPaConfig>:
{
 80069ac:	b513      	push	{r0, r1, r4, lr}
    buf[0] = paDutyCycle;
 80069ae:	ac01      	add	r4, sp, #4
 80069b0:	7020      	strb	r0, [r4, #0]
    buf[1] = hpMax;
 80069b2:	7061      	strb	r1, [r4, #1]
    buf[2] = deviceSel;
 80069b4:	70a2      	strb	r2, [r4, #2]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80069b6:	0021      	movs	r1, r4
 80069b8:	2204      	movs	r2, #4
 80069ba:	2095      	movs	r0, #149	; 0x95
    buf[3] = paLut;
 80069bc:	70e3      	strb	r3, [r4, #3]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80069be:	f7ff fef1 	bl	80067a4 <SX126xWriteCommand>
}
 80069c2:	bd13      	pop	{r0, r1, r4, pc}

080069c4 <SX126xSetDioIrqParams>:
{
 80069c4:	b513      	push	{r0, r1, r4, lr}
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80069c6:	466c      	mov	r4, sp
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80069c8:	ba52      	rev16	r2, r2
 80069ca:	80a2      	strh	r2, [r4, #4]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80069cc:	2208      	movs	r2, #8
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80069ce:	ba40      	rev16	r0, r0
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80069d0:	ba49      	rev16	r1, r1
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80069d2:	8020      	strh	r0, [r4, #0]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80069d4:	8061      	strh	r1, [r4, #2]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80069d6:	ba5b      	rev16	r3, r3
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80069d8:	4669      	mov	r1, sp
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80069da:	0010      	movs	r0, r2
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80069dc:	80e3      	strh	r3, [r4, #6]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80069de:	f7ff fee1 	bl	80067a4 <SX126xWriteCommand>
}
 80069e2:	bd13      	pop	{r0, r1, r4, pc}

080069e4 <SX126xSetDio2AsRfSwitchCtrl>:
{
 80069e4:	b507      	push	{r0, r1, r2, lr}
 80069e6:	466b      	mov	r3, sp
    SX126xWriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 80069e8:	2201      	movs	r2, #1
{
 80069ea:	1dd9      	adds	r1, r3, #7
 80069ec:	7008      	strb	r0, [r1, #0]
    SX126xWriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 80069ee:	209d      	movs	r0, #157	; 0x9d
 80069f0:	f7ff fed8 	bl	80067a4 <SX126xWriteCommand>
}
 80069f4:	bd07      	pop	{r0, r1, r2, pc}

080069f6 <SX126xSetDio3AsTcxoCtrl>:
{
 80069f6:	b507      	push	{r0, r1, r2, lr}
 80069f8:	000b      	movs	r3, r1
    buf[0] = tcxoVoltage & 0x07;
 80069fa:	2207      	movs	r2, #7
 80069fc:	a901      	add	r1, sp, #4
 80069fe:	4010      	ands	r0, r2
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006a00:	0c1a      	lsrs	r2, r3, #16
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006a02:	ba5b      	rev16	r3, r3
    buf[0] = tcxoVoltage & 0x07;
 8006a04:	7008      	strb	r0, [r1, #0]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006a06:	704a      	strb	r2, [r1, #1]
    SX126xWriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8006a08:	2097      	movs	r0, #151	; 0x97
 8006a0a:	2204      	movs	r2, #4
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006a0c:	804b      	strh	r3, [r1, #2]
    SX126xWriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8006a0e:	f7ff fec9 	bl	80067a4 <SX126xWriteCommand>
}
 8006a12:	bd07      	pop	{r0, r1, r2, pc}

08006a14 <SX126xInit>:
{
 8006a14:	b507      	push	{r0, r1, r2, lr}
 8006a16:	9001      	str	r0, [sp, #4]
    Sx_Board_Reset( );
 8006a18:	f7fc fc50 	bl	80032bc <SX126x_RADIO_Reset>
    Sx_Board_IoIrqInit( &dioIrq );
 8006a1c:	a801      	add	r0, sp, #4
 8006a1e:	f7fc fc33 	bl	8003288 <SX126x_RADIO_IoIrqInit>
    Sx_Board_WakeUp( );
 8006a22:	f7fc fcc7 	bl	80033b4 <SX126x_RADIO_WakeUp>
    SX126xSetStandby( STDBY_RC );
 8006a26:	2000      	movs	r0, #0
 8006a28:	f7ff fef6 	bl	8006818 <SX126xSetStandby>
    if (Sx_Board_IsTcxo()  == true )
 8006a2c:	f7fc fcab 	bl	8003386 <SX126x_RADIO_BoardIsTcxo>
 8006a30:	2800      	cmp	r0, #0
 8006a32:	d008      	beq.n	8006a46 <SX126xInit+0x32>
      SX126xSetDio3AsTcxoCtrl( TCXO_CTRL_1_7V, Sx_Board_GetWakeUpTime( ) << 6 ); // convert from ms to SX126x time base
 8006a34:	f7fc fc40 	bl	80032b8 <SX126x_RADIO_GetWakeUpTime>
 8006a38:	0181      	lsls	r1, r0, #6
 8006a3a:	2001      	movs	r0, #1
 8006a3c:	f7ff ffdb 	bl	80069f6 <SX126xSetDio3AsTcxoCtrl>
      SX126xCalibrate( calibParam );
 8006a40:	207f      	movs	r0, #127	; 0x7f
 8006a42:	f7ff ff63 	bl	800690c <SX126xCalibrate>
    SX126xSetDio2AsRfSwitchCtrl( true );
 8006a46:	2001      	movs	r0, #1
 8006a48:	f7ff ffcc 	bl	80069e4 <SX126xSetDio2AsRfSwitchCtrl>
    OperatingMode = mode;
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	4b01      	ldr	r3, [pc, #4]	; (8006a54 <SX126xInit+0x40>)
 8006a50:	701a      	strb	r2, [r3, #0]
}
 8006a52:	bd07      	pop	{r0, r1, r2, pc}
 8006a54:	20000154 	.word	0x20000154

08006a58 <SX126xSetRfFrequency>:
{
 8006a58:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ImageCalibrated == false )
 8006a5a:	4d0d      	ldr	r5, [pc, #52]	; (8006a90 <SX126xSetRfFrequency+0x38>)
{
 8006a5c:	0004      	movs	r4, r0
    if( ImageCalibrated == false )
 8006a5e:	78ab      	ldrb	r3, [r5, #2]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d103      	bne.n	8006a6c <SX126xSetRfFrequency+0x14>
        SX126xCalibrateImage( frequency );
 8006a64:	f7ff ff6e 	bl	8006944 <SX126xCalibrateImage>
        ImageCalibrated = true;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	70ab      	strb	r3, [r5, #2]
    freq = ( uint32_t )( ( double )frequency / ( double )FREQ_STEP );
 8006a6c:	0020      	movs	r0, r4
 8006a6e:	f7fa ff6f 	bl	8001950 <__aeabi_ui2d>
 8006a72:	4b08      	ldr	r3, [pc, #32]	; (8006a94 <SX126xSetRfFrequency+0x3c>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	f7f9 fe1f 	bl	80006b8 <__aeabi_ddiv>
 8006a7a:	f7f9 fd33 	bl	80004e4 <__aeabi_d2uiz>
 8006a7e:	ba00      	rev	r0, r0
    buf[0] = ( uint8_t )( ( freq >> 24 ) & 0xFF );
 8006a80:	9001      	str	r0, [sp, #4]
    SX126xWriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8006a82:	2204      	movs	r2, #4
 8006a84:	2086      	movs	r0, #134	; 0x86
 8006a86:	a901      	add	r1, sp, #4
 8006a88:	f7ff fe8c 	bl	80067a4 <SX126xWriteCommand>
}
 8006a8c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8006a8e:	46c0      	nop			; (mov r8, r8)
 8006a90:	20000154 	.word	0x20000154
 8006a94:	3fee8480 	.word	0x3fee8480

08006a98 <SX126xSetPacketType>:
{
 8006a98:	b507      	push	{r0, r1, r2, lr}
 8006a9a:	466b      	mov	r3, sp
 8006a9c:	1dd9      	adds	r1, r3, #7
    PacketType = packetType;
 8006a9e:	4b04      	ldr	r3, [pc, #16]	; (8006ab0 <SX126xSetPacketType+0x18>)
{
 8006aa0:	7008      	strb	r0, [r1, #0]
    PacketType = packetType;
 8006aa2:	7058      	strb	r0, [r3, #1]
    SX126xWriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	208a      	movs	r0, #138	; 0x8a
 8006aa8:	f7ff fe7c 	bl	80067a4 <SX126xWriteCommand>
}
 8006aac:	bd07      	pop	{r0, r1, r2, pc}
 8006aae:	46c0      	nop			; (mov r8, r8)
 8006ab0:	20000154 	.word	0x20000154

08006ab4 <SX126xSetModulationParams>:
{
 8006ab4:	b513      	push	{r0, r1, r4, lr}
 8006ab6:	0004      	movs	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8006ab8:	2208      	movs	r2, #8
 8006aba:	4668      	mov	r0, sp
 8006abc:	4920      	ldr	r1, [pc, #128]	; (8006b40 <SX126xSetModulationParams+0x8c>)
 8006abe:	f001 f875 	bl	8007bac <memcpy>
    if( PacketType != modulationParams->PacketType )
 8006ac2:	4b20      	ldr	r3, [pc, #128]	; (8006b44 <SX126xSetModulationParams+0x90>)
 8006ac4:	7820      	ldrb	r0, [r4, #0]
 8006ac6:	785b      	ldrb	r3, [r3, #1]
 8006ac8:	4283      	cmp	r3, r0
 8006aca:	d001      	beq.n	8006ad0 <SX126xSetModulationParams+0x1c>
        SX126xSetPacketType( modulationParams->PacketType );
 8006acc:	f7ff ffe4 	bl	8006a98 <SX126xSetPacketType>
    switch( modulationParams->PacketType )
 8006ad0:	7823      	ldrb	r3, [r4, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d002      	beq.n	8006adc <SX126xSetModulationParams+0x28>
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d02d      	beq.n	8006b36 <SX126xSetModulationParams+0x82>
}
 8006ada:	bd13      	pop	{r0, r1, r4, pc}
        tempVal = ( uint32_t )( 32 * ( ( double )XTAL_FREQ / ( double )modulationParams->Params.Gfsk.BitRate ) );
 8006adc:	6860      	ldr	r0, [r4, #4]
 8006ade:	f7fa ff37 	bl	8001950 <__aeabi_ui2d>
 8006ae2:	0002      	movs	r2, r0
 8006ae4:	000b      	movs	r3, r1
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	4917      	ldr	r1, [pc, #92]	; (8006b48 <SX126xSetModulationParams+0x94>)
 8006aea:	f7f9 fde5 	bl	80006b8 <__aeabi_ddiv>
 8006aee:	2200      	movs	r2, #0
 8006af0:	4b16      	ldr	r3, [pc, #88]	; (8006b4c <SX126xSetModulationParams+0x98>)
 8006af2:	f7fa f8c9 	bl	8000c88 <__aeabi_dmul>
 8006af6:	f7f9 fcf5 	bl	80004e4 <__aeabi_d2uiz>
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8006afa:	466a      	mov	r2, sp
 8006afc:	0c03      	lsrs	r3, r0, #16
 8006afe:	7013      	strb	r3, [r2, #0]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8006b00:	0a03      	lsrs	r3, r0, #8
        buf[2] = tempVal & 0xFF;
 8006b02:	7090      	strb	r0, [r2, #2]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8006b04:	7053      	strb	r3, [r2, #1]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8006b06:	7b23      	ldrb	r3, [r4, #12]
        tempVal = ( uint32_t )( ( double )modulationParams->Params.Gfsk.Fdev / ( double )FREQ_STEP );
 8006b08:	68a0      	ldr	r0, [r4, #8]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8006b0a:	70d3      	strb	r3, [r2, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8006b0c:	7b63      	ldrb	r3, [r4, #13]
 8006b0e:	7113      	strb	r3, [r2, #4]
        tempVal = ( uint32_t )( ( double )modulationParams->Params.Gfsk.Fdev / ( double )FREQ_STEP );
 8006b10:	f7fa ff1e 	bl	8001950 <__aeabi_ui2d>
 8006b14:	2200      	movs	r2, #0
 8006b16:	4b0e      	ldr	r3, [pc, #56]	; (8006b50 <SX126xSetModulationParams+0x9c>)
 8006b18:	f7f9 fdce 	bl	80006b8 <__aeabi_ddiv>
 8006b1c:	f7f9 fce2 	bl	80004e4 <__aeabi_d2uiz>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8006b20:	466a      	mov	r2, sp
 8006b22:	0c03      	lsrs	r3, r0, #16
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8006b24:	ba40      	rev16	r0, r0
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8006b26:	7153      	strb	r3, [r2, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8006b28:	80d0      	strh	r0, [r2, #6]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006b2a:	2208      	movs	r2, #8
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006b2c:	4669      	mov	r1, sp
 8006b2e:	208b      	movs	r0, #139	; 0x8b
 8006b30:	f7ff fe38 	bl	80067a4 <SX126xWriteCommand>
        break;
 8006b34:	e7d1      	b.n	8006ada <SX126xSetModulationParams+0x26>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8006b36:	6923      	ldr	r3, [r4, #16]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006b38:	2204      	movs	r2, #4
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	e7f6      	b.n	8006b2c <SX126xSetModulationParams+0x78>
 8006b3e:	46c0      	nop			; (mov r8, r8)
 8006b40:	08008d94 	.word	0x08008d94
 8006b44:	20000154 	.word	0x20000154
 8006b48:	417e8480 	.word	0x417e8480
 8006b4c:	40400000 	.word	0x40400000
 8006b50:	3fee8480 	.word	0x3fee8480

08006b54 <SX126xSetBufferBaseAddress>:
{
 8006b54:	b507      	push	{r0, r1, r2, lr}
    buf[0] = txBaseAddress;
 8006b56:	466b      	mov	r3, sp
    SX126xWriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8006b58:	2202      	movs	r2, #2
    buf[0] = txBaseAddress;
 8006b5a:	7118      	strb	r0, [r3, #4]
    buf[1] = rxBaseAddress;
 8006b5c:	7159      	strb	r1, [r3, #5]
    SX126xWriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8006b5e:	208f      	movs	r0, #143	; 0x8f
 8006b60:	a901      	add	r1, sp, #4
 8006b62:	f7ff fe1f 	bl	80067a4 <SX126xWriteCommand>
}
 8006b66:	bd07      	pop	{r0, r1, r2, pc}

08006b68 <SX126xClearIrqStatus>:
{
 8006b68:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 8006b6a:	2202      	movs	r2, #2
    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
 8006b6c:	a901      	add	r1, sp, #4
 8006b6e:	ba40      	rev16	r0, r0
 8006b70:	8008      	strh	r0, [r1, #0]
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 8006b72:	0010      	movs	r0, r2
 8006b74:	f7ff fe16 	bl	80067a4 <SX126xWriteCommand>
}
 8006b78:	bd07      	pop	{r0, r1, r2, pc}

08006b7a <SX126xReadCommand>:

uint8_t SX126xReadCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 8006b7a:	b570      	push	{r4, r5, r6, lr}
 8006b7c:	0006      	movs	r6, r0
 8006b7e:	000c      	movs	r4, r1
 8006b80:	0015      	movs	r5, r2
    uint8_t status = 0;

    SX126xCheckDeviceReady( );
 8006b82:	f7ff fdfb 	bl	800677c <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 8006b86:	2000      	movs	r0, #0
 8006b88:	f7fc fbe0 	bl	800334c <SX126x_RADIO_ChipSelect>

    Sx_Board_SendRecv(  ( uint8_t )command );
 8006b8c:	b2b0      	uxth	r0, r6
 8006b8e:	f7fc fc02 	bl	8003396 <SX126x_RADIO_SendRecv>
    status = Sx_Board_SendRecv(  0x00 );
 8006b92:	2000      	movs	r0, #0
 8006b94:	f7fc fbff 	bl	8003396 <SX126x_RADIO_SendRecv>
 8006b98:	1965      	adds	r5, r4, r5
 8006b9a:	b2c6      	uxtb	r6, r0
    for( uint16_t i = 0; i < size; i++ )
 8006b9c:	42ac      	cmp	r4, r5
 8006b9e:	d106      	bne.n	8006bae <SX126xReadCommand+0x34>
    {
        buffer[i] = Sx_Board_SendRecv(  0 );
    }

    Sx_Board_ChipSelect( 1 );
 8006ba0:	2001      	movs	r0, #1
 8006ba2:	f7fc fbd3 	bl	800334c <SX126x_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
 8006ba6:	f7fc fbc7 	bl	8003338 <SX126x_RADIO_WaitOnBusy>

    return status;
}
 8006baa:	0030      	movs	r0, r6
 8006bac:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv(  0 );
 8006bae:	2000      	movs	r0, #0
 8006bb0:	f7fc fbf1 	bl	8003396 <SX126x_RADIO_SendRecv>
 8006bb4:	7020      	strb	r0, [r4, #0]
    for( uint16_t i = 0; i < size; i++ )
 8006bb6:	3401      	adds	r4, #1
 8006bb8:	e7f0      	b.n	8006b9c <SX126xReadCommand+0x22>

08006bba <SX126xGetIrqStatus>:
{
 8006bba:	b507      	push	{r0, r1, r2, lr}
    SX126xReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	2012      	movs	r0, #18
 8006bc0:	a901      	add	r1, sp, #4
 8006bc2:	f7ff ffda 	bl	8006b7a <SX126xReadCommand>
    return ( irqStatus[0] << 8 ) | irqStatus[1];
 8006bc6:	466b      	mov	r3, sp
 8006bc8:	466a      	mov	r2, sp
 8006bca:	791b      	ldrb	r3, [r3, #4]
 8006bcc:	7950      	ldrb	r0, [r2, #5]
 8006bce:	021b      	lsls	r3, r3, #8
 8006bd0:	4318      	orrs	r0, r3
}
 8006bd2:	bd0e      	pop	{r1, r2, r3, pc}

08006bd4 <SX126xGetRssiInst>:
{
 8006bd4:	b513      	push	{r0, r1, r4, lr}
    SX126xReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8006bd6:	ac01      	add	r4, sp, #4
 8006bd8:	2201      	movs	r2, #1
 8006bda:	0021      	movs	r1, r4
 8006bdc:	2015      	movs	r0, #21
 8006bde:	f7ff ffcc 	bl	8006b7a <SX126xReadCommand>
    rssi = -buf[0] >> 1;
 8006be2:	7820      	ldrb	r0, [r4, #0]
 8006be4:	4240      	negs	r0, r0
 8006be6:	1040      	asrs	r0, r0, #1
}
 8006be8:	bd16      	pop	{r1, r2, r4, pc}
	...

08006bec <SX126xGetPacketStatus>:
{
 8006bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bee:	0004      	movs	r4, r0
    SX126xReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8006bf0:	ad01      	add	r5, sp, #4
 8006bf2:	2203      	movs	r2, #3
 8006bf4:	0029      	movs	r1, r5
 8006bf6:	2014      	movs	r0, #20
 8006bf8:	f7ff ffbf 	bl	8006b7a <SX126xReadCommand>
    return PacketType;
 8006bfc:	4a15      	ldr	r2, [pc, #84]	; (8006c54 <SX126xGetPacketStatus+0x68>)
 8006bfe:	7851      	ldrb	r1, [r2, #1]
    pktStatus->packetType = SX126xGetPacketType( );
 8006c00:	7021      	strb	r1, [r4, #0]
    switch( pktStatus->packetType )
 8006c02:	2900      	cmp	r1, #0
 8006c04:	d009      	beq.n	8006c1a <SX126xGetPacketStatus+0x2e>
 8006c06:	2901      	cmp	r1, #1
 8006c08:	d013      	beq.n	8006c32 <SX126xGetPacketStatus+0x46>
            memset( pktStatus, 0, sizeof( PacketStatus_t ) );
 8006c0a:	2214      	movs	r2, #20
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	0020      	movs	r0, r4
 8006c10:	f000 ffd5 	bl	8007bbe <memset>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8006c14:	230f      	movs	r3, #15
 8006c16:	7023      	strb	r3, [r4, #0]
}
 8006c18:	e00a      	b.n	8006c30 <SX126xGetPacketStatus+0x44>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8006c1a:	782b      	ldrb	r3, [r5, #0]
            pktStatus->Params.Gfsk.FreqError = 0;
 8006c1c:	60a1      	str	r1, [r4, #8]
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8006c1e:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8006c20:	786b      	ldrb	r3, [r5, #1]
 8006c22:	425b      	negs	r3, r3
 8006c24:	105b      	asrs	r3, r3, #1
 8006c26:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8006c28:	78ab      	ldrb	r3, [r5, #2]
 8006c2a:	425b      	negs	r3, r3
 8006c2c:	105b      	asrs	r3, r3, #1
 8006c2e:	7163      	strb	r3, [r4, #5]
}
 8006c30:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8006c32:	782b      	ldrb	r3, [r5, #0]
 8006c34:	425b      	negs	r3, r3
 8006c36:	105b      	asrs	r3, r3, #1
 8006c38:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	56eb      	ldrsb	r3, [r5, r3]
 8006c3e:	3302      	adds	r3, #2
 8006c40:	109b      	asrs	r3, r3, #2
 8006c42:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8006c44:	78ab      	ldrb	r3, [r5, #2]
 8006c46:	425b      	negs	r3, r3
 8006c48:	105b      	asrs	r3, r3, #1
 8006c4a:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8006c4c:	6853      	ldr	r3, [r2, #4]
 8006c4e:	6123      	str	r3, [r4, #16]
            break;
 8006c50:	e7ee      	b.n	8006c30 <SX126xGetPacketStatus+0x44>
 8006c52:	46c0      	nop			; (mov r8, r8)
 8006c54:	20000154 	.word	0x20000154

08006c58 <SX126xWriteRegisters>:

void SX126xWriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8006c58:	b570      	push	{r4, r5, r6, lr}
 8006c5a:	0005      	movs	r5, r0
 8006c5c:	000c      	movs	r4, r1
 8006c5e:	0016      	movs	r6, r2
    SX126xCheckDeviceReady( );
 8006c60:	f7ff fd8c 	bl	800677c <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 8006c64:	2000      	movs	r0, #0
 8006c66:	f7fc fb71 	bl	800334c <SX126x_RADIO_ChipSelect>
    
    Sx_Board_SendRecv(  RADIO_WRITE_REGISTER );
 8006c6a:	200d      	movs	r0, #13
 8006c6c:	f7fc fb93 	bl	8003396 <SX126x_RADIO_SendRecv>
    Sx_Board_SendRecv(  ( address & 0xFF00 ) >> 8 );
 8006c70:	0a28      	lsrs	r0, r5, #8
 8006c72:	f7fc fb90 	bl	8003396 <SX126x_RADIO_SendRecv>
    Sx_Board_SendRecv(  address & 0x00FF );
 8006c76:	b2e8      	uxtb	r0, r5
 8006c78:	f7fc fb8d 	bl	8003396 <SX126x_RADIO_SendRecv>
    
    for( uint16_t i = 0; i < size; i++ )
 8006c7c:	19a6      	adds	r6, r4, r6
 8006c7e:	42b4      	cmp	r4, r6
 8006c80:	d105      	bne.n	8006c8e <SX126xWriteRegisters+0x36>
    {
        Sx_Board_SendRecv(  buffer[i] );
    }

    Sx_Board_ChipSelect( 1 );
 8006c82:	2001      	movs	r0, #1
 8006c84:	f7fc fb62 	bl	800334c <SX126x_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
 8006c88:	f7fc fb56 	bl	8003338 <SX126x_RADIO_WaitOnBusy>
}
 8006c8c:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv(  buffer[i] );
 8006c8e:	7820      	ldrb	r0, [r4, #0]
 8006c90:	f7fc fb81 	bl	8003396 <SX126x_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 8006c94:	3401      	adds	r4, #1
 8006c96:	e7f2      	b.n	8006c7e <SX126xWriteRegisters+0x26>

08006c98 <SX126xSetSyncWord>:
{
 8006c98:	0001      	movs	r1, r0
    SX126xWriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8006c9a:	20d8      	movs	r0, #216	; 0xd8
{
 8006c9c:	b510      	push	{r4, lr}
    SX126xWriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8006c9e:	00c0      	lsls	r0, r0, #3
 8006ca0:	2208      	movs	r2, #8
 8006ca2:	f7ff ffd9 	bl	8006c58 <SX126xWriteRegisters>
}
 8006ca6:	2000      	movs	r0, #0
 8006ca8:	bd10      	pop	{r4, pc}
	...

08006cac <SX126xSetCrcSeed>:
{
 8006cac:	b507      	push	{r0, r1, r2, lr}
    return PacketType;
 8006cae:	4b06      	ldr	r3, [pc, #24]	; (8006cc8 <SX126xSetCrcSeed+0x1c>)
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8006cb0:	a901      	add	r1, sp, #4
    switch( SX126xGetPacketType( ) )
 8006cb2:	785b      	ldrb	r3, [r3, #1]
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8006cb4:	ba40      	rev16	r0, r0
 8006cb6:	8008      	strh	r0, [r1, #0]
    switch( SX126xGetPacketType( ) )
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d103      	bne.n	8006cc4 <SX126xSetCrcSeed+0x18>
            SX126xWriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8006cbc:	2202      	movs	r2, #2
 8006cbe:	4803      	ldr	r0, [pc, #12]	; (8006ccc <SX126xSetCrcSeed+0x20>)
 8006cc0:	f7ff ffca 	bl	8006c58 <SX126xWriteRegisters>
}
 8006cc4:	bd07      	pop	{r0, r1, r2, pc}
 8006cc6:	46c0      	nop			; (mov r8, r8)
 8006cc8:	20000154 	.word	0x20000154
 8006ccc:	000006bc 	.word	0x000006bc

08006cd0 <SX126xSetCrcPolynomial>:
{
 8006cd0:	b507      	push	{r0, r1, r2, lr}
    return PacketType;
 8006cd2:	4b06      	ldr	r3, [pc, #24]	; (8006cec <SX126xSetCrcPolynomial+0x1c>)
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8006cd4:	a901      	add	r1, sp, #4
    switch( SX126xGetPacketType( ) )
 8006cd6:	785b      	ldrb	r3, [r3, #1]
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8006cd8:	ba40      	rev16	r0, r0
 8006cda:	8008      	strh	r0, [r1, #0]
    switch( SX126xGetPacketType( ) )
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d103      	bne.n	8006ce8 <SX126xSetCrcPolynomial+0x18>
            SX126xWriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	4803      	ldr	r0, [pc, #12]	; (8006cf0 <SX126xSetCrcPolynomial+0x20>)
 8006ce4:	f7ff ffb8 	bl	8006c58 <SX126xWriteRegisters>
}
 8006ce8:	bd07      	pop	{r0, r1, r2, pc}
 8006cea:	46c0      	nop			; (mov r8, r8)
 8006cec:	20000154 	.word	0x20000154
 8006cf0:	000006be 	.word	0x000006be

08006cf4 <SX126xSetPacketParams>:
{
 8006cf4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006cf6:	0004      	movs	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8006cf8:	4923      	ldr	r1, [pc, #140]	; (8006d88 <SX126xSetPacketParams+0x94>)
 8006cfa:	ad01      	add	r5, sp, #4
 8006cfc:	2209      	movs	r2, #9
 8006cfe:	0028      	movs	r0, r5
 8006d00:	3108      	adds	r1, #8
 8006d02:	f000 ff53 	bl	8007bac <memcpy>
    if( PacketType != packetParams->PacketType )
 8006d06:	4e21      	ldr	r6, [pc, #132]	; (8006d8c <SX126xSetPacketParams+0x98>)
 8006d08:	7820      	ldrb	r0, [r4, #0]
 8006d0a:	7873      	ldrb	r3, [r6, #1]
 8006d0c:	4283      	cmp	r3, r0
 8006d0e:	d001      	beq.n	8006d14 <SX126xSetPacketParams+0x20>
        SX126xSetPacketType( packetParams->PacketType );
 8006d10:	f7ff fec2 	bl	8006a98 <SX126xSetPacketType>
    switch( packetParams->PacketType )
 8006d14:	7823      	ldrb	r3, [r4, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d002      	beq.n	8006d20 <SX126xSetPacketParams+0x2c>
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d027      	beq.n	8006d6e <SX126xSetPacketParams+0x7a>
}
 8006d1e:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8006d20:	7a63      	ldrb	r3, [r4, #9]
 8006d22:	2bf1      	cmp	r3, #241	; 0xf1
 8006d24:	d119      	bne.n	8006d5a <SX126xSetPacketParams+0x66>
            SX126xSetCrcSeed( CRC_IBM_SEED );
 8006d26:	481a      	ldr	r0, [pc, #104]	; (8006d90 <SX126xSetPacketParams+0x9c>)
 8006d28:	f7ff ffc0 	bl	8006cac <SX126xSetCrcSeed>
            SX126xSetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8006d2c:	4819      	ldr	r0, [pc, #100]	; (8006d94 <SX126xSetPacketParams+0xa0>)
 8006d2e:	f7ff ffcf 	bl	8006cd0 <SX126xSetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8006d32:	2302      	movs	r3, #2
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8006d34:	8862      	ldrh	r2, [r4, #2]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8006d36:	88a1      	ldrh	r1, [r4, #4]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8006d38:	ba52      	rev16	r2, r2
 8006d3a:	802a      	strh	r2, [r5, #0]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8006d3c:	7a22      	ldrb	r2, [r4, #8]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8006d3e:	8069      	strh	r1, [r5, #2]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8006d40:	71aa      	strb	r2, [r5, #6]
        n = 9;
 8006d42:	2209      	movs	r2, #9
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8006d44:	88e1      	ldrh	r1, [r4, #6]
        buf[7] = crcVal;
 8006d46:	71eb      	strb	r3, [r5, #7]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8006d48:	7aa3      	ldrb	r3, [r4, #10]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8006d4a:	80a9      	strh	r1, [r5, #4]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8006d4c:	722b      	strb	r3, [r5, #8]
    SX126xWriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8006d4e:	0029      	movs	r1, r5
 8006d50:	208c      	movs	r0, #140	; 0x8c
 8006d52:	b292      	uxth	r2, r2
 8006d54:	f7ff fd26 	bl	80067a4 <SX126xWriteCommand>
 8006d58:	e7e1      	b.n	8006d1e <SX126xSetPacketParams+0x2a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8006d5a:	2bf2      	cmp	r3, #242	; 0xf2
 8006d5c:	d1ea      	bne.n	8006d34 <SX126xSetPacketParams+0x40>
            SX126xSetCrcSeed( CRC_CCITT_SEED );
 8006d5e:	480e      	ldr	r0, [pc, #56]	; (8006d98 <SX126xSetPacketParams+0xa4>)
 8006d60:	f7ff ffa4 	bl	8006cac <SX126xSetCrcSeed>
            SX126xSetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8006d64:	480d      	ldr	r0, [pc, #52]	; (8006d9c <SX126xSetPacketParams+0xa8>)
 8006d66:	f7ff ffb3 	bl	8006cd0 <SX126xSetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8006d6a:	2306      	movs	r3, #6
 8006d6c:	e7e2      	b.n	8006d34 <SX126xSetPacketParams+0x40>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8006d6e:	89a3      	ldrh	r3, [r4, #12]
        n = 6;
 8006d70:	2206      	movs	r2, #6
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8006d72:	ba5b      	rev16	r3, r3
 8006d74:	802b      	strh	r3, [r5, #0]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8006d76:	7ba3      	ldrb	r3, [r4, #14]
 8006d78:	7233      	strb	r3, [r6, #8]
 8006d7a:	70ab      	strb	r3, [r5, #2]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8006d7c:	7be3      	ldrb	r3, [r4, #15]
 8006d7e:	70eb      	strb	r3, [r5, #3]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8006d80:	8a23      	ldrh	r3, [r4, #16]
 8006d82:	80ab      	strh	r3, [r5, #4]
        break;
 8006d84:	e7e3      	b.n	8006d4e <SX126xSetPacketParams+0x5a>
 8006d86:	46c0      	nop			; (mov r8, r8)
 8006d88:	08008d94 	.word	0x08008d94
 8006d8c:	20000154 	.word	0x20000154
 8006d90:	0000ffff 	.word	0x0000ffff
 8006d94:	00008005 	.word	0x00008005
 8006d98:	00001d0f 	.word	0x00001d0f
 8006d9c:	00001021 	.word	0x00001021

08006da0 <SX126xWriteRegister>:

void SX126xWriteRegister( uint16_t address, uint8_t value )
{
 8006da0:	b507      	push	{r0, r1, r2, lr}
 8006da2:	466b      	mov	r3, sp
 8006da4:	71d9      	strb	r1, [r3, #7]
 8006da6:	3307      	adds	r3, #7
    SX126xWriteRegisters( address, &value, 1 );
 8006da8:	2201      	movs	r2, #1
 8006daa:	0019      	movs	r1, r3
 8006dac:	f7ff ff54 	bl	8006c58 <SX126xWriteRegisters>
}
 8006db0:	bd07      	pop	{r0, r1, r2, pc}
	...

08006db4 <SX126xSetRxBoosted>:
{
 8006db4:	b513      	push	{r0, r1, r4, lr}
    OperatingMode = mode;
 8006db6:	2205      	movs	r2, #5
{
 8006db8:	0004      	movs	r4, r0
    OperatingMode = mode;
 8006dba:	4b08      	ldr	r3, [pc, #32]	; (8006ddc <SX126xSetRxBoosted+0x28>)
    SX126xWriteRegister( REG_RX_GAIN, 0x96 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensivity
 8006dbc:	2196      	movs	r1, #150	; 0x96
 8006dbe:	4808      	ldr	r0, [pc, #32]	; (8006de0 <SX126xSetRxBoosted+0x2c>)
    OperatingMode = mode;
 8006dc0:	701a      	strb	r2, [r3, #0]
    SX126xWriteRegister( REG_RX_GAIN, 0x96 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensivity
 8006dc2:	f7ff ffed 	bl	8006da0 <SX126xWriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006dc6:	a901      	add	r1, sp, #4
 8006dc8:	0c23      	lsrs	r3, r4, #16
 8006dca:	700b      	strb	r3, [r1, #0]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 8006dcc:	2203      	movs	r2, #3
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006dce:	0a23      	lsrs	r3, r4, #8
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 8006dd0:	2082      	movs	r0, #130	; 0x82
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006dd2:	704b      	strb	r3, [r1, #1]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006dd4:	708c      	strb	r4, [r1, #2]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 8006dd6:	f7ff fce5 	bl	80067a4 <SX126xWriteCommand>
}
 8006dda:	bd13      	pop	{r0, r1, r4, pc}
 8006ddc:	20000154 	.word	0x20000154
 8006de0:	000008ac 	.word	0x000008ac

08006de4 <SX126xSetLoRaSymbNumTimeout>:
{
 8006de4:	b507      	push	{r0, r1, r2, lr}
 8006de6:	466b      	mov	r3, sp
    SX126xWriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8006de8:	2201      	movs	r2, #1
{
 8006dea:	71d8      	strb	r0, [r3, #7]
    SX126xWriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8006dec:	1dd9      	adds	r1, r3, #7
 8006dee:	20a0      	movs	r0, #160	; 0xa0
 8006df0:	f7ff fcd8 	bl	80067a4 <SX126xWriteCommand>
    if( symbNum >= 64 )
 8006df4:	466b      	mov	r3, sp
 8006df6:	79d9      	ldrb	r1, [r3, #7]
 8006df8:	293f      	cmp	r1, #63	; 0x3f
 8006dfa:	d906      	bls.n	8006e0a <SX126xSetLoRaSymbNumTimeout+0x26>
            mant >>= 2;
 8006dfc:	08c9      	lsrs	r1, r1, #3
        reg = exp + ( mant << 3 );
 8006dfe:	00c9      	lsls	r1, r1, #3
 8006e00:	3101      	adds	r1, #1
        SX126xWriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8006e02:	4802      	ldr	r0, [pc, #8]	; (8006e0c <SX126xSetLoRaSymbNumTimeout+0x28>)
 8006e04:	b2c9      	uxtb	r1, r1
 8006e06:	f7ff ffcb 	bl	8006da0 <SX126xWriteRegister>
}
 8006e0a:	bd07      	pop	{r0, r1, r2, pc}
 8006e0c:	00000706 	.word	0x00000706

08006e10 <SX126xReadRegisters>:

void SX126xReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8006e10:	b570      	push	{r4, r5, r6, lr}
 8006e12:	0005      	movs	r5, r0
 8006e14:	000c      	movs	r4, r1
 8006e16:	0016      	movs	r6, r2
    SX126xCheckDeviceReady( );
 8006e18:	f7ff fcb0 	bl	800677c <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	f7fc fa95 	bl	800334c <SX126x_RADIO_ChipSelect>

    Sx_Board_SendRecv(  RADIO_READ_REGISTER );
 8006e22:	201d      	movs	r0, #29
 8006e24:	f7fc fab7 	bl	8003396 <SX126x_RADIO_SendRecv>
    Sx_Board_SendRecv(  ( address & 0xFF00 ) >> 8 );
 8006e28:	0a28      	lsrs	r0, r5, #8
 8006e2a:	f7fc fab4 	bl	8003396 <SX126x_RADIO_SendRecv>
    Sx_Board_SendRecv(  address & 0x00FF );
 8006e2e:	b2e8      	uxtb	r0, r5
 8006e30:	f7fc fab1 	bl	8003396 <SX126x_RADIO_SendRecv>
    Sx_Board_SendRecv(  0 );
 8006e34:	2000      	movs	r0, #0
 8006e36:	f7fc faae 	bl	8003396 <SX126x_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 8006e3a:	19a6      	adds	r6, r4, r6
 8006e3c:	42b4      	cmp	r4, r6
 8006e3e:	d105      	bne.n	8006e4c <SX126xReadRegisters+0x3c>
    {
        buffer[i] = Sx_Board_SendRecv(  0 );
    }
    Sx_Board_ChipSelect( 1 );
 8006e40:	2001      	movs	r0, #1
 8006e42:	f7fc fa83 	bl	800334c <SX126x_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
 8006e46:	f7fc fa77 	bl	8003338 <SX126x_RADIO_WaitOnBusy>
}
 8006e4a:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv(  0 );
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	f7fc faa2 	bl	8003396 <SX126x_RADIO_SendRecv>
 8006e52:	7020      	strb	r0, [r4, #0]
    for( uint16_t i = 0; i < size; i++ )
 8006e54:	3401      	adds	r4, #1
 8006e56:	e7f1      	b.n	8006e3c <SX126xReadRegisters+0x2c>

08006e58 <SX126xReadRegister>:

uint8_t SX126xReadRegister( uint16_t address )
{
 8006e58:	b513      	push	{r0, r1, r4, lr}
    uint8_t data;
    SX126xReadRegisters( address, &data, 1 );
 8006e5a:	466b      	mov	r3, sp
 8006e5c:	1ddc      	adds	r4, r3, #7
 8006e5e:	2201      	movs	r2, #1
 8006e60:	0021      	movs	r1, r4
 8006e62:	f7ff ffd5 	bl	8006e10 <SX126xReadRegisters>
    return data;
 8006e66:	7820      	ldrb	r0, [r4, #0]
}
 8006e68:	bd16      	pop	{r1, r2, r4, pc}
	...

08006e6c <SX126xSetWhiteningSeed>:
{
 8006e6c:	b510      	push	{r4, lr}
    return PacketType;
 8006e6e:	4b0c      	ldr	r3, [pc, #48]	; (8006ea0 <SX126xSetWhiteningSeed+0x34>)
{
 8006e70:	0004      	movs	r4, r0
    switch( SX126xGetPacketType( ) )
 8006e72:	785b      	ldrb	r3, [r3, #1]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d111      	bne.n	8006e9c <SX126xSetWhiteningSeed+0x30>
            regValue = SX126xReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8006e78:	20d7      	movs	r0, #215	; 0xd7
 8006e7a:	00c0      	lsls	r0, r0, #3
 8006e7c:	f7ff ffec 	bl	8006e58 <SX126xReadRegister>
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8006e80:	2301      	movs	r3, #1
 8006e82:	0a21      	lsrs	r1, r4, #8
            regValue = SX126xReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8006e84:	4398      	bics	r0, r3
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8006e86:	4019      	ands	r1, r3
 8006e88:	4301      	orrs	r1, r0
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8006e8a:	20d7      	movs	r0, #215	; 0xd7
 8006e8c:	b2c9      	uxtb	r1, r1
 8006e8e:	00c0      	lsls	r0, r0, #3
 8006e90:	f7ff ff86 	bl	8006da0 <SX126xWriteRegister>
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, ( uint8_t )seed );
 8006e94:	4803      	ldr	r0, [pc, #12]	; (8006ea4 <SX126xSetWhiteningSeed+0x38>)
 8006e96:	b2e1      	uxtb	r1, r4
 8006e98:	f7ff ff82 	bl	8006da0 <SX126xWriteRegister>
}
 8006e9c:	bd10      	pop	{r4, pc}
 8006e9e:	46c0      	nop			; (mov r8, r8)
 8006ea0:	20000154 	.word	0x20000154
 8006ea4:	000006b9 	.word	0x000006b9

08006ea8 <SX126xGetRandom>:
{
 8006ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t number = 0;
 8006eaa:	2500      	movs	r5, #0
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 8006eac:	4f17      	ldr	r7, [pc, #92]	; (8006f0c <SX126xGetRandom+0x64>)
{
 8006eae:	b085      	sub	sp, #20
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 8006eb0:	0038      	movs	r0, r7
    uint32_t number = 0;
 8006eb2:	9503      	str	r5, [sp, #12]
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 8006eb4:	f7ff ffd0 	bl	8006e58 <SX126xReadRegister>
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8006eb8:	21fe      	movs	r1, #254	; 0xfe
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 8006eba:	4e15      	ldr	r6, [pc, #84]	; (8006f10 <SX126xGetRandom+0x68>)
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8006ebc:	4001      	ands	r1, r0
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 8006ebe:	0004      	movs	r4, r0
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8006ec0:	0038      	movs	r0, r7
 8006ec2:	f7ff ff6d 	bl	8006da0 <SX126xWriteRegister>
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 8006ec6:	0030      	movs	r0, r6
 8006ec8:	f7ff ffc6 	bl	8006e58 <SX126xReadRegister>
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8006ecc:	217f      	movs	r1, #127	; 0x7f
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 8006ece:	9001      	str	r0, [sp, #4]
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8006ed0:	4001      	ands	r1, r0
 8006ed2:	0030      	movs	r0, r6
 8006ed4:	f7ff ff64 	bl	8006da0 <SX126xWriteRegister>
    SX126xSetRx( 0xFFFFFF ); // Rx Continuous
 8006ed8:	480e      	ldr	r0, [pc, #56]	; (8006f14 <SX126xGetRandom+0x6c>)
 8006eda:	f7ff fcc3 	bl	8006864 <SX126xSetRx>
    SX126xReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8006ede:	2204      	movs	r2, #4
 8006ee0:	a903      	add	r1, sp, #12
 8006ee2:	480d      	ldr	r0, [pc, #52]	; (8006f18 <SX126xGetRandom+0x70>)
 8006ee4:	f7ff ff94 	bl	8006e10 <SX126xReadRegisters>
    SX126xSetStandby( STDBY_RC );
 8006ee8:	0028      	movs	r0, r5
 8006eea:	f7ff fc95 	bl	8006818 <SX126xSetStandby>
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna );
 8006eee:	0021      	movs	r1, r4
 8006ef0:	0038      	movs	r0, r7
 8006ef2:	f7ff ff55 	bl	8006da0 <SX126xWriteRegister>
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer );
 8006ef6:	0030      	movs	r0, r6
 8006ef8:	9901      	ldr	r1, [sp, #4]
 8006efa:	f7ff ff51 	bl	8006da0 <SX126xWriteRegister>
    Sx_Board_SetLedRx(false);
 8006efe:	0028      	movs	r0, r5
 8006f00:	f7fc fa44 	bl	800338c <SX126x_RADIO_BoardSetLedRx>
}
 8006f04:	9803      	ldr	r0, [sp, #12]
 8006f06:	b005      	add	sp, #20
 8006f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f0a:	46c0      	nop			; (mov r8, r8)
 8006f0c:	000008e2 	.word	0x000008e2
 8006f10:	000008e5 	.word	0x000008e5
 8006f14:	00ffffff 	.word	0x00ffffff
 8006f18:	00000819 	.word	0x00000819

08006f1c <SX126xSetTxParams>:
{
 8006f1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f1e:	0005      	movs	r5, r0
    if( Sx_Board_GetPaSelect( 0 ) == SX1261 )
 8006f20:	2000      	movs	r0, #0
{
 8006f22:	000c      	movs	r4, r1
    if( Sx_Board_GetPaSelect( 0 ) == SX1261 )
 8006f24:	f7fc fa20 	bl	8003368 <SX126x_RADIO_GetPaSelect>
 8006f28:	0002      	movs	r2, r0
 8006f2a:	2801      	cmp	r0, #1
 8006f2c:	d11e      	bne.n	8006f6c <SX126xSetTxParams+0x50>
            SX126xSetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8006f2e:	0003      	movs	r3, r0
 8006f30:	2100      	movs	r1, #0
        if( power == 15 )
 8006f32:	2d0f      	cmp	r5, #15
 8006f34:	d111      	bne.n	8006f5a <SX126xSetTxParams+0x3e>
            SX126xSetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8006f36:	2006      	movs	r0, #6
 8006f38:	f7ff fd38 	bl	80069ac <SX126xSetPaConfig>
 8006f3c:	1c2b      	adds	r3, r5, #0
 8006f3e:	b25a      	sxtb	r2, r3
 8006f40:	2a0e      	cmp	r2, #14
 8006f42:	dd00      	ble.n	8006f46 <SX126xSetTxParams+0x2a>
 8006f44:	230e      	movs	r3, #14
    buf[0] = power;
 8006f46:	466a      	mov	r2, sp
 8006f48:	b25b      	sxtb	r3, r3
 8006f4a:	7113      	strb	r3, [r2, #4]
    buf[1] = ( uint8_t )rampTime;
 8006f4c:	7154      	strb	r4, [r2, #5]
    SX126xWriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8006f4e:	208e      	movs	r0, #142	; 0x8e
 8006f50:	2202      	movs	r2, #2
 8006f52:	a901      	add	r1, sp, #4
 8006f54:	f7ff fc26 	bl	80067a4 <SX126xWriteCommand>
}
 8006f58:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
            SX126xSetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8006f5a:	2004      	movs	r0, #4
 8006f5c:	f7ff fd26 	bl	80069ac <SX126xSetPaConfig>
        if( power >= 14 )
 8006f60:	1c2b      	adds	r3, r5, #0
 8006f62:	3511      	adds	r5, #17
 8006f64:	daeb      	bge.n	8006f3e <SX126xSetTxParams+0x22>
 8006f66:	4b0e      	ldr	r3, [pc, #56]	; (8006fa0 <SX126xSetTxParams+0x84>)
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	e7ec      	b.n	8006f46 <SX126xSetTxParams+0x2a>
        SX126xWriteRegister( 0x08D8, SX126xReadRegister( 0x08D8 ) | ( 0x0F << 1 ) );
 8006f6c:	480d      	ldr	r0, [pc, #52]	; (8006fa4 <SX126xSetTxParams+0x88>)
 8006f6e:	f7ff ff73 	bl	8006e58 <SX126xReadRegister>
 8006f72:	211e      	movs	r1, #30
 8006f74:	4301      	orrs	r1, r0
 8006f76:	b2c9      	uxtb	r1, r1
 8006f78:	480a      	ldr	r0, [pc, #40]	; (8006fa4 <SX126xSetTxParams+0x88>)
 8006f7a:	f7ff ff11 	bl	8006da0 <SX126xWriteRegister>
        SX126xSetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8006f7e:	2301      	movs	r3, #1
 8006f80:	2200      	movs	r2, #0
 8006f82:	2107      	movs	r1, #7
 8006f84:	2004      	movs	r0, #4
 8006f86:	f7ff fd11 	bl	80069ac <SX126xSetPaConfig>
        if( power > 22 )
 8006f8a:	1c2b      	adds	r3, r5, #0
 8006f8c:	3509      	adds	r5, #9
 8006f8e:	da01      	bge.n	8006f94 <SX126xSetTxParams+0x78>
 8006f90:	4b05      	ldr	r3, [pc, #20]	; (8006fa8 <SX126xSetTxParams+0x8c>)
 8006f92:	e7e9      	b.n	8006f68 <SX126xSetTxParams+0x4c>
 8006f94:	b25a      	sxtb	r2, r3
 8006f96:	2a16      	cmp	r2, #22
 8006f98:	ddd5      	ble.n	8006f46 <SX126xSetTxParams+0x2a>
 8006f9a:	2316      	movs	r3, #22
 8006f9c:	e7d3      	b.n	8006f46 <SX126xSetTxParams+0x2a>
 8006f9e:	46c0      	nop			; (mov r8, r8)
 8006fa0:	08008f6e 	.word	0x08008f6e
 8006fa4:	000008d8 	.word	0x000008d8
 8006fa8:	08008f6f 	.word	0x08008f6f

08006fac <SX126xSetRfTxPower>:
{
 8006fac:	b510      	push	{r4, lr}
    SX126xSetTxParams( power, RADIO_RAMP_40_US );
 8006fae:	2102      	movs	r1, #2
 8006fb0:	f7ff ffb4 	bl	8006f1c <SX126xSetTxParams>
}
 8006fb4:	bd10      	pop	{r4, pc}
	...

08006fb8 <SX126xGetRxBufferStatus>:
{
 8006fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    SX126xReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8006fba:	2202      	movs	r2, #2
{
 8006fbc:	0004      	movs	r4, r0
 8006fbe:	000d      	movs	r5, r1
    SX126xReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8006fc0:	2013      	movs	r0, #19
 8006fc2:	a901      	add	r1, sp, #4
 8006fc4:	f7ff fdd9 	bl	8006b7a <SX126xReadCommand>
    return PacketType;
 8006fc8:	4b09      	ldr	r3, [pc, #36]	; (8006ff0 <SX126xGetRxBufferStatus+0x38>)
    if( ( SX126xGetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8006fca:	785a      	ldrb	r2, [r3, #1]
 8006fcc:	2a01      	cmp	r2, #1
 8006fce:	d10a      	bne.n	8006fe6 <SX126xGetRxBufferStatus+0x2e>
 8006fd0:	7a1b      	ldrb	r3, [r3, #8]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d107      	bne.n	8006fe6 <SX126xGetRxBufferStatus+0x2e>
        *payloadLength = SX126xReadRegister( REG_LR_PAYLOADLENGTH );
 8006fd6:	4807      	ldr	r0, [pc, #28]	; (8006ff4 <SX126xGetRxBufferStatus+0x3c>)
 8006fd8:	f7ff ff3e 	bl	8006e58 <SX126xReadRegister>
 8006fdc:	7020      	strb	r0, [r4, #0]
    *rxStartBufferPointer = status[1];
 8006fde:	466b      	mov	r3, sp
 8006fe0:	795b      	ldrb	r3, [r3, #5]
 8006fe2:	702b      	strb	r3, [r5, #0]
}
 8006fe4:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        *payloadLength = status[0];
 8006fe6:	466b      	mov	r3, sp
 8006fe8:	791b      	ldrb	r3, [r3, #4]
 8006fea:	7023      	strb	r3, [r4, #0]
 8006fec:	e7f7      	b.n	8006fde <SX126xGetRxBufferStatus+0x26>
 8006fee:	46c0      	nop			; (mov r8, r8)
 8006ff0:	20000154 	.word	0x20000154
 8006ff4:	00000702 	.word	0x00000702

08006ff8 <SX126xWriteBuffer>:

void SX126xWriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8006ff8:	b570      	push	{r4, r5, r6, lr}
 8006ffa:	0005      	movs	r5, r0
 8006ffc:	000c      	movs	r4, r1
 8006ffe:	0016      	movs	r6, r2
    SX126xCheckDeviceReady( );
 8007000:	f7ff fbbc 	bl	800677c <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 8007004:	2000      	movs	r0, #0
 8007006:	f7fc f9a1 	bl	800334c <SX126x_RADIO_ChipSelect>

    Sx_Board_SendRecv(  RADIO_WRITE_BUFFER );
 800700a:	200e      	movs	r0, #14
 800700c:	f7fc f9c3 	bl	8003396 <SX126x_RADIO_SendRecv>
    Sx_Board_SendRecv(  offset );
 8007010:	b2a8      	uxth	r0, r5
 8007012:	f7fc f9c0 	bl	8003396 <SX126x_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 8007016:	19a6      	adds	r6, r4, r6
 8007018:	42b4      	cmp	r4, r6
 800701a:	d105      	bne.n	8007028 <SX126xWriteBuffer+0x30>
    {
        Sx_Board_SendRecv(  buffer[i] );
    }
    Sx_Board_ChipSelect( 1 );
 800701c:	2001      	movs	r0, #1
 800701e:	f7fc f995 	bl	800334c <SX126x_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
 8007022:	f7fc f989 	bl	8003338 <SX126x_RADIO_WaitOnBusy>
}
 8007026:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv(  buffer[i] );
 8007028:	7820      	ldrb	r0, [r4, #0]
 800702a:	f7fc f9b4 	bl	8003396 <SX126x_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800702e:	3401      	adds	r4, #1
 8007030:	e7f2      	b.n	8007018 <SX126xWriteBuffer+0x20>

08007032 <SX126xSetPayload>:
{
 8007032:	b510      	push	{r4, lr}
 8007034:	000a      	movs	r2, r1
    SX126xWriteBuffer( 0x00, payload, size );
 8007036:	0001      	movs	r1, r0
 8007038:	2000      	movs	r0, #0
 800703a:	f7ff ffdd 	bl	8006ff8 <SX126xWriteBuffer>
}
 800703e:	bd10      	pop	{r4, pc}

08007040 <SX126xSendPayload>:
{
 8007040:	b510      	push	{r4, lr}
 8007042:	0014      	movs	r4, r2
    SX126xSetPayload( payload, size );
 8007044:	f7ff fff5 	bl	8007032 <SX126xSetPayload>
    SX126xSetTx( timeout );
 8007048:	0020      	movs	r0, r4
 800704a:	f7ff fbf7 	bl	800683c <SX126xSetTx>
}
 800704e:	bd10      	pop	{r4, pc}

08007050 <SX126xReadBuffer>:

void SX126xReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8007050:	b570      	push	{r4, r5, r6, lr}
 8007052:	0005      	movs	r5, r0
 8007054:	000c      	movs	r4, r1
 8007056:	0016      	movs	r6, r2
    SX126xCheckDeviceReady( );
 8007058:	f7ff fb90 	bl	800677c <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800705c:	2000      	movs	r0, #0
 800705e:	f7fc f975 	bl	800334c <SX126x_RADIO_ChipSelect>

    Sx_Board_SendRecv(  RADIO_READ_BUFFER );
 8007062:	201e      	movs	r0, #30
 8007064:	f7fc f997 	bl	8003396 <SX126x_RADIO_SendRecv>
    Sx_Board_SendRecv(  offset );
 8007068:	b2a8      	uxth	r0, r5
 800706a:	f7fc f994 	bl	8003396 <SX126x_RADIO_SendRecv>
    Sx_Board_SendRecv(  0 );
 800706e:	2000      	movs	r0, #0
 8007070:	f7fc f991 	bl	8003396 <SX126x_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 8007074:	19a6      	adds	r6, r4, r6
 8007076:	42b4      	cmp	r4, r6
 8007078:	d105      	bne.n	8007086 <SX126xReadBuffer+0x36>
    {
        buffer[i] = Sx_Board_SendRecv(  0 );
    }
    Sx_Board_ChipSelect( 1 );
 800707a:	2001      	movs	r0, #1
 800707c:	f7fc f966 	bl	800334c <SX126x_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
 8007080:	f7fc f95a 	bl	8003338 <SX126x_RADIO_WaitOnBusy>
}
 8007084:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv(  0 );
 8007086:	2000      	movs	r0, #0
 8007088:	f7fc f985 	bl	8003396 <SX126x_RADIO_SendRecv>
 800708c:	7020      	strb	r0, [r4, #0]
    for( uint16_t i = 0; i < size; i++ )
 800708e:	3401      	adds	r4, #1
 8007090:	e7f1      	b.n	8007076 <SX126xReadBuffer+0x26>

08007092 <SX126xGetPayload>:
{
 8007092:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007094:	000c      	movs	r4, r1
    uint8_t offset = 0;
 8007096:	466b      	mov	r3, sp
 8007098:	2700      	movs	r7, #0
{
 800709a:	0005      	movs	r5, r0
    SX126xGetRxBufferStatus( size, &offset );
 800709c:	1dd9      	adds	r1, r3, #7
 800709e:	0020      	movs	r0, r4
{
 80070a0:	0016      	movs	r6, r2
    uint8_t offset = 0;
 80070a2:	71df      	strb	r7, [r3, #7]
    SX126xGetRxBufferStatus( size, &offset );
 80070a4:	f7ff ff88 	bl	8006fb8 <SX126xGetRxBufferStatus>
    if( *size > maxSize )
 80070a8:	7822      	ldrb	r2, [r4, #0]
        return 1;
 80070aa:	2001      	movs	r0, #1
    if( *size > maxSize )
 80070ac:	42b2      	cmp	r2, r6
 80070ae:	d805      	bhi.n	80070bc <SX126xGetPayload+0x2a>
    SX126xReadBuffer( offset, buffer, *size );
 80070b0:	466b      	mov	r3, sp
 80070b2:	0029      	movs	r1, r5
 80070b4:	79d8      	ldrb	r0, [r3, #7]
 80070b6:	f7ff ffcb 	bl	8007050 <SX126xReadBuffer>
    return 0;
 80070ba:	0038      	movs	r0, r7
}
 80070bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

080070c0 <TRACE_AllocateBufer>:
  * @param  Size to allocate within fifo
  * @param  Pos position within the fifo
  * @retval write position inside the buffer is -1 no space available.
  */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 80070c0:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070c2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80070c6:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if (ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 80070c8:	4b16      	ldr	r3, [pc, #88]	; (8007124 <TRACE_AllocateBufer+0x64>)
 80070ca:	8a5d      	ldrh	r5, [r3, #18]
 80070cc:	8a1a      	ldrh	r2, [r3, #16]
 80070ce:	4295      	cmp	r5, r2
 80070d0:	d114      	bne.n	80070fc <TRACE_AllocateBufer+0x3c>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 80070d2:	2280      	movs	r2, #128	; 0x80
 80070d4:	0092      	lsls	r2, r2, #2
 80070d6:	1b52      	subs	r2, r2, r5
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 80070d8:	b292      	uxth	r2, r2
 80070da:	4290      	cmp	r0, r2
 80070dc:	d306      	bcc.n	80070ec <TRACE_AllocateBufer+0x2c>
 80070de:	4285      	cmp	r5, r0
 80070e0:	d916      	bls.n	8007110 <TRACE_AllocateBufer+0x50>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80070e2:	2201      	movs	r2, #1
 80070e4:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 80070e6:	2200      	movs	r2, #0
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80070e8:	801d      	strh	r5, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 80070ea:	825a      	strh	r2, [r3, #18]
#endif
  }
  
  if (freesize > Size)
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 80070ec:	8a5a      	ldrh	r2, [r3, #18]
 80070ee:	800a      	strh	r2, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 80070f0:	1812      	adds	r2, r2, r0
 80070f2:	05d2      	lsls	r2, r2, #23
 80070f4:	0dd2      	lsrs	r2, r2, #23
    ret = 0;
 80070f6:	2000      	movs	r0, #0
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 80070f8:	825a      	strh	r2, [r3, #18]
    ret = 0;
 80070fa:	e00b      	b.n	8007114 <TRACE_AllocateBufer+0x54>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80070fc:	4295      	cmp	r5, r2
 80070fe:	d90c      	bls.n	800711a <TRACE_AllocateBufer+0x5a>
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8007100:	2680      	movs	r6, #128	; 0x80
 8007102:	00b6      	lsls	r6, r6, #2
 8007104:	1b76      	subs	r6, r6, r5
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8007106:	b2b6      	uxth	r6, r6
 8007108:	4286      	cmp	r6, r0
 800710a:	d8ef      	bhi.n	80070ec <TRACE_AllocateBufer+0x2c>
 800710c:	4282      	cmp	r2, r0
 800710e:	d8e8      	bhi.n	80070e2 <TRACE_AllocateBufer+0x22>
  int16_t ret = -1;
 8007110:	2001      	movs	r0, #1
 8007112:	4240      	negs	r0, r0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007114:	f384 8810 	msr	PRIMASK, r4
#endif
  }

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  return ret;
}
 8007118:	bd70      	pop	{r4, r5, r6, pc}
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800711a:	1b52      	subs	r2, r2, r5
  if (freesize > Size)
 800711c:	b292      	uxth	r2, r2
 800711e:	4282      	cmp	r2, r0
 8007120:	d8e4      	bhi.n	80070ec <TRACE_AllocateBufer+0x2c>
 8007122:	e7f5      	b.n	8007110 <TRACE_AllocateBufer+0x50>
 8007124:	20000160 	.word	0x20000160

08007128 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007128:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800712c:	b672      	cpsid	i
  * @retval None.
  */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 800712e:	4a03      	ldr	r2, [pc, #12]	; (800713c <TRACE_Lock+0x14>)
 8007130:	8ad3      	ldrh	r3, [r2, #22]
 8007132:	3301      	adds	r3, #1
 8007134:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007136:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800713a:	4770      	bx	lr
 800713c:	20000160 	.word	0x20000160

08007140 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007140:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007144:	b672      	cpsid	i
  * @retval None.
  */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8007146:	4a03      	ldr	r2, [pc, #12]	; (8007154 <TRACE_UnLock+0x14>)
 8007148:	8ad3      	ldrh	r3, [r2, #22]
 800714a:	3b01      	subs	r3, #1
 800714c:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800714e:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8007152:	4770      	bx	lr
 8007154:	20000160 	.word	0x20000160

08007158 <UTIL_ADV_TRACE_Init>:
{
 8007158:	b510      	push	{r4, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800715a:	2218      	movs	r2, #24
 800715c:	2100      	movs	r1, #0
 800715e:	4807      	ldr	r0, [pc, #28]	; (800717c <UTIL_ADV_TRACE_Init+0x24>)
 8007160:	f000 f98c 	bl	800747c <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8007164:	2280      	movs	r2, #128	; 0x80
 8007166:	2100      	movs	r1, #0
 8007168:	4805      	ldr	r0, [pc, #20]	; (8007180 <UTIL_ADV_TRACE_Init+0x28>)
 800716a:	0092      	lsls	r2, r2, #2
 800716c:	f000 f986 	bl	800747c <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8007170:	4b04      	ldr	r3, [pc, #16]	; (8007184 <UTIL_ADV_TRACE_Init+0x2c>)
 8007172:	4805      	ldr	r0, [pc, #20]	; (8007188 <UTIL_ADV_TRACE_Init+0x30>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4798      	blx	r3
}
 8007178:	bd10      	pop	{r4, pc}
 800717a:	46c0      	nop			; (mov r8, r8)
 800717c:	20000160 	.word	0x20000160
 8007180:	20000278 	.word	0x20000278
 8007184:	08008bc4 	.word	0x08008bc4
 8007188:	08007315 	.word	0x08007315

0800718c <UTIL_ADV_TRACE_IoInit>:
{
 800718c:	b510      	push	{r4, lr}
  return UTIL_TraceDriver.IoInit();
 800718e:	4b02      	ldr	r3, [pc, #8]	; (8007198 <UTIL_ADV_TRACE_IoInit+0xc>)
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	4798      	blx	r3
}
 8007194:	bd10      	pop	{r4, pc}
 8007196:	46c0      	nop			; (mov r8, r8)
 8007198:	08008bc4 	.word	0x08008bc4

0800719c <UTIL_ADV_TRACE_IoDeInit>:
{
 800719c:	b510      	push	{r4, lr}
  return UTIL_TraceDriver.IoDeInit();
 800719e:	4b02      	ldr	r3, [pc, #8]	; (80071a8 <UTIL_ADV_TRACE_IoDeInit+0xc>)
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	4798      	blx	r3
}
 80071a4:	bd10      	pop	{r4, pc}
 80071a6:	46c0      	nop			; (mov r8, r8)
 80071a8:	08008bc4 	.word	0x08008bc4

080071ac <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
	ADV_TRACE_Ctx.timestamp_func = *cb;
 80071ac:	4b01      	ldr	r3, [pc, #4]	; (80071b4 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 80071ae:	6058      	str	r0, [r3, #4]
}
 80071b0:	4770      	bx	lr
 80071b2:	46c0      	nop			; (mov r8, r8)
 80071b4:	20000160 	.word	0x20000160

080071b8 <UTIL_ADV_TRACE_SetVerboseLevel>:
	ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 80071b8:	4b01      	ldr	r3, [pc, #4]	; (80071c0 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 80071ba:	7218      	strb	r0, [r3, #8]
}
 80071bc:	4770      	bx	lr
 80071be:	46c0      	nop			; (mov r8, r8)
 80071c0:	20000160 	.word	0x20000160

080071c4 <TRACE_Send>:
{
 80071c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071c6:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80071ca:	b672      	cpsid	i
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 80071cc:	4c1b      	ldr	r4, [pc, #108]	; (800723c <TRACE_Send+0x78>)
  if(TRACE_IsLocked() == 0u)
 80071ce:	8ae5      	ldrh	r5, [r4, #22]
 80071d0:	2d00      	cmp	r5, #0
 80071d2:	d12e      	bne.n	8007232 <TRACE_Send+0x6e>
    TRACE_Lock();
 80071d4:	f7ff ffa8 	bl	8007128 <TRACE_Lock>
    if (ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 80071d8:	8a20      	ldrh	r0, [r4, #16]
 80071da:	8a62      	ldrh	r2, [r4, #18]
 80071dc:	4290      	cmp	r0, r2
 80071de:	d026      	beq.n	800722e <TRACE_Send+0x6a>
   	  if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80071e0:	78a1      	ldrb	r1, [r4, #2]
 80071e2:	2901      	cmp	r1, #1
 80071e4:	d110      	bne.n	8007208 <TRACE_Send+0x44>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 80071e6:	8823      	ldrh	r3, [r4, #0]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80071e8:	3101      	adds	r1, #1
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 80071ea:	1a1b      	subs	r3, r3, r0
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	82a3      	strh	r3, [r4, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80071f0:	70a1      	strb	r1, [r4, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 80071f2:	8025      	strh	r5, [r4, #0]
        if (0u == ADV_TRACE_Ctx.TraceSentSize)
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d109      	bne.n	800720c <TRACE_Send+0x48>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80071f8:	70a3      	strb	r3, [r4, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 80071fa:	8223      	strh	r3, [r4, #16]
   	    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80071fc:	8a23      	ldrh	r3, [r4, #16]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d912      	bls.n	8007228 <TRACE_Send+0x64>
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8007202:	1ad2      	subs	r2, r2, r3
 8007204:	82a2      	strh	r2, [r4, #20]
 8007206:	e001      	b.n	800720c <TRACE_Send+0x48>
   	  if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8007208:	2900      	cmp	r1, #0
 800720a:	d0f7      	beq.n	80071fc <TRACE_Send+0x38>
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800720c:	8a25      	ldrh	r5, [r4, #16]
 800720e:	4b0c      	ldr	r3, [pc, #48]	; (8007240 <TRACE_Send+0x7c>)
 8007210:	18ed      	adds	r5, r5, r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007212:	f386 8810 	msr	PRIMASK, r6
      UTIL_ADV_TRACE_PreSendHook(); 
 8007216:	f7fb fc01 	bl	8002a1c <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800721a:	4b0a      	ldr	r3, [pc, #40]	; (8007244 <TRACE_Send+0x80>)
 800721c:	8aa1      	ldrh	r1, [r4, #20]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	0028      	movs	r0, r5
 8007222:	9301      	str	r3, [sp, #4]
 8007224:	4798      	blx	r3
}
 8007226:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8007228:	2280      	movs	r2, #128	; 0x80
 800722a:	0092      	lsls	r2, r2, #2
 800722c:	e7e9      	b.n	8007202 <TRACE_Send+0x3e>
      TRACE_UnLock();
 800722e:	f7ff ff87 	bl	8007140 <TRACE_UnLock>
 8007232:	f386 8810 	msr	PRIMASK, r6
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;  
 8007236:	2000      	movs	r0, #0
}
 8007238:	e7f5      	b.n	8007226 <TRACE_Send+0x62>
 800723a:	46c0      	nop			; (mov r8, r8)
 800723c:	20000160 	.word	0x20000160
 8007240:	20000278 	.word	0x20000278
 8007244:	08008bc4 	.word	0x08008bc4

08007248 <UTIL_ADV_TRACE_COND_FSend>:
{
 8007248:	b408      	push	{r3}
 800724a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800724c:	b086      	sub	sp, #24
  uint16_t timestamp_size = 0u;
 800724e:	2300      	movs	r3, #0
 8007250:	466c      	mov	r4, sp
 8007252:	8023      	strh	r3, [r4, #0]
  if (!( ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8007254:	4b2c      	ldr	r3, [pc, #176]	; (8007308 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8007256:	7a1c      	ldrb	r4, [r3, #8]
 8007258:	4284      	cmp	r4, r0
 800725a:	d350      	bcc.n	80072fe <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if(( Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800725c:	68d8      	ldr	r0, [r3, #12]
 800725e:	4008      	ands	r0, r1
 8007260:	4288      	cmp	r0, r1
 8007262:	d14e      	bne.n	8007302 <UTIL_ADV_TRACE_COND_FSend+0xba>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d004      	beq.n	8007274 <UTIL_ADV_TRACE_COND_FSend+0x2c>
 800726a:	2a00      	cmp	r2, #0
 800726c:	d002      	beq.n	8007274 <UTIL_ADV_TRACE_COND_FSend+0x2c>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800726e:	4669      	mov	r1, sp
 8007270:	a802      	add	r0, sp, #8
 8007272:	4798      	blx	r3
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8007274:	2180      	movs	r1, #128	; 0x80
  va_start( vaArgs, strFormat);
 8007276:	ab0c      	add	r3, sp, #48	; 0x30
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8007278:	0049      	lsls	r1, r1, #1
 800727a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800727c:	4823      	ldr	r0, [pc, #140]	; (800730c <UTIL_ADV_TRACE_COND_FSend+0xc4>)
  va_start( vaArgs, strFormat);
 800727e:	9301      	str	r3, [sp, #4]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8007280:	f000 fb3c 	bl	80078fc <tiny_vsnprintf_like>
 8007284:	0005      	movs	r5, r0
  TRACE_Lock();
 8007286:	f7ff ff4f 	bl	8007128 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800728a:	466b      	mov	r3, sp
 800728c:	8818      	ldrh	r0, [r3, #0]
 800728e:	1c9c      	adds	r4, r3, #2
 8007290:	1940      	adds	r0, r0, r5
 8007292:	0021      	movs	r1, r4
 8007294:	b280      	uxth	r0, r0
 8007296:	f7ff ff13 	bl	80070c0 <TRACE_AllocateBufer>
 800729a:	1c43      	adds	r3, r0, #1
 800729c:	d02a      	beq.n	80072f4 <UTIL_ADV_TRACE_COND_FSend+0xac>
    for (idx = 0u; idx < timestamp_size; idx++)
 800729e:	2200      	movs	r2, #0
      ADV_TRACE_Buffer[writepos] = buf[idx];
 80072a0:	2101      	movs	r1, #1
    for (idx = 0u; idx < timestamp_size; idx++)
 80072a2:	466b      	mov	r3, sp
 80072a4:	0015      	movs	r5, r2
      ADV_TRACE_Buffer[writepos] = buf[idx];
 80072a6:	468c      	mov	ip, r1
    for (idx = 0u; idx < timestamp_size; idx++)
 80072a8:	881b      	ldrh	r3, [r3, #0]
 80072aa:	8826      	ldrh	r6, [r4, #0]
 80072ac:	4818      	ldr	r0, [pc, #96]	; (8007310 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 80072ae:	b297      	uxth	r7, r2
 80072b0:	19f1      	adds	r1, r6, r7
 80072b2:	b289      	uxth	r1, r1
 80072b4:	42bb      	cmp	r3, r7
 80072b6:	d815      	bhi.n	80072e4 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 80072b8:	199b      	adds	r3, r3, r6
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	2d00      	cmp	r5, #0
 80072be:	d000      	beq.n	80072c2 <UTIL_ADV_TRACE_COND_FSend+0x7a>
 80072c0:	8023      	strh	r3, [r4, #0]
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80072c2:	2180      	movs	r1, #128	; 0x80
 80072c4:	8823      	ldrh	r3, [r4, #0]
 80072c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072c8:	0049      	lsls	r1, r1, #1
 80072ca:	18c0      	adds	r0, r0, r3
 80072cc:	9b01      	ldr	r3, [sp, #4]
 80072ce:	f000 fb15 	bl	80078fc <tiny_vsnprintf_like>
    TRACE_UnLock();
 80072d2:	f7ff ff35 	bl	8007140 <TRACE_UnLock>
    return TRACE_Send();
 80072d6:	f7ff ff75 	bl	80071c4 <TRACE_Send>
}
 80072da:	b006      	add	sp, #24
 80072dc:	bcf0      	pop	{r4, r5, r6, r7}
 80072de:	bc08      	pop	{r3}
 80072e0:	b001      	add	sp, #4
 80072e2:	4718      	bx	r3
      ADV_TRACE_Buffer[writepos] = buf[idx];
 80072e4:	466d      	mov	r5, sp
 80072e6:	2708      	movs	r7, #8
 80072e8:	19ed      	adds	r5, r5, r7
 80072ea:	5cad      	ldrb	r5, [r5, r2]
 80072ec:	3201      	adds	r2, #1
 80072ee:	5445      	strb	r5, [r0, r1]
 80072f0:	4665      	mov	r5, ip
 80072f2:	e7dc      	b.n	80072ae <UTIL_ADV_TRACE_COND_FSend+0x66>
  TRACE_UnLock();
 80072f4:	f7ff ff24 	bl	8007140 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 80072f8:	2003      	movs	r0, #3
    return UTIL_ADV_TRACE_REGIONMASKED;
 80072fa:	4240      	negs	r0, r0
 80072fc:	e7ed      	b.n	80072da <UTIL_ADV_TRACE_COND_FSend+0x92>
    return UTIL_ADV_TRACE_GIVEUP;
 80072fe:	2005      	movs	r0, #5
 8007300:	e7fb      	b.n	80072fa <UTIL_ADV_TRACE_COND_FSend+0xb2>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8007302:	2006      	movs	r0, #6
 8007304:	e7f9      	b.n	80072fa <UTIL_ADV_TRACE_COND_FSend+0xb2>
 8007306:	46c0      	nop			; (mov r8, r8)
 8007308:	20000160 	.word	0x20000160
 800730c:	20000178 	.word	0x20000178
 8007310:	20000278 	.word	0x20000278

08007314 <TRACE_TxCpltCallback>:
{ 
 8007314:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007316:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800731a:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800731c:	4b1f      	ldr	r3, [pc, #124]	; (800739c <TRACE_TxCpltCallback+0x88>)
 800731e:	789a      	ldrb	r2, [r3, #2]
 8007320:	2a02      	cmp	r2, #2
 8007322:	d11e      	bne.n	8007362 <TRACE_TxCpltCallback+0x4e>
	  ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8007324:	2200      	movs	r2, #0
 8007326:	709a      	strb	r2, [r3, #2]
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8007328:	821a      	strh	r2, [r3, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800732a:	8a1d      	ldrh	r5, [r3, #16]
 800732c:	8a59      	ldrh	r1, [r3, #18]
 800732e:	428d      	cmp	r5, r1
 8007330:	d02d      	beq.n	800738e <TRACE_TxCpltCallback+0x7a>
 8007332:	8ada      	ldrh	r2, [r3, #22]
 8007334:	2a01      	cmp	r2, #1
 8007336:	d12a      	bne.n	800738e <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8007338:	7898      	ldrb	r0, [r3, #2]
 800733a:	2801      	cmp	r0, #1
 800733c:	d117      	bne.n	800736e <TRACE_TxCpltCallback+0x5a>
   		ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800733e:	3001      	adds	r0, #1
 8007340:	7098      	strb	r0, [r3, #2]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 8007342:	2000      	movs	r0, #0
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8007344:	881a      	ldrh	r2, [r3, #0]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 8007346:	8018      	strh	r0, [r3, #0]
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8007348:	1b52      	subs	r2, r2, r5
 800734a:	b292      	uxth	r2, r2
 800734c:	829a      	strh	r2, [r3, #20]
    	if (0u == ADV_TRACE_Ctx.TraceSentSize)
 800734e:	4282      	cmp	r2, r0
 8007350:	d10f      	bne.n	8007372 <TRACE_TxCpltCallback+0x5e>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8007352:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8007354:	821a      	strh	r2, [r3, #16]
      if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8007356:	8a1a      	ldrh	r2, [r3, #16]
 8007358:	4291      	cmp	r1, r2
 800735a:	d915      	bls.n	8007388 <TRACE_TxCpltCallback+0x74>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800735c:	1a89      	subs	r1, r1, r2
 800735e:	8299      	strh	r1, [r3, #20]
 8007360:	e007      	b.n	8007372 <TRACE_TxCpltCallback+0x5e>
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8007362:	8a1a      	ldrh	r2, [r3, #16]
 8007364:	8a99      	ldrh	r1, [r3, #20]
 8007366:	1852      	adds	r2, r2, r1
 8007368:	05d2      	lsls	r2, r2, #23
 800736a:	0dd2      	lsrs	r2, r2, #23
 800736c:	e7dc      	b.n	8007328 <TRACE_TxCpltCallback+0x14>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800736e:	2800      	cmp	r0, #0
 8007370:	d0f1      	beq.n	8007356 <TRACE_TxCpltCallback+0x42>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007372:	f384 8810 	msr	PRIMASK, r4
    UTIL_TraceDriver.Send(&ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr], ADV_TRACE_Ctx.TraceSentSize);
 8007376:	8a18      	ldrh	r0, [r3, #16]
 8007378:	8a99      	ldrh	r1, [r3, #20]
 800737a:	4b09      	ldr	r3, [pc, #36]	; (80073a0 <TRACE_TxCpltCallback+0x8c>)
 800737c:	18c0      	adds	r0, r0, r3
 800737e:	4b09      	ldr	r3, [pc, #36]	; (80073a4 <TRACE_TxCpltCallback+0x90>)
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	9301      	str	r3, [sp, #4]
 8007384:	4798      	blx	r3
}
 8007386:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8007388:	2180      	movs	r1, #128	; 0x80
 800738a:	0089      	lsls	r1, r1, #2
 800738c:	e7e6      	b.n	800735c <TRACE_TxCpltCallback+0x48>
    UTIL_ADV_TRACE_PostSendHook();      
 800738e:	f7fb fb4b 	bl	8002a28 <UTIL_ADV_TRACE_PostSendHook>
 8007392:	f384 8810 	msr	PRIMASK, r4
    TRACE_UnLock();
 8007396:	f7ff fed3 	bl	8007140 <TRACE_UnLock>
}
 800739a:	e7f4      	b.n	8007386 <TRACE_TxCpltCallback+0x72>
 800739c:	20000160 	.word	0x20000160
 80073a0:	20000278 	.word	0x20000278
 80073a4:	08008bc4 	.word	0x08008bc4

080073a8 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80073a8:	2200      	movs	r2, #0
 80073aa:	4b02      	ldr	r3, [pc, #8]	; (80073b4 <UTIL_LPM_Init+0xc>)
 80073ac:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80073ae:	605a      	str	r2, [r3, #4]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80073b0:	4770      	bx	lr
 80073b2:	46c0      	nop			; (mov r8, r8)
 80073b4:	20000478 	.word	0x20000478

080073b8 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80073b8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073ba:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80073be:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 80073c0:	2900      	cmp	r1, #0
 80073c2:	d008      	beq.n	80073d6 <UTIL_LPM_SetStopMode+0x1e>
 80073c4:	2901      	cmp	r1, #1
 80073c6:	d103      	bne.n	80073d0 <UTIL_LPM_SetStopMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80073c8:	4b05      	ldr	r3, [pc, #20]	; (80073e0 <UTIL_LPM_SetStopMode+0x28>)
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	4310      	orrs	r0, r2
 80073ce:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073d0:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80073d4:	bd10      	pop	{r4, pc}
      StopModeDisable &= ( ~lpm_id_bm );
 80073d6:	4a02      	ldr	r2, [pc, #8]	; (80073e0 <UTIL_LPM_SetStopMode+0x28>)
 80073d8:	6813      	ldr	r3, [r2, #0]
 80073da:	4383      	bics	r3, r0
 80073dc:	6013      	str	r3, [r2, #0]
      break;
 80073de:	e7f7      	b.n	80073d0 <UTIL_LPM_SetStopMode+0x18>
 80073e0:	20000478 	.word	0x20000478

080073e4 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80073e4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073e6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80073ea:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 80073ec:	2900      	cmp	r1, #0
 80073ee:	d008      	beq.n	8007402 <UTIL_LPM_SetOffMode+0x1e>
 80073f0:	2901      	cmp	r1, #1
 80073f2:	d103      	bne.n	80073fc <UTIL_LPM_SetOffMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80073f4:	4b05      	ldr	r3, [pc, #20]	; (800740c <UTIL_LPM_SetOffMode+0x28>)
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	4310      	orrs	r0, r2
 80073fa:	6058      	str	r0, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073fc:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8007400:	bd10      	pop	{r4, pc}
      OffModeDisable &= ( ~lpm_id_bm );
 8007402:	4a02      	ldr	r2, [pc, #8]	; (800740c <UTIL_LPM_SetOffMode+0x28>)
 8007404:	6853      	ldr	r3, [r2, #4]
 8007406:	4383      	bics	r3, r0
 8007408:	6053      	str	r3, [r2, #4]
      break;
 800740a:	e7f7      	b.n	80073fc <UTIL_LPM_SetOffMode+0x18>
 800740c:	20000478 	.word	0x20000478

08007410 <UTIL_LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007410:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007414:	b672      	cpsid	i
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
  {
    /**
     * At least one user disallows Stop Mode
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
 8007416:	2000      	movs	r0, #0
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8007418:	4b05      	ldr	r3, [pc, #20]	; (8007430 <UTIL_LPM_GetMode+0x20>)
 800741a:	6819      	ldr	r1, [r3, #0]
 800741c:	4281      	cmp	r1, r0
 800741e:	d103      	bne.n	8007428 <UTIL_LPM_GetMode+0x18>
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8007420:	6858      	ldr	r0, [r3, #4]
       */
      mode_selected = UTIL_LPM_STOPMODE;
    }
    else
    {
      mode_selected = UTIL_LPM_OFFMODE;
 8007422:	4243      	negs	r3, r0
 8007424:	4158      	adcs	r0, r3
 8007426:	3001      	adds	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007428:	f382 8810 	msr	PRIMASK, r2
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
}
 800742c:	4770      	bx	lr
 800742e:	46c0      	nop			; (mov r8, r8)
 8007430:	20000478 	.word	0x20000478

08007434 <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 8007434:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007436:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800743a:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800743c:	4b0d      	ldr	r3, [pc, #52]	; (8007474 <UTIL_LPM_EnterLowPower+0x40>)
 800743e:	4c0e      	ldr	r4, [pc, #56]	; (8007478 <UTIL_LPM_EnterLowPower+0x44>)
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	2a00      	cmp	r2, #0
 8007444:	d008      	beq.n	8007458 <UTIL_LPM_EnterLowPower+0x24>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	9301      	str	r3, [sp, #4]
 800744a:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800744c:	6863      	ldr	r3, [r4, #4]
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
      UTIL_PowerDriver.ExitOffMode( );
 800744e:	9301      	str	r3, [sp, #4]
 8007450:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007452:	f385 8810 	msr	PRIMASK, r5
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8007456:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d004      	beq.n	8007468 <UTIL_LPM_EnterLowPower+0x34>
        UTIL_PowerDriver.EnterStopMode( );
 800745e:	68a3      	ldr	r3, [r4, #8]
 8007460:	9301      	str	r3, [sp, #4]
 8007462:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8007464:	68e3      	ldr	r3, [r4, #12]
 8007466:	e7f2      	b.n	800744e <UTIL_LPM_EnterLowPower+0x1a>
      UTIL_PowerDriver.EnterOffMode( );
 8007468:	6923      	ldr	r3, [r4, #16]
 800746a:	9301      	str	r3, [sp, #4]
 800746c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800746e:	6963      	ldr	r3, [r4, #20]
 8007470:	e7ed      	b.n	800744e <UTIL_LPM_EnterLowPower+0x1a>
 8007472:	46c0      	nop			; (mov r8, r8)
 8007474:	20000478 	.word	0x20000478
 8007478:	08008bac 	.word	0x08008bac

0800747c <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 800747c:	4b04      	ldr	r3, [pc, #16]	; (8007490 <UTIL_MEM_set_8+0x14>)
 800747e:	3a01      	subs	r2, #1
 8007480:	b292      	uxth	r2, r2
 8007482:	429a      	cmp	r2, r3
 8007484:	d100      	bne.n	8007488 <UTIL_MEM_set_8+0xc>
  {
    *dst8++ = value;
  }
}
 8007486:	4770      	bx	lr
    *dst8++ = value;
 8007488:	7001      	strb	r1, [r0, #0]
 800748a:	3001      	adds	r0, #1
 800748c:	e7f7      	b.n	800747e <UTIL_MEM_set_8+0x2>
 800748e:	46c0      	nop			; (mov r8, r8)
 8007490:	0000ffff 	.word	0x0000ffff

08007494 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8007494:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007496:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800749a:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 800749c:	4b05      	ldr	r3, [pc, #20]	; (80074b4 <UTIL_SEQ_SetTask+0x20>)
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800749e:	00c9      	lsls	r1, r1, #3
  TaskSet |= TaskId_bm;
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	4302      	orrs	r2, r0
 80074a4:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80074a6:	185b      	adds	r3, r3, r1
 80074a8:	691a      	ldr	r2, [r3, #16]
 80074aa:	4310      	orrs	r0, r2
 80074ac:	6118      	str	r0, [r3, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074ae:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 80074b2:	bd10      	pop	{r4, pc}
 80074b4:	20000480 	.word	0x20000480

080074b8 <UTIL_SEQ_PreIdle>:
 80074b8:	4770      	bx	lr

080074ba <UTIL_SEQ_PostIdle>:
 80074ba:	4770      	bx	lr

080074bc <SEQ_BitPosition>:
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;
 80074bc:	2300      	movs	r3, #0

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 80074be:	0c02      	lsrs	r2, r0, #16
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d101      	bne.n	80074c8 <SEQ_BitPosition+0xc>
 80074c4:	0400      	lsls	r0, r0, #16
 80074c6:	3310      	adds	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 80074c8:	0e02      	lsrs	r2, r0, #24
 80074ca:	d102      	bne.n	80074d2 <SEQ_BitPosition+0x16>
 80074cc:	3308      	adds	r3, #8
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 80074d2:	0f02      	lsrs	r2, r0, #28
 80074d4:	d102      	bne.n	80074dc <SEQ_BitPosition+0x20>
 80074d6:	3304      	adds	r3, #4
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];

  return (uint8_t)(31U-n);
 80074dc:	221f      	movs	r2, #31
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	4a02      	ldr	r2, [pc, #8]	; (80074ec <SEQ_BitPosition+0x30>)
  n += SEQ_clz_table_4bit[Value >> (32-4)];
 80074e2:	0f00      	lsrs	r0, r0, #28
  return (uint8_t)(31U-n);
 80074e4:	5c10      	ldrb	r0, [r2, r0]
 80074e6:	1a18      	subs	r0, r3, r0
 80074e8:	b2c0      	uxtb	r0, r0
}
 80074ea:	4770      	bx	lr
 80074ec:	08008da5 	.word	0x08008da5

080074f0 <UTIL_SEQ_Run>:
{
 80074f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  super_mask_backup = SuperMask;
 80074f2:	4e2f      	ldr	r6, [pc, #188]	; (80075b0 <UTIL_SEQ_Run+0xc0>)
 80074f4:	6873      	ldr	r3, [r6, #4]
  SuperMask &= Mask_bm;
 80074f6:	4018      	ands	r0, r3
  super_mask_backup = SuperMask;
 80074f8:	9301      	str	r3, [sp, #4]
  SuperMask &= Mask_bm;
 80074fa:	6070      	str	r0, [r6, #4]
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80074fc:	4c2d      	ldr	r4, [pc, #180]	; (80075b4 <UTIL_SEQ_Run+0xc4>)
 80074fe:	6830      	ldr	r0, [r6, #0]
 8007500:	6822      	ldr	r2, [r4, #0]
 8007502:	6873      	ldr	r3, [r6, #4]
 8007504:	4002      	ands	r2, r0
 8007506:	4213      	tst	r3, r2
 8007508:	d037      	beq.n	800757a <UTIL_SEQ_Run+0x8a>
 800750a:	68a1      	ldr	r1, [r4, #8]
 800750c:	6862      	ldr	r2, [r4, #4]
 800750e:	000d      	movs	r5, r1
 8007510:	4015      	ands	r5, r2
 8007512:	4211      	tst	r1, r2
 8007514:	d131      	bne.n	800757a <UTIL_SEQ_Run+0x8a>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8007516:	6922      	ldr	r2, [r4, #16]
 8007518:	4003      	ands	r3, r0
 800751a:	0010      	movs	r0, r2
 800751c:	4018      	ands	r0, r3
 800751e:	421a      	tst	r2, r3
 8007520:	d102      	bne.n	8007528 <UTIL_SEQ_Run+0x38>
      counter++;
 8007522:	2501      	movs	r5, #1
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8007524:	69a0      	ldr	r0, [r4, #24]
 8007526:	4018      	ands	r0, r3
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8007528:	00ed      	lsls	r5, r5, #3
 800752a:	1963      	adds	r3, r4, r5
 800752c:	695a      	ldr	r2, [r3, #20]
 800752e:	4202      	tst	r2, r0
 8007530:	d102      	bne.n	8007538 <UTIL_SEQ_Run+0x48>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8007532:	2201      	movs	r2, #1
 8007534:	4252      	negs	r2, r2
 8007536:	615a      	str	r2, [r3, #20]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8007538:	1965      	adds	r5, r4, r5
 800753a:	696f      	ldr	r7, [r5, #20]
 800753c:	4038      	ands	r0, r7
 800753e:	f7ff ffbd 	bl	80074bc <SEQ_BitPosition>
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8007542:	2301      	movs	r3, #1
 8007544:	4083      	lsls	r3, r0
 8007546:	439f      	bics	r7, r3
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8007548:	60e0      	str	r0, [r4, #12]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800754a:	616f      	str	r7, [r5, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800754c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007550:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8007552:	2301      	movs	r3, #1
 8007554:	68e2      	ldr	r2, [r4, #12]
 8007556:	4093      	lsls	r3, r2
 8007558:	6822      	ldr	r2, [r4, #0]
 800755a:	439a      	bics	r2, r3
 800755c:	6022      	str	r2, [r4, #0]
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800755e:	69a2      	ldr	r2, [r4, #24]
 8007560:	439a      	bics	r2, r3
 8007562:	61a2      	str	r2, [r4, #24]
 8007564:	6922      	ldr	r2, [r4, #16]
 8007566:	439a      	bics	r2, r3
 8007568:	6122      	str	r2, [r4, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800756a:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 800756e:	68e3      	ldr	r3, [r4, #12]
 8007570:	4a11      	ldr	r2, [pc, #68]	; (80075b8 <UTIL_SEQ_Run+0xc8>)
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	589b      	ldr	r3, [r3, r2]
 8007576:	4798      	blx	r3
 8007578:	e7c0      	b.n	80074fc <UTIL_SEQ_Run+0xc>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800757a:	2301      	movs	r3, #1
 800757c:	425b      	negs	r3, r3
 800757e:	60e3      	str	r3, [r4, #12]
  UTIL_SEQ_PreIdle( );
 8007580:	f7ff ff9a 	bl	80074b8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007584:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007588:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800758a:	6822      	ldr	r2, [r4, #0]
 800758c:	6833      	ldr	r3, [r6, #0]
 800758e:	6861      	ldr	r1, [r4, #4]
 8007590:	4013      	ands	r3, r2
 8007592:	6872      	ldr	r2, [r6, #4]
 8007594:	4013      	ands	r3, r2
 8007596:	68a2      	ldr	r2, [r4, #8]
 8007598:	400a      	ands	r2, r1
 800759a:	4313      	orrs	r3, r2
 800759c:	d101      	bne.n	80075a2 <UTIL_SEQ_Run+0xb2>
	UTIL_SEQ_Idle( );
 800759e:	f7fb fa39 	bl	8002a14 <UTIL_SEQ_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075a2:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 80075a6:	f7ff ff88 	bl	80074ba <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 80075aa:	9b01      	ldr	r3, [sp, #4]
 80075ac:	6073      	str	r3, [r6, #4]
}
 80075ae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80075b0:	20000028 	.word	0x20000028
 80075b4:	20000480 	.word	0x20000480
 80075b8:	200004a0 	.word	0x200004a0

080075bc <UTIL_SEQ_RegTask>:
{
 80075bc:	b570      	push	{r4, r5, r6, lr}
 80075be:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075c0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80075c4:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80075c6:	f7ff ff79 	bl	80074bc <SEQ_BitPosition>
 80075ca:	4b03      	ldr	r3, [pc, #12]	; (80075d8 <UTIL_SEQ_RegTask+0x1c>)
 80075cc:	0080      	lsls	r0, r0, #2
 80075ce:	50c4      	str	r4, [r0, r3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075d0:	f385 8810 	msr	PRIMASK, r5
}
 80075d4:	bd70      	pop	{r4, r5, r6, pc}
 80075d6:	46c0      	nop			; (mov r8, r8)
 80075d8:	200004a0 	.word	0x200004a0

080075dc <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 80075dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80075de:	2300      	movs	r3, #0
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80075e0:	4e12      	ldr	r6, [pc, #72]	; (800762c <SysTimeGet+0x50>)
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80075e2:	aa02      	add	r2, sp, #8
 80075e4:	8093      	strh	r3, [r2, #4]
 80075e6:	9302      	str	r3, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80075e8:	6933      	ldr	r3, [r6, #16]
{
 80075ea:	0004      	movs	r4, r0
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80075ec:	a803      	add	r0, sp, #12
 80075ee:	9301      	str	r3, [sp, #4]
 80075f0:	4798      	blx	r3

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80075f2:	68f3      	ldr	r3, [r6, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80075f4:	9002      	str	r0, [sp, #8]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80075f6:	9301      	str	r3, [sp, #4]
 80075f8:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80075fa:	6873      	ldr	r3, [r6, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80075fc:	0005      	movs	r5, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80075fe:	9301      	str	r3, [sp, #4]
 8007600:	4798      	blx	r3
  if( c.SubSeconds >= 1000 )
 8007602:	22fa      	movs	r2, #250	; 0xfa
  c.Seconds = a.Seconds + b.Seconds;
 8007604:	9b02      	ldr	r3, [sp, #8]
  if( c.SubSeconds >= 1000 )
 8007606:	0092      	lsls	r2, r2, #2
  c.Seconds = a.Seconds + b.Seconds;
 8007608:	18c0      	adds	r0, r0, r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800760a:	ab02      	add	r3, sp, #8
 800760c:	889b      	ldrh	r3, [r3, #4]
 800760e:	195b      	adds	r3, r3, r5
 8007610:	b299      	uxth	r1, r3
 8007612:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 8007614:	4293      	cmp	r3, r2
 8007616:	db03      	blt.n	8007620 <SysTimeGet+0x44>
    c.SubSeconds -= 1000;
 8007618:	4b05      	ldr	r3, [pc, #20]	; (8007630 <SysTimeGet+0x54>)
    c.Seconds++;
 800761a:	3001      	adds	r0, #1
    c.SubSeconds -= 1000;
 800761c:	18c9      	adds	r1, r1, r3
 800761e:	b20b      	sxth	r3, r1

  sysTime = SysTimeAdd( DeltaTime, calendarTime );

  return sysTime;
 8007620:	6020      	str	r0, [r4, #0]
}
 8007622:	0020      	movs	r0, r4
  return sysTime;
 8007624:	80a3      	strh	r3, [r4, #4]
}
 8007626:	b004      	add	sp, #16
 8007628:	bd70      	pop	{r4, r5, r6, pc}
 800762a:	46c0      	nop			; (mov r8, r8)
 800762c:	08008b6c 	.word	0x08008b6c
 8007630:	fffffc18 	.word	0xfffffc18

08007634 <UTIL_TIMER_Init>:
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8007634:	2200      	movs	r2, #0
{
 8007636:	b510      	push	{r4, lr}
  TimerListHead = NULL;
 8007638:	4b02      	ldr	r3, [pc, #8]	; (8007644 <UTIL_TIMER_Init+0x10>)
 800763a:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800763c:	4b02      	ldr	r3, [pc, #8]	; (8007648 <UTIL_TIMER_Init+0x14>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4798      	blx	r3
}
 8007642:	bd10      	pop	{r4, pc}
 8007644:	20000520 	.word	0x20000520
 8007648:	08008b80 	.word	0x08008b80

0800764c <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800764c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800764e:	0004      	movs	r4, r0
 8007650:	0017      	movs	r7, r2
 8007652:	0008      	movs	r0, r1
 8007654:	001e      	movs	r6, r3
    TimerObject->Next = NULL;
    return UTIL_TIMER_OK;
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 8007656:	2501      	movs	r5, #1
  if((TimerObject != NULL) && (Callback != NULL))
 8007658:	2c00      	cmp	r4, #0
 800765a:	d00f      	beq.n	800767c <UTIL_TIMER_Create+0x30>
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00d      	beq.n	800767c <UTIL_TIMER_Create+0x30>
    TimerObject->Timestamp = 0U;
 8007660:	2500      	movs	r5, #0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8007662:	4b07      	ldr	r3, [pc, #28]	; (8007680 <UTIL_TIMER_Create+0x34>)
    TimerObject->Timestamp = 0U;
 8007664:	6025      	str	r5, [r4, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8007666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007668:	9301      	str	r3, [sp, #4]
 800766a:	4798      	blx	r3
    TimerObject->argument = Argument;
 800766c:	9b08      	ldr	r3, [sp, #32]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800766e:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8007670:	8125      	strh	r5, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 8007672:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8007674:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8007676:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8007678:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 800767a:	6165      	str	r5, [r4, #20]
  }
}
 800767c:	0028      	movs	r0, r5
 800767e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007680:	08008b80 	.word	0x08008b80

08007684 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8007684:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8007686:	4c03      	ldr	r4, [pc, #12]	; (8007694 <UTIL_TIMER_GetCurrentTime+0x10>)
 8007688:	69e3      	ldr	r3, [r4, #28]
 800768a:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 800768c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800768e:	4798      	blx	r3
}
 8007690:	bd10      	pop	{r4, pc}
 8007692:	46c0      	nop			; (mov r8, r8)
 8007694:	08008b80 	.word	0x08008b80

08007698 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8007698:	b570      	push	{r4, r5, r6, lr}
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800769a:	4d06      	ldr	r5, [pc, #24]	; (80076b4 <UTIL_TIMER_GetElapsedTime+0x1c>)
{
 800769c:	0006      	movs	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800769e:	69eb      	ldr	r3, [r5, #28]
 80076a0:	4798      	blx	r3
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 80076a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 80076a4:	0004      	movs	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 80076a6:	0030      	movs	r0, r6
 80076a8:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 80076aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80076ac:	1a20      	subs	r0, r4, r0
 80076ae:	4798      	blx	r3
}
 80076b0:	bd70      	pop	{r4, r5, r6, pc}
 80076b2:	46c0      	nop			; (mov r8, r8)
 80076b4:	08008b80 	.word	0x08008b80

080076b8 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80076b8:	4a05      	ldr	r2, [pc, #20]	; (80076d0 <TimerExists+0x18>)
{
 80076ba:	0003      	movs	r3, r0
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80076bc:	6810      	ldr	r0, [r2, #0]

  while( cur != NULL )
 80076be:	2800      	cmp	r0, #0
 80076c0:	d100      	bne.n	80076c4 <TimerExists+0xc>
      return true;
    }
    cur = cur->Next;
  }
  return false;
}
 80076c2:	4770      	bx	lr
    if( cur == TimerObject )
 80076c4:	4298      	cmp	r0, r3
 80076c6:	d001      	beq.n	80076cc <TimerExists+0x14>
    cur = cur->Next;
 80076c8:	6940      	ldr	r0, [r0, #20]
 80076ca:	e7f8      	b.n	80076be <TimerExists+0x6>
      return true;
 80076cc:	2001      	movs	r0, #1
 80076ce:	e7f8      	b.n	80076c2 <TimerExists+0xa>
 80076d0:	20000520 	.word	0x20000520

080076d4 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 80076d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 80076d6:	4e0c      	ldr	r6, [pc, #48]	; (8007708 <TimerSetTimeout+0x34>)
{
 80076d8:	0004      	movs	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 80076da:	6a33      	ldr	r3, [r6, #32]
 80076dc:	9301      	str	r3, [sp, #4]
 80076de:	4798      	blx	r3
  TimerObject->IsPending = 1;
 80076e0:	2301      	movs	r3, #1
 80076e2:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 80076e4:	69b3      	ldr	r3, [r6, #24]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 80076e6:	0005      	movs	r5, r0
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 80076e8:	6827      	ldr	r7, [r4, #0]
 80076ea:	9301      	str	r3, [sp, #4]
 80076ec:	4798      	blx	r3
 80076ee:	1940      	adds	r0, r0, r5
 80076f0:	4287      	cmp	r7, r0
 80076f2:	d203      	bcs.n	80076fc <TimerSetTimeout+0x28>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 80076f4:	9b01      	ldr	r3, [sp, #4]
 80076f6:	4798      	blx	r3
 80076f8:	1945      	adds	r5, r0, r5
 80076fa:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 80076fc:	68b3      	ldr	r3, [r6, #8]
 80076fe:	6820      	ldr	r0, [r4, #0]
 8007700:	9301      	str	r3, [sp, #4]
 8007702:	4798      	blx	r3
}
 8007704:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007706:	46c0      	nop			; (mov r8, r8)
 8007708:	08008b80 	.word	0x08008b80

0800770c <UTIL_TIMER_Stop>:
{
 800770c:	0003      	movs	r3, r0
 800770e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ret = UTIL_TIMER_INVALID_PARAM;
 8007710:	2001      	movs	r0, #1
  if (NULL != TimerObject)
 8007712:	2b00      	cmp	r3, #0
 8007714:	d016      	beq.n	8007744 <UTIL_TIMER_Stop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007716:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800771a:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800771c:	4c11      	ldr	r4, [pc, #68]	; (8007764 <UTIL_TIMER_Stop+0x58>)
    TimerObject->IsReloadStopped = 1U;
 800771e:	7298      	strb	r0, [r3, #10]
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8007720:	6822      	ldr	r2, [r4, #0]
    if(NULL != TimerListHead)
 8007722:	2a00      	cmp	r2, #0
 8007724:	d00b      	beq.n	800773e <UTIL_TIMER_Stop+0x32>
      TimerObject->IsRunning = 0U;
 8007726:	2100      	movs	r1, #0
 8007728:	7259      	strb	r1, [r3, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800772a:	4293      	cmp	r3, r2
 800772c:	d111      	bne.n	8007752 <UTIL_TIMER_Stop+0x46>
 800772e:	695e      	ldr	r6, [r3, #20]
          TimerListHead->IsPending = 0;
 8007730:	7219      	strb	r1, [r3, #8]
          if( TimerListHead->Next != NULL )
 8007732:	428e      	cmp	r6, r1
 8007734:	d007      	beq.n	8007746 <UTIL_TIMER_Stop+0x3a>
            TimerSetTimeout( TimerListHead );
 8007736:	0030      	movs	r0, r6
            TimerListHead = TimerListHead->Next;
 8007738:	6026      	str	r6, [r4, #0]
            TimerSetTimeout( TimerListHead );
 800773a:	f7ff ffcb 	bl	80076d4 <TimerSetTimeout>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800773e:	f385 8810 	msr	PRIMASK, r5
}
 8007742:	2000      	movs	r0, #0
}
 8007744:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
            UTIL_TimerDriver.StopTimerEvt( );
 8007746:	4b08      	ldr	r3, [pc, #32]	; (8007768 <UTIL_TIMER_Stop+0x5c>)
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	9301      	str	r3, [sp, #4]
 800774c:	4798      	blx	r3
            TimerListHead = NULL;
 800774e:	6026      	str	r6, [r4, #0]
 8007750:	e7f5      	b.n	800773e <UTIL_TIMER_Stop+0x32>
            cur = cur->Next;
 8007752:	0011      	movs	r1, r2
 8007754:	6952      	ldr	r2, [r2, #20]
        while( cur != NULL )
 8007756:	2a00      	cmp	r2, #0
 8007758:	d0f1      	beq.n	800773e <UTIL_TIMER_Stop+0x32>
          if( cur == TimerObject )
 800775a:	4293      	cmp	r3, r2
 800775c:	d1f9      	bne.n	8007752 <UTIL_TIMER_Stop+0x46>
            if( cur->Next != NULL )
 800775e:	695b      	ldr	r3, [r3, #20]
 8007760:	614b      	str	r3, [r1, #20]
 8007762:	e7ec      	b.n	800773e <UTIL_TIMER_Stop+0x32>
 8007764:	20000520 	.word	0x20000520
 8007768:	08008b80 	.word	0x08008b80

0800776c <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800776c:	4b09      	ldr	r3, [pc, #36]	; (8007794 <TimerInsertTimer+0x28>)
 800776e:	681b      	ldr	r3, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8007770:	695a      	ldr	r2, [r3, #20]

  while (cur->Next != NULL )
 8007772:	6959      	ldr	r1, [r3, #20]
 8007774:	2900      	cmp	r1, #0
 8007776:	d102      	bne.n	800777e <TimerInsertTimer+0x12>
        TimerObject->Next = next;
        return;

    }
  }
  cur->Next = TimerObject;
 8007778:	6158      	str	r0, [r3, #20]
  TimerObject->Next = NULL;
 800777a:	6141      	str	r1, [r0, #20]
 800777c:	e009      	b.n	8007792 <TimerInsertTimer+0x26>
    if( TimerObject->Timestamp  > next->Timestamp )
 800777e:	6801      	ldr	r1, [r0, #0]
 8007780:	468c      	mov	ip, r1
 8007782:	6811      	ldr	r1, [r2, #0]
 8007784:	458c      	cmp	ip, r1
 8007786:	d902      	bls.n	800778e <TimerInsertTimer+0x22>
        next = next->Next;
 8007788:	0013      	movs	r3, r2
 800778a:	6952      	ldr	r2, [r2, #20]
 800778c:	e7f1      	b.n	8007772 <TimerInsertTimer+0x6>
        cur->Next = TimerObject;
 800778e:	6158      	str	r0, [r3, #20]
        TimerObject->Next = next;
 8007790:	6142      	str	r2, [r0, #20]
}
 8007792:	4770      	bx	lr
 8007794:	20000520 	.word	0x20000520

08007798 <TimerInsertNewHeadTimer>:
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8007798:	4a05      	ldr	r2, [pc, #20]	; (80077b0 <TimerInsertNewHeadTimer+0x18>)
{
 800779a:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800779c:	6813      	ldr	r3, [r2, #0]

  if( cur != NULL )
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <TimerInsertNewHeadTimer+0xe>
  {
    cur->IsPending = 0;
 80077a2:	2100      	movs	r1, #0
 80077a4:	7219      	strb	r1, [r3, #8]
  }

  TimerObject->Next = cur;
 80077a6:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 80077a8:	6010      	str	r0, [r2, #0]
  TimerSetTimeout( TimerListHead );
 80077aa:	f7ff ff93 	bl	80076d4 <TimerSetTimeout>
}
 80077ae:	bd10      	pop	{r4, pc}
 80077b0:	20000520 	.word	0x20000520

080077b4 <UTIL_TIMER_Start>:
{
 80077b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077b6:	0004      	movs	r4, r0
    ret =  UTIL_TIMER_INVALID_PARAM;
 80077b8:	2501      	movs	r5, #1
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 80077ba:	2800      	cmp	r0, #0
 80077bc:	d025      	beq.n	800780a <UTIL_TIMER_Start+0x56>
 80077be:	f7ff ff7b 	bl	80076b8 <TimerExists>
 80077c2:	2800      	cmp	r0, #0
 80077c4:	d121      	bne.n	800780a <UTIL_TIMER_Start+0x56>
 80077c6:	7a65      	ldrb	r5, [r4, #9]
 80077c8:	2d00      	cmp	r5, #0
 80077ca:	d12e      	bne.n	800782a <UTIL_TIMER_Start+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077cc:	f3ef 8310 	mrs	r3, PRIMASK
 80077d0:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80077d2:	b672      	cpsid	i
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 80077d4:	4e16      	ldr	r6, [pc, #88]	; (8007830 <UTIL_TIMER_Start+0x7c>)
    ticks = TimerObject->ReloadValue;
 80077d6:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 80077d8:	6a33      	ldr	r3, [r6, #32]
 80077da:	9301      	str	r3, [sp, #4]
 80077dc:	4798      	blx	r3
    TimerObject->Timestamp = ticks;
 80077de:	4287      	cmp	r7, r0
 80077e0:	d200      	bcs.n	80077e4 <UTIL_TIMER_Start+0x30>
 80077e2:	0007      	movs	r7, r0
    TimerObject->IsPending = 0U;
 80077e4:	2380      	movs	r3, #128	; 0x80
 80077e6:	005b      	lsls	r3, r3, #1
 80077e8:	8123      	strh	r3, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 80077ea:	2300      	movs	r3, #0
    TimerObject->Timestamp = ticks;
 80077ec:	6027      	str	r7, [r4, #0]
    if( TimerListHead == NULL )
 80077ee:	4f11      	ldr	r7, [pc, #68]	; (8007834 <UTIL_TIMER_Start+0x80>)
    TimerObject->IsReloadStopped = 0U;
 80077f0:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10a      	bne.n	800780e <UTIL_TIMER_Start+0x5a>
      UTIL_TimerDriver.SetTimerContext();
 80077f8:	6933      	ldr	r3, [r6, #16]
 80077fa:	9301      	str	r3, [sp, #4]
 80077fc:	4798      	blx	r3
        TimerInsertNewHeadTimer( TimerObject);
 80077fe:	0020      	movs	r0, r4
 8007800:	f7ff ffca 	bl	8007798 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007804:	9b00      	ldr	r3, [sp, #0]
 8007806:	f383 8810 	msr	PRIMASK, r3
}
 800780a:	0028      	movs	r0, r5
 800780c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800780e:	69b3      	ldr	r3, [r6, #24]
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8007814:	6823      	ldr	r3, [r4, #0]
 8007816:	18c0      	adds	r0, r0, r3
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8007818:	683b      	ldr	r3, [r7, #0]
      TimerObject->Timestamp += elapsedTime;
 800781a:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4298      	cmp	r0, r3
 8007820:	d3ed      	bcc.n	80077fe <UTIL_TIMER_Start+0x4a>
        TimerInsertTimer( TimerObject);
 8007822:	0020      	movs	r0, r4
 8007824:	f7ff ffa2 	bl	800776c <TimerInsertTimer>
 8007828:	e7ec      	b.n	8007804 <UTIL_TIMER_Start+0x50>
    ret =  UTIL_TIMER_INVALID_PARAM;
 800782a:	2501      	movs	r5, #1
 800782c:	e7ed      	b.n	800780a <UTIL_TIMER_Start+0x56>
 800782e:	46c0      	nop			; (mov r8, r8)
 8007830:	08008b80 	.word	0x08008b80
 8007834:	20000520 	.word	0x20000520

08007838 <UTIL_TIMER_SetPeriod>:
{
 8007838:	b513      	push	{r0, r1, r4, lr}
	  ret = UTIL_TIMER_INVALID_PARAM;
 800783a:	2301      	movs	r3, #1
{
 800783c:	0004      	movs	r4, r0
 800783e:	0008      	movs	r0, r1
  if(NULL == TimerObject)
 8007840:	2c00      	cmp	r4, #0
 8007842:	d011      	beq.n	8007868 <UTIL_TIMER_SetPeriod+0x30>
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8007844:	4b09      	ldr	r3, [pc, #36]	; (800786c <UTIL_TIMER_SetPeriod+0x34>)
 8007846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007848:	9301      	str	r3, [sp, #4]
 800784a:	4798      	blx	r3
 800784c:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 800784e:	0020      	movs	r0, r4
 8007850:	f7ff ff32 	bl	80076b8 <TimerExists>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8007854:	2300      	movs	r3, #0
    if(TimerExists(TimerObject))
 8007856:	4298      	cmp	r0, r3
 8007858:	d006      	beq.n	8007868 <UTIL_TIMER_SetPeriod+0x30>
      (void)UTIL_TIMER_Stop(TimerObject);
 800785a:	0020      	movs	r0, r4
 800785c:	f7ff ff56 	bl	800770c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8007860:	0020      	movs	r0, r4
 8007862:	f7ff ffa7 	bl	80077b4 <UTIL_TIMER_Start>
 8007866:	0003      	movs	r3, r0
}
 8007868:	0018      	movs	r0, r3
 800786a:	bd16      	pop	{r1, r2, r4, pc}
 800786c:	08008b80 	.word	0x08008b80

08007870 <UTIL_TIMER_IRQ_Handler>:
{
 8007870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007872:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007876:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8007878:	4e1e      	ldr	r6, [pc, #120]	; (80078f4 <UTIL_TIMER_IRQ_Handler+0x84>)
 800787a:	6973      	ldr	r3, [r6, #20]
 800787c:	9301      	str	r3, [sp, #4]
 800787e:	4798      	blx	r3
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8007880:	6933      	ldr	r3, [r6, #16]
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8007882:	0004      	movs	r4, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8007884:	9301      	str	r3, [sp, #4]
 8007886:	4798      	blx	r3
  if ( TimerListHead != NULL )
 8007888:	4d1b      	ldr	r5, [pc, #108]	; (80078f8 <UTIL_TIMER_IRQ_Handler+0x88>)
  DeltaContext = now  - old; /*intentional wrap around */
 800788a:	1b01      	subs	r1, r0, r4
  if ( TimerListHead != NULL )
 800788c:	682b      	ldr	r3, [r5, #0]
        cur->Timestamp -= DeltaContext;
 800788e:	1a24      	subs	r4, r4, r0
  if ( TimerListHead != NULL )
 8007890:	2b00      	cmp	r3, #0
 8007892:	d01f      	beq.n	80078d4 <UTIL_TIMER_IRQ_Handler+0x64>
      if (cur->Timestamp > DeltaContext)
 8007894:	6818      	ldr	r0, [r3, #0]
        cur->Timestamp = 0;
 8007896:	2200      	movs	r2, #0
      if (cur->Timestamp > DeltaContext)
 8007898:	4288      	cmp	r0, r1
 800789a:	d900      	bls.n	800789e <UTIL_TIMER_IRQ_Handler+0x2e>
        cur->Timestamp -= DeltaContext;
 800789c:	1822      	adds	r2, r4, r0
 800789e:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 80078a0:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 80078a2:	e7f5      	b.n	8007890 <UTIL_TIMER_IRQ_Handler+0x20>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 80078a4:	681c      	ldr	r4, [r3, #0]
 80078a6:	2c00      	cmp	r4, #0
 80078a8:	d004      	beq.n	80078b4 <UTIL_TIMER_IRQ_Handler+0x44>
 80078aa:	69b3      	ldr	r3, [r6, #24]
 80078ac:	9301      	str	r3, [sp, #4]
 80078ae:	4798      	blx	r3
 80078b0:	4284      	cmp	r4, r0
 80078b2:	d212      	bcs.n	80078da <UTIL_TIMER_IRQ_Handler+0x6a>
      cur = TimerListHead;
 80078b4:	682c      	ldr	r4, [r5, #0]
      TimerListHead = TimerListHead->Next;
 80078b6:	6963      	ldr	r3, [r4, #20]
      cur->Callback(cur->argument);
 80078b8:	6920      	ldr	r0, [r4, #16]
      TimerListHead = TimerListHead->Next;
 80078ba:	602b      	str	r3, [r5, #0]
      cur->IsPending = 0;
 80078bc:	2300      	movs	r3, #0
 80078be:	8123      	strh	r3, [r4, #8]
      cur->Callback(cur->argument);
 80078c0:	68e3      	ldr	r3, [r4, #12]
 80078c2:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 80078c4:	2280      	movs	r2, #128	; 0x80
 80078c6:	8963      	ldrh	r3, [r4, #10]
 80078c8:	0052      	lsls	r2, r2, #1
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d102      	bne.n	80078d4 <UTIL_TIMER_IRQ_Handler+0x64>
        (void)UTIL_TIMER_Start(cur);
 80078ce:	0020      	movs	r0, r4
 80078d0:	f7ff ff70 	bl	80077b4 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 80078d4:	682b      	ldr	r3, [r5, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1e4      	bne.n	80078a4 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 80078da:	6828      	ldr	r0, [r5, #0]
 80078dc:	2800      	cmp	r0, #0
 80078de:	d102      	bne.n	80078e6 <UTIL_TIMER_IRQ_Handler+0x76>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078e0:	f387 8810 	msr	PRIMASK, r7
}
 80078e4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 80078e6:	7a03      	ldrb	r3, [r0, #8]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1f9      	bne.n	80078e0 <UTIL_TIMER_IRQ_Handler+0x70>
    TimerSetTimeout( TimerListHead );
 80078ec:	f7ff fef2 	bl	80076d4 <TimerSetTimeout>
 80078f0:	e7f6      	b.n	80078e0 <UTIL_TIMER_IRQ_Handler+0x70>
 80078f2:	46c0      	nop			; (mov r8, r8)
 80078f4:	08008b80 	.word	0x08008b80
 80078f8:	20000520 	.word	0x20000520

080078fc <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 80078fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078fe:	b09f      	sub	sp, #124	; 0x7c
 8007900:	9002      	str	r0, [sp, #8]
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
  {
    return 0;
 8007902:	2000      	movs	r0, #0
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8007904:	9c02      	ldr	r4, [sp, #8]
{
 8007906:	910a      	str	r1, [sp, #40]	; 0x28
  if (size <= 0)
 8007908:	4281      	cmp	r1, r0
 800790a:	dc0a      	bgt.n	8007922 <tiny_vsnprintf_like+0x26>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
  }

  *str = '\0';
  return str - buf;
}
 800790c:	b01f      	add	sp, #124	; 0x7c
 800790e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CHECK_STR_SIZE(buf, str, size);
 8007910:	4288      	cmp	r0, r1
 8007912:	da0d      	bge.n	8007930 <tiny_vsnprintf_like+0x34>
    if (*fmt != '%')
 8007914:	2d25      	cmp	r5, #37	; 0x25
 8007916:	d00e      	beq.n	8007936 <tiny_vsnprintf_like+0x3a>
      *str++ = *fmt;
 8007918:	7025      	strb	r5, [r4, #0]
      continue;
 800791a:	9201      	str	r2, [sp, #4]
      *str++ = *fmt;
 800791c:	3401      	adds	r4, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800791e:	9a01      	ldr	r2, [sp, #4]
 8007920:	3201      	adds	r2, #1
 8007922:	9902      	ldr	r1, [sp, #8]
 8007924:	7815      	ldrb	r5, [r2, #0]
 8007926:	1a60      	subs	r0, r4, r1
 8007928:	990a      	ldr	r1, [sp, #40]	; 0x28
 800792a:	3901      	subs	r1, #1
 800792c:	2d00      	cmp	r5, #0
 800792e:	d1ef      	bne.n	8007910 <tiny_vsnprintf_like+0x14>
  *str = '\0';
 8007930:	2300      	movs	r3, #0
 8007932:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8007934:	e7ea      	b.n	800790c <tiny_vsnprintf_like+0x10>
 8007936:	1c50      	adds	r0, r2, #1
    if (*fmt == '0')
 8007938:	7852      	ldrb	r2, [r2, #1]
 800793a:	9001      	str	r0, [sp, #4]
 800793c:	0015      	movs	r5, r2
 800793e:	3d30      	subs	r5, #48	; 0x30
 8007940:	9205      	str	r2, [sp, #20]
 8007942:	4268      	negs	r0, r5
 8007944:	4168      	adcs	r0, r5
    if (is_digit(*fmt))
 8007946:	b2ed      	uxtb	r5, r5
      flags |= ZEROPAD;
 8007948:	0002      	movs	r2, r0
    if (is_digit(*fmt))
 800794a:	2d09      	cmp	r5, #9
 800794c:	d92d      	bls.n	80079aa <tiny_vsnprintf_like+0xae>
    field_width = -1;
 800794e:	2701      	movs	r7, #1
 8007950:	427f      	negs	r7, r7
    switch (*fmt)
 8007952:	9d01      	ldr	r5, [sp, #4]
 8007954:	782e      	ldrb	r6, [r5, #0]
 8007956:	2e69      	cmp	r6, #105	; 0x69
 8007958:	d100      	bne.n	800795c <tiny_vsnprintf_like+0x60>
 800795a:	e0ab      	b.n	8007ab4 <tiny_vsnprintf_like+0x1b8>
 800795c:	d827      	bhi.n	80079ae <tiny_vsnprintf_like+0xb2>
 800795e:	2e63      	cmp	r6, #99	; 0x63
 8007960:	d036      	beq.n	80079d0 <tiny_vsnprintf_like+0xd4>
 8007962:	2e64      	cmp	r6, #100	; 0x64
 8007964:	d100      	bne.n	8007968 <tiny_vsnprintf_like+0x6c>
 8007966:	e0a5      	b.n	8007ab4 <tiny_vsnprintf_like+0x1b8>
 8007968:	2e58      	cmp	r6, #88	; 0x58
 800796a:	d068      	beq.n	8007a3e <tiny_vsnprintf_like+0x142>
        if (*fmt != '%') *str++ = '%';
 800796c:	0020      	movs	r0, r4
 800796e:	2e25      	cmp	r6, #37	; 0x25
 8007970:	d125      	bne.n	80079be <tiny_vsnprintf_like+0xc2>
        if (*fmt)
 8007972:	9c01      	ldr	r4, [sp, #4]
 8007974:	7825      	ldrb	r5, [r4, #0]
 8007976:	2d00      	cmp	r5, #0
 8007978:	d100      	bne.n	800797c <tiny_vsnprintf_like+0x80>
 800797a:	e09f      	b.n	8007abc <tiny_vsnprintf_like+0x1c0>
          *str++ = *fmt;
 800797c:	1c44      	adds	r4, r0, #1
 800797e:	7005      	strb	r5, [r0, #0]
        CHECK_STR_SIZE(buf, str, size);
 8007980:	9802      	ldr	r0, [sp, #8]
    base = 10;
 8007982:	250a      	movs	r5, #10
        CHECK_STR_SIZE(buf, str, size);
 8007984:	1a20      	subs	r0, r4, r0
 8007986:	4288      	cmp	r0, r1
 8007988:	da5c      	bge.n	8007a44 <tiny_vsnprintf_like+0x148>
 800798a:	e7c8      	b.n	800791e <tiny_vsnprintf_like+0x22>
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800798c:	9e01      	ldr	r6, [sp, #4]
 800798e:	3601      	adds	r6, #1
 8007990:	9601      	str	r6, [sp, #4]
 8007992:	260a      	movs	r6, #10
 8007994:	4377      	muls	r7, r6
 8007996:	197d      	adds	r5, r7, r5
 8007998:	3d30      	subs	r5, #48	; 0x30
 800799a:	002f      	movs	r7, r5
 800799c:	9d01      	ldr	r5, [sp, #4]
 800799e:	782d      	ldrb	r5, [r5, #0]
 80079a0:	002e      	movs	r6, r5
 80079a2:	3e30      	subs	r6, #48	; 0x30
 80079a4:	2e09      	cmp	r6, #9
 80079a6:	d9f1      	bls.n	800798c <tiny_vsnprintf_like+0x90>
 80079a8:	e7d3      	b.n	8007952 <tiny_vsnprintf_like+0x56>
  int i = 0;
 80079aa:	2700      	movs	r7, #0
 80079ac:	e7f6      	b.n	800799c <tiny_vsnprintf_like+0xa0>
    switch (*fmt)
 80079ae:	2e75      	cmp	r6, #117	; 0x75
 80079b0:	d100      	bne.n	80079b4 <tiny_vsnprintf_like+0xb8>
 80079b2:	e081      	b.n	8007ab8 <tiny_vsnprintf_like+0x1bc>
 80079b4:	2510      	movs	r5, #16
 80079b6:	2e78      	cmp	r6, #120	; 0x78
 80079b8:	d044      	beq.n	8007a44 <tiny_vsnprintf_like+0x148>
 80079ba:	2e73      	cmp	r6, #115	; 0x73
 80079bc:	d020      	beq.n	8007a00 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 80079be:	2525      	movs	r5, #37	; 0x25
 80079c0:	1c60      	adds	r0, r4, #1
 80079c2:	7025      	strb	r5, [r4, #0]
        CHECK_STR_SIZE(buf, str, size);
 80079c4:	9c02      	ldr	r4, [sp, #8]
 80079c6:	1b04      	subs	r4, r0, r4
 80079c8:	428c      	cmp	r4, r1
 80079ca:	dbd2      	blt.n	8007972 <tiny_vsnprintf_like+0x76>
        if (*fmt != '%') *str++ = '%';
 80079cc:	0004      	movs	r4, r0
 80079ce:	e073      	b.n	8007ab8 <tiny_vsnprintf_like+0x1bc>
 80079d0:	0021      	movs	r1, r4
    switch (*fmt)
 80079d2:	003a      	movs	r2, r7
          while (--field_width > 0) *str++ = ' ';
 80079d4:	3a01      	subs	r2, #1
 80079d6:	2a00      	cmp	r2, #0
 80079d8:	dc0e      	bgt.n	80079f8 <tiny_vsnprintf_like+0xfc>
 80079da:	2200      	movs	r2, #0
 80079dc:	4297      	cmp	r7, r2
 80079de:	dd00      	ble.n	80079e2 <tiny_vsnprintf_like+0xe6>
 80079e0:	1e7a      	subs	r2, r7, #1
 80079e2:	2101      	movs	r1, #1
 80079e4:	18a2      	adds	r2, r4, r2
 80079e6:	2f00      	cmp	r7, #0
 80079e8:	dd00      	ble.n	80079ec <tiny_vsnprintf_like+0xf0>
 80079ea:	0039      	movs	r1, r7
        *str++ = (unsigned char) va_arg(args, int);
 80079ec:	001d      	movs	r5, r3
 80079ee:	cd08      	ldmia	r5!, {r3}
 80079f0:	1864      	adds	r4, r4, r1
 80079f2:	7013      	strb	r3, [r2, #0]
        s = va_arg(args, char *);
 80079f4:	002b      	movs	r3, r5
 80079f6:	e792      	b.n	800791e <tiny_vsnprintf_like+0x22>
          while (--field_width > 0) *str++ = ' ';
 80079f8:	2020      	movs	r0, #32
 80079fa:	7008      	strb	r0, [r1, #0]
 80079fc:	3101      	adds	r1, #1
 80079fe:	e7e9      	b.n	80079d4 <tiny_vsnprintf_like+0xd8>
        s = va_arg(args, char *);
 8007a00:	001d      	movs	r5, r3
 8007a02:	cd40      	ldmia	r5!, {r6}
        if (!s) s = "<NULL>";
 8007a04:	2e00      	cmp	r6, #0
 8007a06:	d100      	bne.n	8007a0a <tiny_vsnprintf_like+0x10e>
 8007a08:	4e50      	ldr	r6, [pc, #320]	; (8007b4c <tiny_vsnprintf_like+0x250>)
        len = strlen(s);
 8007a0a:	0030      	movs	r0, r6
 8007a0c:	f7f8 fb7c 	bl	8000108 <strlen>
          while (len < field_width--) *str++ = ' ';
 8007a10:	0023      	movs	r3, r4
 8007a12:	19e1      	adds	r1, r4, r7
 8007a14:	1aca      	subs	r2, r1, r3
 8007a16:	4290      	cmp	r0, r2
 8007a18:	db09      	blt.n	8007a2e <tiny_vsnprintf_like+0x132>
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	4287      	cmp	r7, r0
 8007a1e:	db00      	blt.n	8007a22 <tiny_vsnprintf_like+0x126>
 8007a20:	1a3b      	subs	r3, r7, r0
 8007a22:	18e4      	adds	r4, r4, r3
        for (i = 0; i < len; ++i) *str++ = *s++;
 8007a24:	2300      	movs	r3, #0
 8007a26:	4283      	cmp	r3, r0
 8007a28:	db05      	blt.n	8007a36 <tiny_vsnprintf_like+0x13a>
 8007a2a:	1824      	adds	r4, r4, r0
 8007a2c:	e7e2      	b.n	80079f4 <tiny_vsnprintf_like+0xf8>
          while (len < field_width--) *str++ = ' ';
 8007a2e:	2220      	movs	r2, #32
 8007a30:	701a      	strb	r2, [r3, #0]
 8007a32:	3301      	adds	r3, #1
 8007a34:	e7ee      	b.n	8007a14 <tiny_vsnprintf_like+0x118>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8007a36:	5cf2      	ldrb	r2, [r6, r3]
 8007a38:	54e2      	strb	r2, [r4, r3]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	e7f3      	b.n	8007a26 <tiny_vsnprintf_like+0x12a>
        flags |= UPPERCASE;
 8007a3e:	2240      	movs	r2, #64	; 0x40
        base = 16;
 8007a40:	2510      	movs	r5, #16
        flags |= UPPERCASE;
 8007a42:	4302      	orrs	r2, r0
    else if (flags & SIGN)
 8007a44:	2602      	movs	r6, #2
 8007a46:	9306      	str	r3, [sp, #24]
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8007a48:	9b02      	ldr	r3, [sp, #8]
    else if (flags & SIGN)
 8007a4a:	4016      	ands	r6, r2
 8007a4c:	46b4      	mov	ip, r6
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8007a4e:	1ae6      	subs	r6, r4, r3
 8007a50:	9b06      	ldr	r3, [sp, #24]
 8007a52:	1b8e      	subs	r6, r1, r6
 8007a54:	cb01      	ldmia	r3!, {r0}
  if (type & UPPERCASE)  dig = upper_digits;
 8007a56:	493e      	ldr	r1, [pc, #248]	; (8007b50 <tiny_vsnprintf_like+0x254>)
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8007a58:	9306      	str	r3, [sp, #24]
  if (type & UPPERCASE)  dig = upper_digits;
 8007a5a:	2340      	movs	r3, #64	; 0x40
 8007a5c:	9108      	str	r1, [sp, #32]
 8007a5e:	421a      	tst	r2, r3
 8007a60:	d101      	bne.n	8007a66 <tiny_vsnprintf_like+0x16a>
  char *dig = lower_digits;
 8007a62:	4b3c      	ldr	r3, [pc, #240]	; (8007b54 <tiny_vsnprintf_like+0x258>)
 8007a64:	9308      	str	r3, [sp, #32]
  c = (type & ZEROPAD) ? '0' : ' ';
 8007a66:	2330      	movs	r3, #48	; 0x30
 8007a68:	9309      	str	r3, [sp, #36]	; 0x24
 8007a6a:	9b05      	ldr	r3, [sp, #20]
 8007a6c:	2b30      	cmp	r3, #48	; 0x30
 8007a6e:	d001      	beq.n	8007a74 <tiny_vsnprintf_like+0x178>
 8007a70:	2320      	movs	r3, #32
 8007a72:	9309      	str	r3, [sp, #36]	; 0x24
  if (type & SIGN)
 8007a74:	4663      	mov	r3, ip
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d025      	beq.n	8007ac6 <tiny_vsnprintf_like+0x1ca>
    if (num < 0)
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	da23      	bge.n	8007ac6 <tiny_vsnprintf_like+0x1ca>
      sign = '-';
 8007a7e:	232d      	movs	r3, #45	; 0x2d
      num = -num;
 8007a80:	4240      	negs	r0, r0
      size--;
 8007a82:	3f01      	subs	r7, #1
  if (num == 0)
 8007a84:	9304      	str	r3, [sp, #16]
  if (base < 2 || base > 36) return 0;
 8007a86:	2300      	movs	r3, #0
 8007a88:	9303      	str	r3, [sp, #12]
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8007a8a:	0029      	movs	r1, r5
 8007a8c:	9007      	str	r0, [sp, #28]
 8007a8e:	f7f8 fbf1 	bl	8000274 <__aeabi_uidivmod>
 8007a92:	9b03      	ldr	r3, [sp, #12]
 8007a94:	000a      	movs	r2, r1
 8007a96:	469c      	mov	ip, r3
 8007a98:	900b      	str	r0, [sp, #44]	; 0x2c
 8007a9a:	4660      	mov	r0, ip
 8007a9c:	0019      	movs	r1, r3
 8007a9e:	9b08      	ldr	r3, [sp, #32]
 8007aa0:	3101      	adds	r1, #1
 8007aa2:	5c9a      	ldrb	r2, [r3, r2]
 8007aa4:	ab0d      	add	r3, sp, #52	; 0x34
 8007aa6:	541a      	strb	r2, [r3, r0]
    while (num != 0)
 8007aa8:	9b07      	ldr	r3, [sp, #28]
      num = ((unsigned long) num) / (unsigned) base;
 8007aaa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007aac:	9103      	str	r1, [sp, #12]
    while (num != 0)
 8007aae:	429d      	cmp	r5, r3
 8007ab0:	d9eb      	bls.n	8007a8a <tiny_vsnprintf_like+0x18e>
 8007ab2:	e011      	b.n	8007ad8 <tiny_vsnprintf_like+0x1dc>
        flags |= SIGN;
 8007ab4:	2202      	movs	r2, #2
 8007ab6:	4302      	orrs	r2, r0
    base = 10;
 8007ab8:	250a      	movs	r5, #10
 8007aba:	e7c3      	b.n	8007a44 <tiny_vsnprintf_like+0x148>
          --fmt;
 8007abc:	9a01      	ldr	r2, [sp, #4]
 8007abe:	0004      	movs	r4, r0
 8007ac0:	3a01      	subs	r2, #1
 8007ac2:	9201      	str	r2, [sp, #4]
        CHECK_STR_SIZE(buf, str, size);
 8007ac4:	e72b      	b.n	800791e <tiny_vsnprintf_like+0x22>
  if (num == 0)
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	d001      	beq.n	8007ace <tiny_vsnprintf_like+0x1d2>
 8007aca:	2300      	movs	r3, #0
 8007acc:	e7da      	b.n	8007a84 <tiny_vsnprintf_like+0x188>
    tmp[i++] = '0';
 8007ace:	2230      	movs	r2, #48	; 0x30
 8007ad0:	2101      	movs	r1, #1
 8007ad2:	ab0d      	add	r3, sp, #52	; 0x34
 8007ad4:	701a      	strb	r2, [r3, #0]
 8007ad6:	9004      	str	r0, [sp, #16]
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8007ad8:	9b05      	ldr	r3, [sp, #20]
  size -= precision;
 8007ada:	1a78      	subs	r0, r7, r1
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8007adc:	2b30      	cmp	r3, #48	; 0x30
 8007ade:	d005      	beq.n	8007aec <tiny_vsnprintf_like+0x1f0>
 8007ae0:	0023      	movs	r3, r4
 8007ae2:	0002      	movs	r2, r0
 8007ae4:	001c      	movs	r4, r3
 8007ae6:	3801      	subs	r0, #1
 8007ae8:	2a00      	cmp	r2, #0
 8007aea:	dc0b      	bgt.n	8007b04 <tiny_vsnprintf_like+0x208>
  if (sign) ASSIGN_STR(sign);
 8007aec:	9b04      	ldr	r3, [sp, #16]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d005      	beq.n	8007afe <tiny_vsnprintf_like+0x202>
 8007af2:	1c62      	adds	r2, r4, #1
 8007af4:	3e01      	subs	r6, #1
 8007af6:	7023      	strb	r3, [r4, #0]
 8007af8:	0014      	movs	r4, r2
 8007afa:	2e00      	cmp	r6, #0
 8007afc:	d009      	beq.n	8007b12 <tiny_vsnprintf_like+0x216>
 8007afe:	0033      	movs	r3, r6
 8007b00:	1b80      	subs	r0, r0, r6
 8007b02:	e010      	b.n	8007b26 <tiny_vsnprintf_like+0x22a>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8007b04:	2520      	movs	r5, #32
 8007b06:	3301      	adds	r3, #1
 8007b08:	3e01      	subs	r6, #1
 8007b0a:	001a      	movs	r2, r3
 8007b0c:	7025      	strb	r5, [r4, #0]
 8007b0e:	2e00      	cmp	r6, #0
 8007b10:	d1e7      	bne.n	8007ae2 <tiny_vsnprintf_like+0x1e6>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8007b12:	0014      	movs	r4, r2
 8007b14:	9b06      	ldr	r3, [sp, #24]
 8007b16:	e702      	b.n	800791e <tiny_vsnprintf_like+0x22>
  while (size-- > 0) ASSIGN_STR(c);
 8007b18:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007b1a:	3401      	adds	r4, #1
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	0022      	movs	r2, r4
 8007b20:	702e      	strb	r6, [r5, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d0f5      	beq.n	8007b12 <tiny_vsnprintf_like+0x216>
 8007b26:	18c2      	adds	r2, r0, r3
 8007b28:	0025      	movs	r5, r4
 8007b2a:	2a00      	cmp	r2, #0
 8007b2c:	dcf4      	bgt.n	8007b18 <tiny_vsnprintf_like+0x21c>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8007b2e:	ad0d      	add	r5, sp, #52	; 0x34
 8007b30:	191b      	adds	r3, r3, r4
 8007b32:	0020      	movs	r0, r4
 8007b34:	3901      	subs	r1, #1
 8007b36:	d201      	bcs.n	8007b3c <tiny_vsnprintf_like+0x240>
 8007b38:	0022      	movs	r2, r4
 8007b3a:	e7ea      	b.n	8007b12 <tiny_vsnprintf_like+0x216>
 8007b3c:	5d4e      	ldrb	r6, [r1, r5]
 8007b3e:	3401      	adds	r4, #1
 8007b40:	0022      	movs	r2, r4
 8007b42:	7006      	strb	r6, [r0, #0]
 8007b44:	429c      	cmp	r4, r3
 8007b46:	d1f4      	bne.n	8007b32 <tiny_vsnprintf_like+0x236>
 8007b48:	e7e3      	b.n	8007b12 <tiny_vsnprintf_like+0x216>
 8007b4a:	46c0      	nop			; (mov r8, r8)
 8007b4c:	08008f70 	.word	0x08008f70
 8007b50:	08008f77 	.word	0x08008f77
 8007b54:	08008f9c 	.word	0x08008f9c

08007b58 <__errno>:
 8007b58:	4b01      	ldr	r3, [pc, #4]	; (8007b60 <__errno+0x8>)
 8007b5a:	6818      	ldr	r0, [r3, #0]
 8007b5c:	4770      	bx	lr
 8007b5e:	46c0      	nop			; (mov r8, r8)
 8007b60:	20000030 	.word	0x20000030

08007b64 <__libc_init_array>:
 8007b64:	b570      	push	{r4, r5, r6, lr}
 8007b66:	2600      	movs	r6, #0
 8007b68:	4d0c      	ldr	r5, [pc, #48]	; (8007b9c <__libc_init_array+0x38>)
 8007b6a:	4c0d      	ldr	r4, [pc, #52]	; (8007ba0 <__libc_init_array+0x3c>)
 8007b6c:	1b64      	subs	r4, r4, r5
 8007b6e:	10a4      	asrs	r4, r4, #2
 8007b70:	42a6      	cmp	r6, r4
 8007b72:	d109      	bne.n	8007b88 <__libc_init_array+0x24>
 8007b74:	2600      	movs	r6, #0
 8007b76:	f000 ffdb 	bl	8008b30 <_init>
 8007b7a:	4d0a      	ldr	r5, [pc, #40]	; (8007ba4 <__libc_init_array+0x40>)
 8007b7c:	4c0a      	ldr	r4, [pc, #40]	; (8007ba8 <__libc_init_array+0x44>)
 8007b7e:	1b64      	subs	r4, r4, r5
 8007b80:	10a4      	asrs	r4, r4, #2
 8007b82:	42a6      	cmp	r6, r4
 8007b84:	d105      	bne.n	8007b92 <__libc_init_array+0x2e>
 8007b86:	bd70      	pop	{r4, r5, r6, pc}
 8007b88:	00b3      	lsls	r3, r6, #2
 8007b8a:	58eb      	ldr	r3, [r5, r3]
 8007b8c:	4798      	blx	r3
 8007b8e:	3601      	adds	r6, #1
 8007b90:	e7ee      	b.n	8007b70 <__libc_init_array+0xc>
 8007b92:	00b3      	lsls	r3, r6, #2
 8007b94:	58eb      	ldr	r3, [r5, r3]
 8007b96:	4798      	blx	r3
 8007b98:	3601      	adds	r6, #1
 8007b9a:	e7f2      	b.n	8007b82 <__libc_init_array+0x1e>
 8007b9c:	08009064 	.word	0x08009064
 8007ba0:	08009064 	.word	0x08009064
 8007ba4:	08009064 	.word	0x08009064
 8007ba8:	08009068 	.word	0x08009068

08007bac <memcpy>:
 8007bac:	2300      	movs	r3, #0
 8007bae:	b510      	push	{r4, lr}
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d100      	bne.n	8007bb6 <memcpy+0xa>
 8007bb4:	bd10      	pop	{r4, pc}
 8007bb6:	5ccc      	ldrb	r4, [r1, r3]
 8007bb8:	54c4      	strb	r4, [r0, r3]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	e7f8      	b.n	8007bb0 <memcpy+0x4>

08007bbe <memset>:
 8007bbe:	0003      	movs	r3, r0
 8007bc0:	1882      	adds	r2, r0, r2
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d100      	bne.n	8007bc8 <memset+0xa>
 8007bc6:	4770      	bx	lr
 8007bc8:	7019      	strb	r1, [r3, #0]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	e7f9      	b.n	8007bc2 <memset+0x4>
	...

08007bd0 <iprintf>:
 8007bd0:	b40f      	push	{r0, r1, r2, r3}
 8007bd2:	4b0b      	ldr	r3, [pc, #44]	; (8007c00 <iprintf+0x30>)
 8007bd4:	b513      	push	{r0, r1, r4, lr}
 8007bd6:	681c      	ldr	r4, [r3, #0]
 8007bd8:	2c00      	cmp	r4, #0
 8007bda:	d005      	beq.n	8007be8 <iprintf+0x18>
 8007bdc:	69a3      	ldr	r3, [r4, #24]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d102      	bne.n	8007be8 <iprintf+0x18>
 8007be2:	0020      	movs	r0, r4
 8007be4:	f000 f882 	bl	8007cec <__sinit>
 8007be8:	ab05      	add	r3, sp, #20
 8007bea:	0020      	movs	r0, r4
 8007bec:	9a04      	ldr	r2, [sp, #16]
 8007bee:	68a1      	ldr	r1, [r4, #8]
 8007bf0:	9301      	str	r3, [sp, #4]
 8007bf2:	f000 f9a5 	bl	8007f40 <_vfiprintf_r>
 8007bf6:	bc16      	pop	{r1, r2, r4}
 8007bf8:	bc08      	pop	{r3}
 8007bfa:	b004      	add	sp, #16
 8007bfc:	4718      	bx	r3
 8007bfe:	46c0      	nop			; (mov r8, r8)
 8007c00:	20000030 	.word	0x20000030

08007c04 <strncmp>:
 8007c04:	b530      	push	{r4, r5, lr}
 8007c06:	0005      	movs	r5, r0
 8007c08:	1e10      	subs	r0, r2, #0
 8007c0a:	d00b      	beq.n	8007c24 <strncmp+0x20>
 8007c0c:	2400      	movs	r4, #0
 8007c0e:	3a01      	subs	r2, #1
 8007c10:	5d2b      	ldrb	r3, [r5, r4]
 8007c12:	5d08      	ldrb	r0, [r1, r4]
 8007c14:	4283      	cmp	r3, r0
 8007c16:	d104      	bne.n	8007c22 <strncmp+0x1e>
 8007c18:	4294      	cmp	r4, r2
 8007c1a:	d002      	beq.n	8007c22 <strncmp+0x1e>
 8007c1c:	3401      	adds	r4, #1
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1f6      	bne.n	8007c10 <strncmp+0xc>
 8007c22:	1a18      	subs	r0, r3, r0
 8007c24:	bd30      	pop	{r4, r5, pc}
	...

08007c28 <std>:
 8007c28:	2300      	movs	r3, #0
 8007c2a:	b510      	push	{r4, lr}
 8007c2c:	0004      	movs	r4, r0
 8007c2e:	6003      	str	r3, [r0, #0]
 8007c30:	6043      	str	r3, [r0, #4]
 8007c32:	6083      	str	r3, [r0, #8]
 8007c34:	8181      	strh	r1, [r0, #12]
 8007c36:	6643      	str	r3, [r0, #100]	; 0x64
 8007c38:	0019      	movs	r1, r3
 8007c3a:	81c2      	strh	r2, [r0, #14]
 8007c3c:	6103      	str	r3, [r0, #16]
 8007c3e:	6143      	str	r3, [r0, #20]
 8007c40:	6183      	str	r3, [r0, #24]
 8007c42:	2208      	movs	r2, #8
 8007c44:	305c      	adds	r0, #92	; 0x5c
 8007c46:	f7ff ffba 	bl	8007bbe <memset>
 8007c4a:	4b05      	ldr	r3, [pc, #20]	; (8007c60 <std+0x38>)
 8007c4c:	6263      	str	r3, [r4, #36]	; 0x24
 8007c4e:	4b05      	ldr	r3, [pc, #20]	; (8007c64 <std+0x3c>)
 8007c50:	6224      	str	r4, [r4, #32]
 8007c52:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c54:	4b04      	ldr	r3, [pc, #16]	; (8007c68 <std+0x40>)
 8007c56:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c58:	4b04      	ldr	r3, [pc, #16]	; (8007c6c <std+0x44>)
 8007c5a:	6323      	str	r3, [r4, #48]	; 0x30
 8007c5c:	bd10      	pop	{r4, pc}
 8007c5e:	46c0      	nop			; (mov r8, r8)
 8007c60:	080084dd 	.word	0x080084dd
 8007c64:	08008505 	.word	0x08008505
 8007c68:	0800853d 	.word	0x0800853d
 8007c6c:	08008569 	.word	0x08008569

08007c70 <_cleanup_r>:
 8007c70:	b510      	push	{r4, lr}
 8007c72:	4902      	ldr	r1, [pc, #8]	; (8007c7c <_cleanup_r+0xc>)
 8007c74:	f000 f8ba 	bl	8007dec <_fwalk_reent>
 8007c78:	bd10      	pop	{r4, pc}
 8007c7a:	46c0      	nop			; (mov r8, r8)
 8007c7c:	08008875 	.word	0x08008875

08007c80 <__sfmoreglue>:
 8007c80:	b570      	push	{r4, r5, r6, lr}
 8007c82:	2568      	movs	r5, #104	; 0x68
 8007c84:	1e4a      	subs	r2, r1, #1
 8007c86:	4355      	muls	r5, r2
 8007c88:	000e      	movs	r6, r1
 8007c8a:	0029      	movs	r1, r5
 8007c8c:	3174      	adds	r1, #116	; 0x74
 8007c8e:	f000 f8d1 	bl	8007e34 <_malloc_r>
 8007c92:	1e04      	subs	r4, r0, #0
 8007c94:	d008      	beq.n	8007ca8 <__sfmoreglue+0x28>
 8007c96:	2100      	movs	r1, #0
 8007c98:	002a      	movs	r2, r5
 8007c9a:	6001      	str	r1, [r0, #0]
 8007c9c:	6046      	str	r6, [r0, #4]
 8007c9e:	300c      	adds	r0, #12
 8007ca0:	60a0      	str	r0, [r4, #8]
 8007ca2:	3268      	adds	r2, #104	; 0x68
 8007ca4:	f7ff ff8b 	bl	8007bbe <memset>
 8007ca8:	0020      	movs	r0, r4
 8007caa:	bd70      	pop	{r4, r5, r6, pc}

08007cac <__sfp_lock_acquire>:
 8007cac:	b510      	push	{r4, lr}
 8007cae:	4802      	ldr	r0, [pc, #8]	; (8007cb8 <__sfp_lock_acquire+0xc>)
 8007cb0:	f000 f8bd 	bl	8007e2e <__retarget_lock_acquire_recursive>
 8007cb4:	bd10      	pop	{r4, pc}
 8007cb6:	46c0      	nop			; (mov r8, r8)
 8007cb8:	20000898 	.word	0x20000898

08007cbc <__sfp_lock_release>:
 8007cbc:	b510      	push	{r4, lr}
 8007cbe:	4802      	ldr	r0, [pc, #8]	; (8007cc8 <__sfp_lock_release+0xc>)
 8007cc0:	f000 f8b6 	bl	8007e30 <__retarget_lock_release_recursive>
 8007cc4:	bd10      	pop	{r4, pc}
 8007cc6:	46c0      	nop			; (mov r8, r8)
 8007cc8:	20000898 	.word	0x20000898

08007ccc <__sinit_lock_acquire>:
 8007ccc:	b510      	push	{r4, lr}
 8007cce:	4802      	ldr	r0, [pc, #8]	; (8007cd8 <__sinit_lock_acquire+0xc>)
 8007cd0:	f000 f8ad 	bl	8007e2e <__retarget_lock_acquire_recursive>
 8007cd4:	bd10      	pop	{r4, pc}
 8007cd6:	46c0      	nop			; (mov r8, r8)
 8007cd8:	20000893 	.word	0x20000893

08007cdc <__sinit_lock_release>:
 8007cdc:	b510      	push	{r4, lr}
 8007cde:	4802      	ldr	r0, [pc, #8]	; (8007ce8 <__sinit_lock_release+0xc>)
 8007ce0:	f000 f8a6 	bl	8007e30 <__retarget_lock_release_recursive>
 8007ce4:	bd10      	pop	{r4, pc}
 8007ce6:	46c0      	nop			; (mov r8, r8)
 8007ce8:	20000893 	.word	0x20000893

08007cec <__sinit>:
 8007cec:	b513      	push	{r0, r1, r4, lr}
 8007cee:	0004      	movs	r4, r0
 8007cf0:	f7ff ffec 	bl	8007ccc <__sinit_lock_acquire>
 8007cf4:	69a3      	ldr	r3, [r4, #24]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d002      	beq.n	8007d00 <__sinit+0x14>
 8007cfa:	f7ff ffef 	bl	8007cdc <__sinit_lock_release>
 8007cfe:	bd13      	pop	{r0, r1, r4, pc}
 8007d00:	64a3      	str	r3, [r4, #72]	; 0x48
 8007d02:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007d04:	6523      	str	r3, [r4, #80]	; 0x50
 8007d06:	4b13      	ldr	r3, [pc, #76]	; (8007d54 <__sinit+0x68>)
 8007d08:	4a13      	ldr	r2, [pc, #76]	; (8007d58 <__sinit+0x6c>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d0e:	9301      	str	r3, [sp, #4]
 8007d10:	42a3      	cmp	r3, r4
 8007d12:	d101      	bne.n	8007d18 <__sinit+0x2c>
 8007d14:	2301      	movs	r3, #1
 8007d16:	61a3      	str	r3, [r4, #24]
 8007d18:	0020      	movs	r0, r4
 8007d1a:	f000 f81f 	bl	8007d5c <__sfp>
 8007d1e:	6060      	str	r0, [r4, #4]
 8007d20:	0020      	movs	r0, r4
 8007d22:	f000 f81b 	bl	8007d5c <__sfp>
 8007d26:	60a0      	str	r0, [r4, #8]
 8007d28:	0020      	movs	r0, r4
 8007d2a:	f000 f817 	bl	8007d5c <__sfp>
 8007d2e:	2200      	movs	r2, #0
 8007d30:	2104      	movs	r1, #4
 8007d32:	60e0      	str	r0, [r4, #12]
 8007d34:	6860      	ldr	r0, [r4, #4]
 8007d36:	f7ff ff77 	bl	8007c28 <std>
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	2109      	movs	r1, #9
 8007d3e:	68a0      	ldr	r0, [r4, #8]
 8007d40:	f7ff ff72 	bl	8007c28 <std>
 8007d44:	2202      	movs	r2, #2
 8007d46:	2112      	movs	r1, #18
 8007d48:	68e0      	ldr	r0, [r4, #12]
 8007d4a:	f7ff ff6d 	bl	8007c28 <std>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	61a3      	str	r3, [r4, #24]
 8007d52:	e7d2      	b.n	8007cfa <__sinit+0xe>
 8007d54:	08008fc4 	.word	0x08008fc4
 8007d58:	08007c71 	.word	0x08007c71

08007d5c <__sfp>:
 8007d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5e:	0007      	movs	r7, r0
 8007d60:	f7ff ffa4 	bl	8007cac <__sfp_lock_acquire>
 8007d64:	4b1f      	ldr	r3, [pc, #124]	; (8007de4 <__sfp+0x88>)
 8007d66:	681e      	ldr	r6, [r3, #0]
 8007d68:	69b3      	ldr	r3, [r6, #24]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d102      	bne.n	8007d74 <__sfp+0x18>
 8007d6e:	0030      	movs	r0, r6
 8007d70:	f7ff ffbc 	bl	8007cec <__sinit>
 8007d74:	3648      	adds	r6, #72	; 0x48
 8007d76:	68b4      	ldr	r4, [r6, #8]
 8007d78:	6873      	ldr	r3, [r6, #4]
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	d504      	bpl.n	8007d88 <__sfp+0x2c>
 8007d7e:	6833      	ldr	r3, [r6, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d022      	beq.n	8007dca <__sfp+0x6e>
 8007d84:	6836      	ldr	r6, [r6, #0]
 8007d86:	e7f6      	b.n	8007d76 <__sfp+0x1a>
 8007d88:	220c      	movs	r2, #12
 8007d8a:	5ea5      	ldrsh	r5, [r4, r2]
 8007d8c:	2d00      	cmp	r5, #0
 8007d8e:	d11a      	bne.n	8007dc6 <__sfp+0x6a>
 8007d90:	0020      	movs	r0, r4
 8007d92:	4b15      	ldr	r3, [pc, #84]	; (8007de8 <__sfp+0x8c>)
 8007d94:	3058      	adds	r0, #88	; 0x58
 8007d96:	60e3      	str	r3, [r4, #12]
 8007d98:	6665      	str	r5, [r4, #100]	; 0x64
 8007d9a:	f000 f847 	bl	8007e2c <__retarget_lock_init_recursive>
 8007d9e:	f7ff ff8d 	bl	8007cbc <__sfp_lock_release>
 8007da2:	0020      	movs	r0, r4
 8007da4:	2208      	movs	r2, #8
 8007da6:	0029      	movs	r1, r5
 8007da8:	6025      	str	r5, [r4, #0]
 8007daa:	60a5      	str	r5, [r4, #8]
 8007dac:	6065      	str	r5, [r4, #4]
 8007dae:	6125      	str	r5, [r4, #16]
 8007db0:	6165      	str	r5, [r4, #20]
 8007db2:	61a5      	str	r5, [r4, #24]
 8007db4:	305c      	adds	r0, #92	; 0x5c
 8007db6:	f7ff ff02 	bl	8007bbe <memset>
 8007dba:	6365      	str	r5, [r4, #52]	; 0x34
 8007dbc:	63a5      	str	r5, [r4, #56]	; 0x38
 8007dbe:	64a5      	str	r5, [r4, #72]	; 0x48
 8007dc0:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007dc2:	0020      	movs	r0, r4
 8007dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dc6:	3468      	adds	r4, #104	; 0x68
 8007dc8:	e7d7      	b.n	8007d7a <__sfp+0x1e>
 8007dca:	2104      	movs	r1, #4
 8007dcc:	0038      	movs	r0, r7
 8007dce:	f7ff ff57 	bl	8007c80 <__sfmoreglue>
 8007dd2:	1e04      	subs	r4, r0, #0
 8007dd4:	6030      	str	r0, [r6, #0]
 8007dd6:	d1d5      	bne.n	8007d84 <__sfp+0x28>
 8007dd8:	f7ff ff70 	bl	8007cbc <__sfp_lock_release>
 8007ddc:	230c      	movs	r3, #12
 8007dde:	603b      	str	r3, [r7, #0]
 8007de0:	e7ef      	b.n	8007dc2 <__sfp+0x66>
 8007de2:	46c0      	nop			; (mov r8, r8)
 8007de4:	08008fc4 	.word	0x08008fc4
 8007de8:	ffff0001 	.word	0xffff0001

08007dec <_fwalk_reent>:
 8007dec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dee:	0004      	movs	r4, r0
 8007df0:	0006      	movs	r6, r0
 8007df2:	2700      	movs	r7, #0
 8007df4:	9101      	str	r1, [sp, #4]
 8007df6:	3448      	adds	r4, #72	; 0x48
 8007df8:	6863      	ldr	r3, [r4, #4]
 8007dfa:	68a5      	ldr	r5, [r4, #8]
 8007dfc:	9300      	str	r3, [sp, #0]
 8007dfe:	9b00      	ldr	r3, [sp, #0]
 8007e00:	3b01      	subs	r3, #1
 8007e02:	9300      	str	r3, [sp, #0]
 8007e04:	d504      	bpl.n	8007e10 <_fwalk_reent+0x24>
 8007e06:	6824      	ldr	r4, [r4, #0]
 8007e08:	2c00      	cmp	r4, #0
 8007e0a:	d1f5      	bne.n	8007df8 <_fwalk_reent+0xc>
 8007e0c:	0038      	movs	r0, r7
 8007e0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e10:	89ab      	ldrh	r3, [r5, #12]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d908      	bls.n	8007e28 <_fwalk_reent+0x3c>
 8007e16:	220e      	movs	r2, #14
 8007e18:	5eab      	ldrsh	r3, [r5, r2]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	d004      	beq.n	8007e28 <_fwalk_reent+0x3c>
 8007e1e:	0029      	movs	r1, r5
 8007e20:	0030      	movs	r0, r6
 8007e22:	9b01      	ldr	r3, [sp, #4]
 8007e24:	4798      	blx	r3
 8007e26:	4307      	orrs	r7, r0
 8007e28:	3568      	adds	r5, #104	; 0x68
 8007e2a:	e7e8      	b.n	8007dfe <_fwalk_reent+0x12>

08007e2c <__retarget_lock_init_recursive>:
 8007e2c:	4770      	bx	lr

08007e2e <__retarget_lock_acquire_recursive>:
 8007e2e:	4770      	bx	lr

08007e30 <__retarget_lock_release_recursive>:
 8007e30:	4770      	bx	lr
	...

08007e34 <_malloc_r>:
 8007e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e36:	2303      	movs	r3, #3
 8007e38:	1ccd      	adds	r5, r1, #3
 8007e3a:	439d      	bics	r5, r3
 8007e3c:	3508      	adds	r5, #8
 8007e3e:	0006      	movs	r6, r0
 8007e40:	2d0c      	cmp	r5, #12
 8007e42:	d21f      	bcs.n	8007e84 <_malloc_r+0x50>
 8007e44:	250c      	movs	r5, #12
 8007e46:	42a9      	cmp	r1, r5
 8007e48:	d81e      	bhi.n	8007e88 <_malloc_r+0x54>
 8007e4a:	0030      	movs	r0, r6
 8007e4c:	f000 fdde 	bl	8008a0c <__malloc_lock>
 8007e50:	4925      	ldr	r1, [pc, #148]	; (8007ee8 <_malloc_r+0xb4>)
 8007e52:	680a      	ldr	r2, [r1, #0]
 8007e54:	0014      	movs	r4, r2
 8007e56:	2c00      	cmp	r4, #0
 8007e58:	d11a      	bne.n	8007e90 <_malloc_r+0x5c>
 8007e5a:	4f24      	ldr	r7, [pc, #144]	; (8007eec <_malloc_r+0xb8>)
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d104      	bne.n	8007e6c <_malloc_r+0x38>
 8007e62:	0021      	movs	r1, r4
 8007e64:	0030      	movs	r0, r6
 8007e66:	f000 fb27 	bl	80084b8 <_sbrk_r>
 8007e6a:	6038      	str	r0, [r7, #0]
 8007e6c:	0029      	movs	r1, r5
 8007e6e:	0030      	movs	r0, r6
 8007e70:	f000 fb22 	bl	80084b8 <_sbrk_r>
 8007e74:	1c43      	adds	r3, r0, #1
 8007e76:	d12b      	bne.n	8007ed0 <_malloc_r+0x9c>
 8007e78:	230c      	movs	r3, #12
 8007e7a:	0030      	movs	r0, r6
 8007e7c:	6033      	str	r3, [r6, #0]
 8007e7e:	f000 fdcd 	bl	8008a1c <__malloc_unlock>
 8007e82:	e003      	b.n	8007e8c <_malloc_r+0x58>
 8007e84:	2d00      	cmp	r5, #0
 8007e86:	dade      	bge.n	8007e46 <_malloc_r+0x12>
 8007e88:	230c      	movs	r3, #12
 8007e8a:	6033      	str	r3, [r6, #0]
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e90:	6823      	ldr	r3, [r4, #0]
 8007e92:	1b5b      	subs	r3, r3, r5
 8007e94:	d419      	bmi.n	8007eca <_malloc_r+0x96>
 8007e96:	2b0b      	cmp	r3, #11
 8007e98:	d903      	bls.n	8007ea2 <_malloc_r+0x6e>
 8007e9a:	6023      	str	r3, [r4, #0]
 8007e9c:	18e4      	adds	r4, r4, r3
 8007e9e:	6025      	str	r5, [r4, #0]
 8007ea0:	e003      	b.n	8007eaa <_malloc_r+0x76>
 8007ea2:	6863      	ldr	r3, [r4, #4]
 8007ea4:	42a2      	cmp	r2, r4
 8007ea6:	d10e      	bne.n	8007ec6 <_malloc_r+0x92>
 8007ea8:	600b      	str	r3, [r1, #0]
 8007eaa:	0030      	movs	r0, r6
 8007eac:	f000 fdb6 	bl	8008a1c <__malloc_unlock>
 8007eb0:	0020      	movs	r0, r4
 8007eb2:	2207      	movs	r2, #7
 8007eb4:	300b      	adds	r0, #11
 8007eb6:	1d23      	adds	r3, r4, #4
 8007eb8:	4390      	bics	r0, r2
 8007eba:	1ac2      	subs	r2, r0, r3
 8007ebc:	4298      	cmp	r0, r3
 8007ebe:	d0e6      	beq.n	8007e8e <_malloc_r+0x5a>
 8007ec0:	1a1b      	subs	r3, r3, r0
 8007ec2:	50a3      	str	r3, [r4, r2]
 8007ec4:	e7e3      	b.n	8007e8e <_malloc_r+0x5a>
 8007ec6:	6053      	str	r3, [r2, #4]
 8007ec8:	e7ef      	b.n	8007eaa <_malloc_r+0x76>
 8007eca:	0022      	movs	r2, r4
 8007ecc:	6864      	ldr	r4, [r4, #4]
 8007ece:	e7c2      	b.n	8007e56 <_malloc_r+0x22>
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	1cc4      	adds	r4, r0, #3
 8007ed4:	439c      	bics	r4, r3
 8007ed6:	42a0      	cmp	r0, r4
 8007ed8:	d0e1      	beq.n	8007e9e <_malloc_r+0x6a>
 8007eda:	1a21      	subs	r1, r4, r0
 8007edc:	0030      	movs	r0, r6
 8007ede:	f000 faeb 	bl	80084b8 <_sbrk_r>
 8007ee2:	1c43      	adds	r3, r0, #1
 8007ee4:	d1db      	bne.n	8007e9e <_malloc_r+0x6a>
 8007ee6:	e7c7      	b.n	8007e78 <_malloc_r+0x44>
 8007ee8:	20000524 	.word	0x20000524
 8007eec:	20000528 	.word	0x20000528

08007ef0 <__sfputc_r>:
 8007ef0:	6893      	ldr	r3, [r2, #8]
 8007ef2:	b510      	push	{r4, lr}
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	6093      	str	r3, [r2, #8]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	da04      	bge.n	8007f06 <__sfputc_r+0x16>
 8007efc:	6994      	ldr	r4, [r2, #24]
 8007efe:	42a3      	cmp	r3, r4
 8007f00:	db07      	blt.n	8007f12 <__sfputc_r+0x22>
 8007f02:	290a      	cmp	r1, #10
 8007f04:	d005      	beq.n	8007f12 <__sfputc_r+0x22>
 8007f06:	6813      	ldr	r3, [r2, #0]
 8007f08:	1c58      	adds	r0, r3, #1
 8007f0a:	6010      	str	r0, [r2, #0]
 8007f0c:	7019      	strb	r1, [r3, #0]
 8007f0e:	0008      	movs	r0, r1
 8007f10:	bd10      	pop	{r4, pc}
 8007f12:	f000 fb2f 	bl	8008574 <__swbuf_r>
 8007f16:	0001      	movs	r1, r0
 8007f18:	e7f9      	b.n	8007f0e <__sfputc_r+0x1e>

08007f1a <__sfputs_r>:
 8007f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1c:	0006      	movs	r6, r0
 8007f1e:	000f      	movs	r7, r1
 8007f20:	0014      	movs	r4, r2
 8007f22:	18d5      	adds	r5, r2, r3
 8007f24:	42ac      	cmp	r4, r5
 8007f26:	d101      	bne.n	8007f2c <__sfputs_r+0x12>
 8007f28:	2000      	movs	r0, #0
 8007f2a:	e007      	b.n	8007f3c <__sfputs_r+0x22>
 8007f2c:	7821      	ldrb	r1, [r4, #0]
 8007f2e:	003a      	movs	r2, r7
 8007f30:	0030      	movs	r0, r6
 8007f32:	f7ff ffdd 	bl	8007ef0 <__sfputc_r>
 8007f36:	3401      	adds	r4, #1
 8007f38:	1c43      	adds	r3, r0, #1
 8007f3a:	d1f3      	bne.n	8007f24 <__sfputs_r+0xa>
 8007f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f40 <_vfiprintf_r>:
 8007f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f42:	b0a1      	sub	sp, #132	; 0x84
 8007f44:	0006      	movs	r6, r0
 8007f46:	000c      	movs	r4, r1
 8007f48:	001f      	movs	r7, r3
 8007f4a:	9203      	str	r2, [sp, #12]
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	d004      	beq.n	8007f5a <_vfiprintf_r+0x1a>
 8007f50:	6983      	ldr	r3, [r0, #24]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <_vfiprintf_r+0x1a>
 8007f56:	f7ff fec9 	bl	8007cec <__sinit>
 8007f5a:	4b8e      	ldr	r3, [pc, #568]	; (8008194 <_vfiprintf_r+0x254>)
 8007f5c:	429c      	cmp	r4, r3
 8007f5e:	d11c      	bne.n	8007f9a <_vfiprintf_r+0x5a>
 8007f60:	6874      	ldr	r4, [r6, #4]
 8007f62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f64:	07db      	lsls	r3, r3, #31
 8007f66:	d405      	bmi.n	8007f74 <_vfiprintf_r+0x34>
 8007f68:	89a3      	ldrh	r3, [r4, #12]
 8007f6a:	059b      	lsls	r3, r3, #22
 8007f6c:	d402      	bmi.n	8007f74 <_vfiprintf_r+0x34>
 8007f6e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f70:	f7ff ff5d 	bl	8007e2e <__retarget_lock_acquire_recursive>
 8007f74:	89a3      	ldrh	r3, [r4, #12]
 8007f76:	071b      	lsls	r3, r3, #28
 8007f78:	d502      	bpl.n	8007f80 <_vfiprintf_r+0x40>
 8007f7a:	6923      	ldr	r3, [r4, #16]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d11d      	bne.n	8007fbc <_vfiprintf_r+0x7c>
 8007f80:	0021      	movs	r1, r4
 8007f82:	0030      	movs	r0, r6
 8007f84:	f000 fb60 	bl	8008648 <__swsetup_r>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d017      	beq.n	8007fbc <_vfiprintf_r+0x7c>
 8007f8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f8e:	07db      	lsls	r3, r3, #31
 8007f90:	d50d      	bpl.n	8007fae <_vfiprintf_r+0x6e>
 8007f92:	2001      	movs	r0, #1
 8007f94:	4240      	negs	r0, r0
 8007f96:	b021      	add	sp, #132	; 0x84
 8007f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f9a:	4b7f      	ldr	r3, [pc, #508]	; (8008198 <_vfiprintf_r+0x258>)
 8007f9c:	429c      	cmp	r4, r3
 8007f9e:	d101      	bne.n	8007fa4 <_vfiprintf_r+0x64>
 8007fa0:	68b4      	ldr	r4, [r6, #8]
 8007fa2:	e7de      	b.n	8007f62 <_vfiprintf_r+0x22>
 8007fa4:	4b7d      	ldr	r3, [pc, #500]	; (800819c <_vfiprintf_r+0x25c>)
 8007fa6:	429c      	cmp	r4, r3
 8007fa8:	d1db      	bne.n	8007f62 <_vfiprintf_r+0x22>
 8007faa:	68f4      	ldr	r4, [r6, #12]
 8007fac:	e7d9      	b.n	8007f62 <_vfiprintf_r+0x22>
 8007fae:	89a3      	ldrh	r3, [r4, #12]
 8007fb0:	059b      	lsls	r3, r3, #22
 8007fb2:	d4ee      	bmi.n	8007f92 <_vfiprintf_r+0x52>
 8007fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fb6:	f7ff ff3b 	bl	8007e30 <__retarget_lock_release_recursive>
 8007fba:	e7ea      	b.n	8007f92 <_vfiprintf_r+0x52>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	ad08      	add	r5, sp, #32
 8007fc0:	616b      	str	r3, [r5, #20]
 8007fc2:	3320      	adds	r3, #32
 8007fc4:	766b      	strb	r3, [r5, #25]
 8007fc6:	3310      	adds	r3, #16
 8007fc8:	76ab      	strb	r3, [r5, #26]
 8007fca:	9707      	str	r7, [sp, #28]
 8007fcc:	9f03      	ldr	r7, [sp, #12]
 8007fce:	783b      	ldrb	r3, [r7, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <_vfiprintf_r+0x98>
 8007fd4:	2b25      	cmp	r3, #37	; 0x25
 8007fd6:	d14e      	bne.n	8008076 <_vfiprintf_r+0x136>
 8007fd8:	9b03      	ldr	r3, [sp, #12]
 8007fda:	1afb      	subs	r3, r7, r3
 8007fdc:	9305      	str	r3, [sp, #20]
 8007fde:	9b03      	ldr	r3, [sp, #12]
 8007fe0:	429f      	cmp	r7, r3
 8007fe2:	d00d      	beq.n	8008000 <_vfiprintf_r+0xc0>
 8007fe4:	9b05      	ldr	r3, [sp, #20]
 8007fe6:	0021      	movs	r1, r4
 8007fe8:	0030      	movs	r0, r6
 8007fea:	9a03      	ldr	r2, [sp, #12]
 8007fec:	f7ff ff95 	bl	8007f1a <__sfputs_r>
 8007ff0:	1c43      	adds	r3, r0, #1
 8007ff2:	d100      	bne.n	8007ff6 <_vfiprintf_r+0xb6>
 8007ff4:	e0b5      	b.n	8008162 <_vfiprintf_r+0x222>
 8007ff6:	696a      	ldr	r2, [r5, #20]
 8007ff8:	9b05      	ldr	r3, [sp, #20]
 8007ffa:	4694      	mov	ip, r2
 8007ffc:	4463      	add	r3, ip
 8007ffe:	616b      	str	r3, [r5, #20]
 8008000:	783b      	ldrb	r3, [r7, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d100      	bne.n	8008008 <_vfiprintf_r+0xc8>
 8008006:	e0ac      	b.n	8008162 <_vfiprintf_r+0x222>
 8008008:	2201      	movs	r2, #1
 800800a:	1c7b      	adds	r3, r7, #1
 800800c:	9303      	str	r3, [sp, #12]
 800800e:	2300      	movs	r3, #0
 8008010:	4252      	negs	r2, r2
 8008012:	606a      	str	r2, [r5, #4]
 8008014:	a904      	add	r1, sp, #16
 8008016:	3254      	adds	r2, #84	; 0x54
 8008018:	1852      	adds	r2, r2, r1
 800801a:	602b      	str	r3, [r5, #0]
 800801c:	60eb      	str	r3, [r5, #12]
 800801e:	60ab      	str	r3, [r5, #8]
 8008020:	7013      	strb	r3, [r2, #0]
 8008022:	65ab      	str	r3, [r5, #88]	; 0x58
 8008024:	9b03      	ldr	r3, [sp, #12]
 8008026:	2205      	movs	r2, #5
 8008028:	7819      	ldrb	r1, [r3, #0]
 800802a:	485d      	ldr	r0, [pc, #372]	; (80081a0 <_vfiprintf_r+0x260>)
 800802c:	f000 fce2 	bl	80089f4 <memchr>
 8008030:	9b03      	ldr	r3, [sp, #12]
 8008032:	1c5f      	adds	r7, r3, #1
 8008034:	2800      	cmp	r0, #0
 8008036:	d120      	bne.n	800807a <_vfiprintf_r+0x13a>
 8008038:	682a      	ldr	r2, [r5, #0]
 800803a:	06d3      	lsls	r3, r2, #27
 800803c:	d504      	bpl.n	8008048 <_vfiprintf_r+0x108>
 800803e:	2353      	movs	r3, #83	; 0x53
 8008040:	a904      	add	r1, sp, #16
 8008042:	185b      	adds	r3, r3, r1
 8008044:	2120      	movs	r1, #32
 8008046:	7019      	strb	r1, [r3, #0]
 8008048:	0713      	lsls	r3, r2, #28
 800804a:	d504      	bpl.n	8008056 <_vfiprintf_r+0x116>
 800804c:	2353      	movs	r3, #83	; 0x53
 800804e:	a904      	add	r1, sp, #16
 8008050:	185b      	adds	r3, r3, r1
 8008052:	212b      	movs	r1, #43	; 0x2b
 8008054:	7019      	strb	r1, [r3, #0]
 8008056:	9b03      	ldr	r3, [sp, #12]
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	2b2a      	cmp	r3, #42	; 0x2a
 800805c:	d016      	beq.n	800808c <_vfiprintf_r+0x14c>
 800805e:	2100      	movs	r1, #0
 8008060:	68eb      	ldr	r3, [r5, #12]
 8008062:	9f03      	ldr	r7, [sp, #12]
 8008064:	783a      	ldrb	r2, [r7, #0]
 8008066:	1c78      	adds	r0, r7, #1
 8008068:	3a30      	subs	r2, #48	; 0x30
 800806a:	4684      	mov	ip, r0
 800806c:	2a09      	cmp	r2, #9
 800806e:	d94f      	bls.n	8008110 <_vfiprintf_r+0x1d0>
 8008070:	2900      	cmp	r1, #0
 8008072:	d111      	bne.n	8008098 <_vfiprintf_r+0x158>
 8008074:	e017      	b.n	80080a6 <_vfiprintf_r+0x166>
 8008076:	3701      	adds	r7, #1
 8008078:	e7a9      	b.n	8007fce <_vfiprintf_r+0x8e>
 800807a:	4b49      	ldr	r3, [pc, #292]	; (80081a0 <_vfiprintf_r+0x260>)
 800807c:	682a      	ldr	r2, [r5, #0]
 800807e:	1ac0      	subs	r0, r0, r3
 8008080:	2301      	movs	r3, #1
 8008082:	4083      	lsls	r3, r0
 8008084:	4313      	orrs	r3, r2
 8008086:	602b      	str	r3, [r5, #0]
 8008088:	9703      	str	r7, [sp, #12]
 800808a:	e7cb      	b.n	8008024 <_vfiprintf_r+0xe4>
 800808c:	9b07      	ldr	r3, [sp, #28]
 800808e:	1d19      	adds	r1, r3, #4
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	9107      	str	r1, [sp, #28]
 8008094:	2b00      	cmp	r3, #0
 8008096:	db01      	blt.n	800809c <_vfiprintf_r+0x15c>
 8008098:	930b      	str	r3, [sp, #44]	; 0x2c
 800809a:	e004      	b.n	80080a6 <_vfiprintf_r+0x166>
 800809c:	425b      	negs	r3, r3
 800809e:	60eb      	str	r3, [r5, #12]
 80080a0:	2302      	movs	r3, #2
 80080a2:	4313      	orrs	r3, r2
 80080a4:	602b      	str	r3, [r5, #0]
 80080a6:	783b      	ldrb	r3, [r7, #0]
 80080a8:	2b2e      	cmp	r3, #46	; 0x2e
 80080aa:	d10a      	bne.n	80080c2 <_vfiprintf_r+0x182>
 80080ac:	787b      	ldrb	r3, [r7, #1]
 80080ae:	2b2a      	cmp	r3, #42	; 0x2a
 80080b0:	d137      	bne.n	8008122 <_vfiprintf_r+0x1e2>
 80080b2:	9b07      	ldr	r3, [sp, #28]
 80080b4:	3702      	adds	r7, #2
 80080b6:	1d1a      	adds	r2, r3, #4
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	9207      	str	r2, [sp, #28]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	db2d      	blt.n	800811c <_vfiprintf_r+0x1dc>
 80080c0:	9309      	str	r3, [sp, #36]	; 0x24
 80080c2:	2203      	movs	r2, #3
 80080c4:	7839      	ldrb	r1, [r7, #0]
 80080c6:	4837      	ldr	r0, [pc, #220]	; (80081a4 <_vfiprintf_r+0x264>)
 80080c8:	f000 fc94 	bl	80089f4 <memchr>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	d007      	beq.n	80080e0 <_vfiprintf_r+0x1a0>
 80080d0:	4b34      	ldr	r3, [pc, #208]	; (80081a4 <_vfiprintf_r+0x264>)
 80080d2:	682a      	ldr	r2, [r5, #0]
 80080d4:	1ac0      	subs	r0, r0, r3
 80080d6:	2340      	movs	r3, #64	; 0x40
 80080d8:	4083      	lsls	r3, r0
 80080da:	4313      	orrs	r3, r2
 80080dc:	3701      	adds	r7, #1
 80080de:	602b      	str	r3, [r5, #0]
 80080e0:	7839      	ldrb	r1, [r7, #0]
 80080e2:	1c7b      	adds	r3, r7, #1
 80080e4:	2206      	movs	r2, #6
 80080e6:	4830      	ldr	r0, [pc, #192]	; (80081a8 <_vfiprintf_r+0x268>)
 80080e8:	9303      	str	r3, [sp, #12]
 80080ea:	7629      	strb	r1, [r5, #24]
 80080ec:	f000 fc82 	bl	80089f4 <memchr>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	d045      	beq.n	8008180 <_vfiprintf_r+0x240>
 80080f4:	4b2d      	ldr	r3, [pc, #180]	; (80081ac <_vfiprintf_r+0x26c>)
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d127      	bne.n	800814a <_vfiprintf_r+0x20a>
 80080fa:	2207      	movs	r2, #7
 80080fc:	9b07      	ldr	r3, [sp, #28]
 80080fe:	3307      	adds	r3, #7
 8008100:	4393      	bics	r3, r2
 8008102:	3308      	adds	r3, #8
 8008104:	9307      	str	r3, [sp, #28]
 8008106:	696b      	ldr	r3, [r5, #20]
 8008108:	9a04      	ldr	r2, [sp, #16]
 800810a:	189b      	adds	r3, r3, r2
 800810c:	616b      	str	r3, [r5, #20]
 800810e:	e75d      	b.n	8007fcc <_vfiprintf_r+0x8c>
 8008110:	210a      	movs	r1, #10
 8008112:	434b      	muls	r3, r1
 8008114:	4667      	mov	r7, ip
 8008116:	189b      	adds	r3, r3, r2
 8008118:	3909      	subs	r1, #9
 800811a:	e7a3      	b.n	8008064 <_vfiprintf_r+0x124>
 800811c:	2301      	movs	r3, #1
 800811e:	425b      	negs	r3, r3
 8008120:	e7ce      	b.n	80080c0 <_vfiprintf_r+0x180>
 8008122:	2300      	movs	r3, #0
 8008124:	001a      	movs	r2, r3
 8008126:	3701      	adds	r7, #1
 8008128:	606b      	str	r3, [r5, #4]
 800812a:	7839      	ldrb	r1, [r7, #0]
 800812c:	1c78      	adds	r0, r7, #1
 800812e:	3930      	subs	r1, #48	; 0x30
 8008130:	4684      	mov	ip, r0
 8008132:	2909      	cmp	r1, #9
 8008134:	d903      	bls.n	800813e <_vfiprintf_r+0x1fe>
 8008136:	2b00      	cmp	r3, #0
 8008138:	d0c3      	beq.n	80080c2 <_vfiprintf_r+0x182>
 800813a:	9209      	str	r2, [sp, #36]	; 0x24
 800813c:	e7c1      	b.n	80080c2 <_vfiprintf_r+0x182>
 800813e:	230a      	movs	r3, #10
 8008140:	435a      	muls	r2, r3
 8008142:	4667      	mov	r7, ip
 8008144:	1852      	adds	r2, r2, r1
 8008146:	3b09      	subs	r3, #9
 8008148:	e7ef      	b.n	800812a <_vfiprintf_r+0x1ea>
 800814a:	ab07      	add	r3, sp, #28
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	0022      	movs	r2, r4
 8008150:	0029      	movs	r1, r5
 8008152:	0030      	movs	r0, r6
 8008154:	4b16      	ldr	r3, [pc, #88]	; (80081b0 <_vfiprintf_r+0x270>)
 8008156:	e000      	b.n	800815a <_vfiprintf_r+0x21a>
 8008158:	bf00      	nop
 800815a:	9004      	str	r0, [sp, #16]
 800815c:	9b04      	ldr	r3, [sp, #16]
 800815e:	3301      	adds	r3, #1
 8008160:	d1d1      	bne.n	8008106 <_vfiprintf_r+0x1c6>
 8008162:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008164:	07db      	lsls	r3, r3, #31
 8008166:	d405      	bmi.n	8008174 <_vfiprintf_r+0x234>
 8008168:	89a3      	ldrh	r3, [r4, #12]
 800816a:	059b      	lsls	r3, r3, #22
 800816c:	d402      	bmi.n	8008174 <_vfiprintf_r+0x234>
 800816e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008170:	f7ff fe5e 	bl	8007e30 <__retarget_lock_release_recursive>
 8008174:	89a3      	ldrh	r3, [r4, #12]
 8008176:	065b      	lsls	r3, r3, #25
 8008178:	d500      	bpl.n	800817c <_vfiprintf_r+0x23c>
 800817a:	e70a      	b.n	8007f92 <_vfiprintf_r+0x52>
 800817c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800817e:	e70a      	b.n	8007f96 <_vfiprintf_r+0x56>
 8008180:	ab07      	add	r3, sp, #28
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	0022      	movs	r2, r4
 8008186:	0029      	movs	r1, r5
 8008188:	0030      	movs	r0, r6
 800818a:	4b09      	ldr	r3, [pc, #36]	; (80081b0 <_vfiprintf_r+0x270>)
 800818c:	f000 f882 	bl	8008294 <_printf_i>
 8008190:	e7e3      	b.n	800815a <_vfiprintf_r+0x21a>
 8008192:	46c0      	nop			; (mov r8, r8)
 8008194:	08008fe8 	.word	0x08008fe8
 8008198:	08009008 	.word	0x08009008
 800819c:	08008fc8 	.word	0x08008fc8
 80081a0:	08009028 	.word	0x08009028
 80081a4:	0800902e 	.word	0x0800902e
 80081a8:	08009032 	.word	0x08009032
 80081ac:	00000000 	.word	0x00000000
 80081b0:	08007f1b 	.word	0x08007f1b

080081b4 <_printf_common>:
 80081b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081b6:	0015      	movs	r5, r2
 80081b8:	9301      	str	r3, [sp, #4]
 80081ba:	688a      	ldr	r2, [r1, #8]
 80081bc:	690b      	ldr	r3, [r1, #16]
 80081be:	000c      	movs	r4, r1
 80081c0:	9000      	str	r0, [sp, #0]
 80081c2:	4293      	cmp	r3, r2
 80081c4:	da00      	bge.n	80081c8 <_printf_common+0x14>
 80081c6:	0013      	movs	r3, r2
 80081c8:	0022      	movs	r2, r4
 80081ca:	602b      	str	r3, [r5, #0]
 80081cc:	3243      	adds	r2, #67	; 0x43
 80081ce:	7812      	ldrb	r2, [r2, #0]
 80081d0:	2a00      	cmp	r2, #0
 80081d2:	d001      	beq.n	80081d8 <_printf_common+0x24>
 80081d4:	3301      	adds	r3, #1
 80081d6:	602b      	str	r3, [r5, #0]
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	069b      	lsls	r3, r3, #26
 80081dc:	d502      	bpl.n	80081e4 <_printf_common+0x30>
 80081de:	682b      	ldr	r3, [r5, #0]
 80081e0:	3302      	adds	r3, #2
 80081e2:	602b      	str	r3, [r5, #0]
 80081e4:	6822      	ldr	r2, [r4, #0]
 80081e6:	2306      	movs	r3, #6
 80081e8:	0017      	movs	r7, r2
 80081ea:	401f      	ands	r7, r3
 80081ec:	421a      	tst	r2, r3
 80081ee:	d027      	beq.n	8008240 <_printf_common+0x8c>
 80081f0:	0023      	movs	r3, r4
 80081f2:	3343      	adds	r3, #67	; 0x43
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	1e5a      	subs	r2, r3, #1
 80081f8:	4193      	sbcs	r3, r2
 80081fa:	6822      	ldr	r2, [r4, #0]
 80081fc:	0692      	lsls	r2, r2, #26
 80081fe:	d430      	bmi.n	8008262 <_printf_common+0xae>
 8008200:	0022      	movs	r2, r4
 8008202:	9901      	ldr	r1, [sp, #4]
 8008204:	9800      	ldr	r0, [sp, #0]
 8008206:	9e08      	ldr	r6, [sp, #32]
 8008208:	3243      	adds	r2, #67	; 0x43
 800820a:	47b0      	blx	r6
 800820c:	1c43      	adds	r3, r0, #1
 800820e:	d025      	beq.n	800825c <_printf_common+0xa8>
 8008210:	2306      	movs	r3, #6
 8008212:	6820      	ldr	r0, [r4, #0]
 8008214:	682a      	ldr	r2, [r5, #0]
 8008216:	68e1      	ldr	r1, [r4, #12]
 8008218:	2500      	movs	r5, #0
 800821a:	4003      	ands	r3, r0
 800821c:	2b04      	cmp	r3, #4
 800821e:	d103      	bne.n	8008228 <_printf_common+0x74>
 8008220:	1a8d      	subs	r5, r1, r2
 8008222:	43eb      	mvns	r3, r5
 8008224:	17db      	asrs	r3, r3, #31
 8008226:	401d      	ands	r5, r3
 8008228:	68a3      	ldr	r3, [r4, #8]
 800822a:	6922      	ldr	r2, [r4, #16]
 800822c:	4293      	cmp	r3, r2
 800822e:	dd01      	ble.n	8008234 <_printf_common+0x80>
 8008230:	1a9b      	subs	r3, r3, r2
 8008232:	18ed      	adds	r5, r5, r3
 8008234:	2700      	movs	r7, #0
 8008236:	42bd      	cmp	r5, r7
 8008238:	d120      	bne.n	800827c <_printf_common+0xc8>
 800823a:	2000      	movs	r0, #0
 800823c:	e010      	b.n	8008260 <_printf_common+0xac>
 800823e:	3701      	adds	r7, #1
 8008240:	68e3      	ldr	r3, [r4, #12]
 8008242:	682a      	ldr	r2, [r5, #0]
 8008244:	1a9b      	subs	r3, r3, r2
 8008246:	42bb      	cmp	r3, r7
 8008248:	ddd2      	ble.n	80081f0 <_printf_common+0x3c>
 800824a:	0022      	movs	r2, r4
 800824c:	2301      	movs	r3, #1
 800824e:	9901      	ldr	r1, [sp, #4]
 8008250:	9800      	ldr	r0, [sp, #0]
 8008252:	9e08      	ldr	r6, [sp, #32]
 8008254:	3219      	adds	r2, #25
 8008256:	47b0      	blx	r6
 8008258:	1c43      	adds	r3, r0, #1
 800825a:	d1f0      	bne.n	800823e <_printf_common+0x8a>
 800825c:	2001      	movs	r0, #1
 800825e:	4240      	negs	r0, r0
 8008260:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008262:	2030      	movs	r0, #48	; 0x30
 8008264:	18e1      	adds	r1, r4, r3
 8008266:	3143      	adds	r1, #67	; 0x43
 8008268:	7008      	strb	r0, [r1, #0]
 800826a:	0021      	movs	r1, r4
 800826c:	1c5a      	adds	r2, r3, #1
 800826e:	3145      	adds	r1, #69	; 0x45
 8008270:	7809      	ldrb	r1, [r1, #0]
 8008272:	18a2      	adds	r2, r4, r2
 8008274:	3243      	adds	r2, #67	; 0x43
 8008276:	3302      	adds	r3, #2
 8008278:	7011      	strb	r1, [r2, #0]
 800827a:	e7c1      	b.n	8008200 <_printf_common+0x4c>
 800827c:	0022      	movs	r2, r4
 800827e:	2301      	movs	r3, #1
 8008280:	9901      	ldr	r1, [sp, #4]
 8008282:	9800      	ldr	r0, [sp, #0]
 8008284:	9e08      	ldr	r6, [sp, #32]
 8008286:	321a      	adds	r2, #26
 8008288:	47b0      	blx	r6
 800828a:	1c43      	adds	r3, r0, #1
 800828c:	d0e6      	beq.n	800825c <_printf_common+0xa8>
 800828e:	3701      	adds	r7, #1
 8008290:	e7d1      	b.n	8008236 <_printf_common+0x82>
	...

08008294 <_printf_i>:
 8008294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008296:	b08b      	sub	sp, #44	; 0x2c
 8008298:	9206      	str	r2, [sp, #24]
 800829a:	000a      	movs	r2, r1
 800829c:	3243      	adds	r2, #67	; 0x43
 800829e:	9307      	str	r3, [sp, #28]
 80082a0:	9005      	str	r0, [sp, #20]
 80082a2:	9204      	str	r2, [sp, #16]
 80082a4:	7e0a      	ldrb	r2, [r1, #24]
 80082a6:	000c      	movs	r4, r1
 80082a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082aa:	2a78      	cmp	r2, #120	; 0x78
 80082ac:	d806      	bhi.n	80082bc <_printf_i+0x28>
 80082ae:	2a62      	cmp	r2, #98	; 0x62
 80082b0:	d808      	bhi.n	80082c4 <_printf_i+0x30>
 80082b2:	2a00      	cmp	r2, #0
 80082b4:	d100      	bne.n	80082b8 <_printf_i+0x24>
 80082b6:	e0c0      	b.n	800843a <_printf_i+0x1a6>
 80082b8:	2a58      	cmp	r2, #88	; 0x58
 80082ba:	d052      	beq.n	8008362 <_printf_i+0xce>
 80082bc:	0026      	movs	r6, r4
 80082be:	3642      	adds	r6, #66	; 0x42
 80082c0:	7032      	strb	r2, [r6, #0]
 80082c2:	e022      	b.n	800830a <_printf_i+0x76>
 80082c4:	0010      	movs	r0, r2
 80082c6:	3863      	subs	r0, #99	; 0x63
 80082c8:	2815      	cmp	r0, #21
 80082ca:	d8f7      	bhi.n	80082bc <_printf_i+0x28>
 80082cc:	f7f7 ff38 	bl	8000140 <__gnu_thumb1_case_shi>
 80082d0:	001f0016 	.word	0x001f0016
 80082d4:	fff6fff6 	.word	0xfff6fff6
 80082d8:	fff6fff6 	.word	0xfff6fff6
 80082dc:	fff6001f 	.word	0xfff6001f
 80082e0:	fff6fff6 	.word	0xfff6fff6
 80082e4:	00a8fff6 	.word	0x00a8fff6
 80082e8:	009a0036 	.word	0x009a0036
 80082ec:	fff6fff6 	.word	0xfff6fff6
 80082f0:	fff600b9 	.word	0xfff600b9
 80082f4:	fff60036 	.word	0xfff60036
 80082f8:	009efff6 	.word	0x009efff6
 80082fc:	0026      	movs	r6, r4
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	3642      	adds	r6, #66	; 0x42
 8008302:	1d11      	adds	r1, r2, #4
 8008304:	6019      	str	r1, [r3, #0]
 8008306:	6813      	ldr	r3, [r2, #0]
 8008308:	7033      	strb	r3, [r6, #0]
 800830a:	2301      	movs	r3, #1
 800830c:	e0a7      	b.n	800845e <_printf_i+0x1ca>
 800830e:	6808      	ldr	r0, [r1, #0]
 8008310:	6819      	ldr	r1, [r3, #0]
 8008312:	1d0a      	adds	r2, r1, #4
 8008314:	0605      	lsls	r5, r0, #24
 8008316:	d50b      	bpl.n	8008330 <_printf_i+0x9c>
 8008318:	680d      	ldr	r5, [r1, #0]
 800831a:	601a      	str	r2, [r3, #0]
 800831c:	2d00      	cmp	r5, #0
 800831e:	da03      	bge.n	8008328 <_printf_i+0x94>
 8008320:	232d      	movs	r3, #45	; 0x2d
 8008322:	9a04      	ldr	r2, [sp, #16]
 8008324:	426d      	negs	r5, r5
 8008326:	7013      	strb	r3, [r2, #0]
 8008328:	4b61      	ldr	r3, [pc, #388]	; (80084b0 <_printf_i+0x21c>)
 800832a:	270a      	movs	r7, #10
 800832c:	9303      	str	r3, [sp, #12]
 800832e:	e032      	b.n	8008396 <_printf_i+0x102>
 8008330:	680d      	ldr	r5, [r1, #0]
 8008332:	601a      	str	r2, [r3, #0]
 8008334:	0641      	lsls	r1, r0, #25
 8008336:	d5f1      	bpl.n	800831c <_printf_i+0x88>
 8008338:	b22d      	sxth	r5, r5
 800833a:	e7ef      	b.n	800831c <_printf_i+0x88>
 800833c:	680d      	ldr	r5, [r1, #0]
 800833e:	6819      	ldr	r1, [r3, #0]
 8008340:	1d08      	adds	r0, r1, #4
 8008342:	6018      	str	r0, [r3, #0]
 8008344:	062e      	lsls	r6, r5, #24
 8008346:	d501      	bpl.n	800834c <_printf_i+0xb8>
 8008348:	680d      	ldr	r5, [r1, #0]
 800834a:	e003      	b.n	8008354 <_printf_i+0xc0>
 800834c:	066d      	lsls	r5, r5, #25
 800834e:	d5fb      	bpl.n	8008348 <_printf_i+0xb4>
 8008350:	680d      	ldr	r5, [r1, #0]
 8008352:	b2ad      	uxth	r5, r5
 8008354:	4b56      	ldr	r3, [pc, #344]	; (80084b0 <_printf_i+0x21c>)
 8008356:	270a      	movs	r7, #10
 8008358:	9303      	str	r3, [sp, #12]
 800835a:	2a6f      	cmp	r2, #111	; 0x6f
 800835c:	d117      	bne.n	800838e <_printf_i+0xfa>
 800835e:	2708      	movs	r7, #8
 8008360:	e015      	b.n	800838e <_printf_i+0xfa>
 8008362:	3145      	adds	r1, #69	; 0x45
 8008364:	700a      	strb	r2, [r1, #0]
 8008366:	4a52      	ldr	r2, [pc, #328]	; (80084b0 <_printf_i+0x21c>)
 8008368:	9203      	str	r2, [sp, #12]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	6821      	ldr	r1, [r4, #0]
 800836e:	ca20      	ldmia	r2!, {r5}
 8008370:	601a      	str	r2, [r3, #0]
 8008372:	0608      	lsls	r0, r1, #24
 8008374:	d550      	bpl.n	8008418 <_printf_i+0x184>
 8008376:	07cb      	lsls	r3, r1, #31
 8008378:	d502      	bpl.n	8008380 <_printf_i+0xec>
 800837a:	2320      	movs	r3, #32
 800837c:	4319      	orrs	r1, r3
 800837e:	6021      	str	r1, [r4, #0]
 8008380:	2710      	movs	r7, #16
 8008382:	2d00      	cmp	r5, #0
 8008384:	d103      	bne.n	800838e <_printf_i+0xfa>
 8008386:	2320      	movs	r3, #32
 8008388:	6822      	ldr	r2, [r4, #0]
 800838a:	439a      	bics	r2, r3
 800838c:	6022      	str	r2, [r4, #0]
 800838e:	0023      	movs	r3, r4
 8008390:	2200      	movs	r2, #0
 8008392:	3343      	adds	r3, #67	; 0x43
 8008394:	701a      	strb	r2, [r3, #0]
 8008396:	6863      	ldr	r3, [r4, #4]
 8008398:	60a3      	str	r3, [r4, #8]
 800839a:	2b00      	cmp	r3, #0
 800839c:	db03      	blt.n	80083a6 <_printf_i+0x112>
 800839e:	2204      	movs	r2, #4
 80083a0:	6821      	ldr	r1, [r4, #0]
 80083a2:	4391      	bics	r1, r2
 80083a4:	6021      	str	r1, [r4, #0]
 80083a6:	2d00      	cmp	r5, #0
 80083a8:	d102      	bne.n	80083b0 <_printf_i+0x11c>
 80083aa:	9e04      	ldr	r6, [sp, #16]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00c      	beq.n	80083ca <_printf_i+0x136>
 80083b0:	9e04      	ldr	r6, [sp, #16]
 80083b2:	0028      	movs	r0, r5
 80083b4:	0039      	movs	r1, r7
 80083b6:	f7f7 ff5d 	bl	8000274 <__aeabi_uidivmod>
 80083ba:	9b03      	ldr	r3, [sp, #12]
 80083bc:	3e01      	subs	r6, #1
 80083be:	5c5b      	ldrb	r3, [r3, r1]
 80083c0:	7033      	strb	r3, [r6, #0]
 80083c2:	002b      	movs	r3, r5
 80083c4:	0005      	movs	r5, r0
 80083c6:	429f      	cmp	r7, r3
 80083c8:	d9f3      	bls.n	80083b2 <_printf_i+0x11e>
 80083ca:	2f08      	cmp	r7, #8
 80083cc:	d109      	bne.n	80083e2 <_printf_i+0x14e>
 80083ce:	6823      	ldr	r3, [r4, #0]
 80083d0:	07db      	lsls	r3, r3, #31
 80083d2:	d506      	bpl.n	80083e2 <_printf_i+0x14e>
 80083d4:	6863      	ldr	r3, [r4, #4]
 80083d6:	6922      	ldr	r2, [r4, #16]
 80083d8:	4293      	cmp	r3, r2
 80083da:	dc02      	bgt.n	80083e2 <_printf_i+0x14e>
 80083dc:	2330      	movs	r3, #48	; 0x30
 80083de:	3e01      	subs	r6, #1
 80083e0:	7033      	strb	r3, [r6, #0]
 80083e2:	9b04      	ldr	r3, [sp, #16]
 80083e4:	1b9b      	subs	r3, r3, r6
 80083e6:	6123      	str	r3, [r4, #16]
 80083e8:	9b07      	ldr	r3, [sp, #28]
 80083ea:	0021      	movs	r1, r4
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	9805      	ldr	r0, [sp, #20]
 80083f0:	9b06      	ldr	r3, [sp, #24]
 80083f2:	aa09      	add	r2, sp, #36	; 0x24
 80083f4:	f7ff fede 	bl	80081b4 <_printf_common>
 80083f8:	1c43      	adds	r3, r0, #1
 80083fa:	d135      	bne.n	8008468 <_printf_i+0x1d4>
 80083fc:	2001      	movs	r0, #1
 80083fe:	4240      	negs	r0, r0
 8008400:	b00b      	add	sp, #44	; 0x2c
 8008402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008404:	2220      	movs	r2, #32
 8008406:	6809      	ldr	r1, [r1, #0]
 8008408:	430a      	orrs	r2, r1
 800840a:	6022      	str	r2, [r4, #0]
 800840c:	0022      	movs	r2, r4
 800840e:	2178      	movs	r1, #120	; 0x78
 8008410:	3245      	adds	r2, #69	; 0x45
 8008412:	7011      	strb	r1, [r2, #0]
 8008414:	4a27      	ldr	r2, [pc, #156]	; (80084b4 <_printf_i+0x220>)
 8008416:	e7a7      	b.n	8008368 <_printf_i+0xd4>
 8008418:	0648      	lsls	r0, r1, #25
 800841a:	d5ac      	bpl.n	8008376 <_printf_i+0xe2>
 800841c:	b2ad      	uxth	r5, r5
 800841e:	e7aa      	b.n	8008376 <_printf_i+0xe2>
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	680d      	ldr	r5, [r1, #0]
 8008424:	1d10      	adds	r0, r2, #4
 8008426:	6949      	ldr	r1, [r1, #20]
 8008428:	6018      	str	r0, [r3, #0]
 800842a:	6813      	ldr	r3, [r2, #0]
 800842c:	062e      	lsls	r6, r5, #24
 800842e:	d501      	bpl.n	8008434 <_printf_i+0x1a0>
 8008430:	6019      	str	r1, [r3, #0]
 8008432:	e002      	b.n	800843a <_printf_i+0x1a6>
 8008434:	066d      	lsls	r5, r5, #25
 8008436:	d5fb      	bpl.n	8008430 <_printf_i+0x19c>
 8008438:	8019      	strh	r1, [r3, #0]
 800843a:	2300      	movs	r3, #0
 800843c:	9e04      	ldr	r6, [sp, #16]
 800843e:	6123      	str	r3, [r4, #16]
 8008440:	e7d2      	b.n	80083e8 <_printf_i+0x154>
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	1d11      	adds	r1, r2, #4
 8008446:	6019      	str	r1, [r3, #0]
 8008448:	6816      	ldr	r6, [r2, #0]
 800844a:	2100      	movs	r1, #0
 800844c:	0030      	movs	r0, r6
 800844e:	6862      	ldr	r2, [r4, #4]
 8008450:	f000 fad0 	bl	80089f4 <memchr>
 8008454:	2800      	cmp	r0, #0
 8008456:	d001      	beq.n	800845c <_printf_i+0x1c8>
 8008458:	1b80      	subs	r0, r0, r6
 800845a:	6060      	str	r0, [r4, #4]
 800845c:	6863      	ldr	r3, [r4, #4]
 800845e:	6123      	str	r3, [r4, #16]
 8008460:	2300      	movs	r3, #0
 8008462:	9a04      	ldr	r2, [sp, #16]
 8008464:	7013      	strb	r3, [r2, #0]
 8008466:	e7bf      	b.n	80083e8 <_printf_i+0x154>
 8008468:	6923      	ldr	r3, [r4, #16]
 800846a:	0032      	movs	r2, r6
 800846c:	9906      	ldr	r1, [sp, #24]
 800846e:	9805      	ldr	r0, [sp, #20]
 8008470:	9d07      	ldr	r5, [sp, #28]
 8008472:	47a8      	blx	r5
 8008474:	1c43      	adds	r3, r0, #1
 8008476:	d0c1      	beq.n	80083fc <_printf_i+0x168>
 8008478:	6823      	ldr	r3, [r4, #0]
 800847a:	079b      	lsls	r3, r3, #30
 800847c:	d415      	bmi.n	80084aa <_printf_i+0x216>
 800847e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008480:	68e0      	ldr	r0, [r4, #12]
 8008482:	4298      	cmp	r0, r3
 8008484:	dabc      	bge.n	8008400 <_printf_i+0x16c>
 8008486:	0018      	movs	r0, r3
 8008488:	e7ba      	b.n	8008400 <_printf_i+0x16c>
 800848a:	0022      	movs	r2, r4
 800848c:	2301      	movs	r3, #1
 800848e:	9906      	ldr	r1, [sp, #24]
 8008490:	9805      	ldr	r0, [sp, #20]
 8008492:	9e07      	ldr	r6, [sp, #28]
 8008494:	3219      	adds	r2, #25
 8008496:	47b0      	blx	r6
 8008498:	1c43      	adds	r3, r0, #1
 800849a:	d0af      	beq.n	80083fc <_printf_i+0x168>
 800849c:	3501      	adds	r5, #1
 800849e:	68e3      	ldr	r3, [r4, #12]
 80084a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084a2:	1a9b      	subs	r3, r3, r2
 80084a4:	42ab      	cmp	r3, r5
 80084a6:	dcf0      	bgt.n	800848a <_printf_i+0x1f6>
 80084a8:	e7e9      	b.n	800847e <_printf_i+0x1ea>
 80084aa:	2500      	movs	r5, #0
 80084ac:	e7f7      	b.n	800849e <_printf_i+0x20a>
 80084ae:	46c0      	nop			; (mov r8, r8)
 80084b0:	08009039 	.word	0x08009039
 80084b4:	0800904a 	.word	0x0800904a

080084b8 <_sbrk_r>:
 80084b8:	2300      	movs	r3, #0
 80084ba:	b570      	push	{r4, r5, r6, lr}
 80084bc:	4d06      	ldr	r5, [pc, #24]	; (80084d8 <_sbrk_r+0x20>)
 80084be:	0004      	movs	r4, r0
 80084c0:	0008      	movs	r0, r1
 80084c2:	602b      	str	r3, [r5, #0]
 80084c4:	f7fa fd0e 	bl	8002ee4 <_sbrk>
 80084c8:	1c43      	adds	r3, r0, #1
 80084ca:	d103      	bne.n	80084d4 <_sbrk_r+0x1c>
 80084cc:	682b      	ldr	r3, [r5, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d000      	beq.n	80084d4 <_sbrk_r+0x1c>
 80084d2:	6023      	str	r3, [r4, #0]
 80084d4:	bd70      	pop	{r4, r5, r6, pc}
 80084d6:	46c0      	nop			; (mov r8, r8)
 80084d8:	2000089c 	.word	0x2000089c

080084dc <__sread>:
 80084dc:	b570      	push	{r4, r5, r6, lr}
 80084de:	000c      	movs	r4, r1
 80084e0:	250e      	movs	r5, #14
 80084e2:	5f49      	ldrsh	r1, [r1, r5]
 80084e4:	f000 faec 	bl	8008ac0 <_read_r>
 80084e8:	2800      	cmp	r0, #0
 80084ea:	db03      	blt.n	80084f4 <__sread+0x18>
 80084ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80084ee:	181b      	adds	r3, r3, r0
 80084f0:	6563      	str	r3, [r4, #84]	; 0x54
 80084f2:	bd70      	pop	{r4, r5, r6, pc}
 80084f4:	89a3      	ldrh	r3, [r4, #12]
 80084f6:	4a02      	ldr	r2, [pc, #8]	; (8008500 <__sread+0x24>)
 80084f8:	4013      	ands	r3, r2
 80084fa:	81a3      	strh	r3, [r4, #12]
 80084fc:	e7f9      	b.n	80084f2 <__sread+0x16>
 80084fe:	46c0      	nop			; (mov r8, r8)
 8008500:	ffffefff 	.word	0xffffefff

08008504 <__swrite>:
 8008504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008506:	001f      	movs	r7, r3
 8008508:	898b      	ldrh	r3, [r1, #12]
 800850a:	0005      	movs	r5, r0
 800850c:	000c      	movs	r4, r1
 800850e:	0016      	movs	r6, r2
 8008510:	05db      	lsls	r3, r3, #23
 8008512:	d505      	bpl.n	8008520 <__swrite+0x1c>
 8008514:	230e      	movs	r3, #14
 8008516:	5ec9      	ldrsh	r1, [r1, r3]
 8008518:	2200      	movs	r2, #0
 800851a:	2302      	movs	r3, #2
 800851c:	f000 f9ea 	bl	80088f4 <_lseek_r>
 8008520:	89a3      	ldrh	r3, [r4, #12]
 8008522:	4a05      	ldr	r2, [pc, #20]	; (8008538 <__swrite+0x34>)
 8008524:	0028      	movs	r0, r5
 8008526:	4013      	ands	r3, r2
 8008528:	81a3      	strh	r3, [r4, #12]
 800852a:	0032      	movs	r2, r6
 800852c:	230e      	movs	r3, #14
 800852e:	5ee1      	ldrsh	r1, [r4, r3]
 8008530:	003b      	movs	r3, r7
 8008532:	f000 f875 	bl	8008620 <_write_r>
 8008536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008538:	ffffefff 	.word	0xffffefff

0800853c <__sseek>:
 800853c:	b570      	push	{r4, r5, r6, lr}
 800853e:	000c      	movs	r4, r1
 8008540:	250e      	movs	r5, #14
 8008542:	5f49      	ldrsh	r1, [r1, r5]
 8008544:	f000 f9d6 	bl	80088f4 <_lseek_r>
 8008548:	89a3      	ldrh	r3, [r4, #12]
 800854a:	1c42      	adds	r2, r0, #1
 800854c:	d103      	bne.n	8008556 <__sseek+0x1a>
 800854e:	4a05      	ldr	r2, [pc, #20]	; (8008564 <__sseek+0x28>)
 8008550:	4013      	ands	r3, r2
 8008552:	81a3      	strh	r3, [r4, #12]
 8008554:	bd70      	pop	{r4, r5, r6, pc}
 8008556:	2280      	movs	r2, #128	; 0x80
 8008558:	0152      	lsls	r2, r2, #5
 800855a:	4313      	orrs	r3, r2
 800855c:	81a3      	strh	r3, [r4, #12]
 800855e:	6560      	str	r0, [r4, #84]	; 0x54
 8008560:	e7f8      	b.n	8008554 <__sseek+0x18>
 8008562:	46c0      	nop			; (mov r8, r8)
 8008564:	ffffefff 	.word	0xffffefff

08008568 <__sclose>:
 8008568:	b510      	push	{r4, lr}
 800856a:	230e      	movs	r3, #14
 800856c:	5ec9      	ldrsh	r1, [r1, r3]
 800856e:	f000 f8e3 	bl	8008738 <_close_r>
 8008572:	bd10      	pop	{r4, pc}

08008574 <__swbuf_r>:
 8008574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008576:	0005      	movs	r5, r0
 8008578:	000e      	movs	r6, r1
 800857a:	0014      	movs	r4, r2
 800857c:	2800      	cmp	r0, #0
 800857e:	d004      	beq.n	800858a <__swbuf_r+0x16>
 8008580:	6983      	ldr	r3, [r0, #24]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d101      	bne.n	800858a <__swbuf_r+0x16>
 8008586:	f7ff fbb1 	bl	8007cec <__sinit>
 800858a:	4b22      	ldr	r3, [pc, #136]	; (8008614 <__swbuf_r+0xa0>)
 800858c:	429c      	cmp	r4, r3
 800858e:	d12e      	bne.n	80085ee <__swbuf_r+0x7a>
 8008590:	686c      	ldr	r4, [r5, #4]
 8008592:	69a3      	ldr	r3, [r4, #24]
 8008594:	60a3      	str	r3, [r4, #8]
 8008596:	89a3      	ldrh	r3, [r4, #12]
 8008598:	071b      	lsls	r3, r3, #28
 800859a:	d532      	bpl.n	8008602 <__swbuf_r+0x8e>
 800859c:	6923      	ldr	r3, [r4, #16]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d02f      	beq.n	8008602 <__swbuf_r+0x8e>
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	6922      	ldr	r2, [r4, #16]
 80085a6:	b2f7      	uxtb	r7, r6
 80085a8:	1a98      	subs	r0, r3, r2
 80085aa:	6963      	ldr	r3, [r4, #20]
 80085ac:	b2f6      	uxtb	r6, r6
 80085ae:	4283      	cmp	r3, r0
 80085b0:	dc05      	bgt.n	80085be <__swbuf_r+0x4a>
 80085b2:	0021      	movs	r1, r4
 80085b4:	0028      	movs	r0, r5
 80085b6:	f000 f95d 	bl	8008874 <_fflush_r>
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d127      	bne.n	800860e <__swbuf_r+0x9a>
 80085be:	68a3      	ldr	r3, [r4, #8]
 80085c0:	3001      	adds	r0, #1
 80085c2:	3b01      	subs	r3, #1
 80085c4:	60a3      	str	r3, [r4, #8]
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	1c5a      	adds	r2, r3, #1
 80085ca:	6022      	str	r2, [r4, #0]
 80085cc:	701f      	strb	r7, [r3, #0]
 80085ce:	6963      	ldr	r3, [r4, #20]
 80085d0:	4283      	cmp	r3, r0
 80085d2:	d004      	beq.n	80085de <__swbuf_r+0x6a>
 80085d4:	89a3      	ldrh	r3, [r4, #12]
 80085d6:	07db      	lsls	r3, r3, #31
 80085d8:	d507      	bpl.n	80085ea <__swbuf_r+0x76>
 80085da:	2e0a      	cmp	r6, #10
 80085dc:	d105      	bne.n	80085ea <__swbuf_r+0x76>
 80085de:	0021      	movs	r1, r4
 80085e0:	0028      	movs	r0, r5
 80085e2:	f000 f947 	bl	8008874 <_fflush_r>
 80085e6:	2800      	cmp	r0, #0
 80085e8:	d111      	bne.n	800860e <__swbuf_r+0x9a>
 80085ea:	0030      	movs	r0, r6
 80085ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085ee:	4b0a      	ldr	r3, [pc, #40]	; (8008618 <__swbuf_r+0xa4>)
 80085f0:	429c      	cmp	r4, r3
 80085f2:	d101      	bne.n	80085f8 <__swbuf_r+0x84>
 80085f4:	68ac      	ldr	r4, [r5, #8]
 80085f6:	e7cc      	b.n	8008592 <__swbuf_r+0x1e>
 80085f8:	4b08      	ldr	r3, [pc, #32]	; (800861c <__swbuf_r+0xa8>)
 80085fa:	429c      	cmp	r4, r3
 80085fc:	d1c9      	bne.n	8008592 <__swbuf_r+0x1e>
 80085fe:	68ec      	ldr	r4, [r5, #12]
 8008600:	e7c7      	b.n	8008592 <__swbuf_r+0x1e>
 8008602:	0021      	movs	r1, r4
 8008604:	0028      	movs	r0, r5
 8008606:	f000 f81f 	bl	8008648 <__swsetup_r>
 800860a:	2800      	cmp	r0, #0
 800860c:	d0c9      	beq.n	80085a2 <__swbuf_r+0x2e>
 800860e:	2601      	movs	r6, #1
 8008610:	4276      	negs	r6, r6
 8008612:	e7ea      	b.n	80085ea <__swbuf_r+0x76>
 8008614:	08008fe8 	.word	0x08008fe8
 8008618:	08009008 	.word	0x08009008
 800861c:	08008fc8 	.word	0x08008fc8

08008620 <_write_r>:
 8008620:	b570      	push	{r4, r5, r6, lr}
 8008622:	0004      	movs	r4, r0
 8008624:	0008      	movs	r0, r1
 8008626:	0011      	movs	r1, r2
 8008628:	001a      	movs	r2, r3
 800862a:	2300      	movs	r3, #0
 800862c:	4d05      	ldr	r5, [pc, #20]	; (8008644 <_write_r+0x24>)
 800862e:	602b      	str	r3, [r5, #0]
 8008630:	f7fa fc4a 	bl	8002ec8 <_write>
 8008634:	1c43      	adds	r3, r0, #1
 8008636:	d103      	bne.n	8008640 <_write_r+0x20>
 8008638:	682b      	ldr	r3, [r5, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d000      	beq.n	8008640 <_write_r+0x20>
 800863e:	6023      	str	r3, [r4, #0]
 8008640:	bd70      	pop	{r4, r5, r6, pc}
 8008642:	46c0      	nop			; (mov r8, r8)
 8008644:	2000089c 	.word	0x2000089c

08008648 <__swsetup_r>:
 8008648:	4b37      	ldr	r3, [pc, #220]	; (8008728 <__swsetup_r+0xe0>)
 800864a:	b570      	push	{r4, r5, r6, lr}
 800864c:	681d      	ldr	r5, [r3, #0]
 800864e:	0006      	movs	r6, r0
 8008650:	000c      	movs	r4, r1
 8008652:	2d00      	cmp	r5, #0
 8008654:	d005      	beq.n	8008662 <__swsetup_r+0x1a>
 8008656:	69ab      	ldr	r3, [r5, #24]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d102      	bne.n	8008662 <__swsetup_r+0x1a>
 800865c:	0028      	movs	r0, r5
 800865e:	f7ff fb45 	bl	8007cec <__sinit>
 8008662:	4b32      	ldr	r3, [pc, #200]	; (800872c <__swsetup_r+0xe4>)
 8008664:	429c      	cmp	r4, r3
 8008666:	d10f      	bne.n	8008688 <__swsetup_r+0x40>
 8008668:	686c      	ldr	r4, [r5, #4]
 800866a:	230c      	movs	r3, #12
 800866c:	5ee2      	ldrsh	r2, [r4, r3]
 800866e:	b293      	uxth	r3, r2
 8008670:	0711      	lsls	r1, r2, #28
 8008672:	d42d      	bmi.n	80086d0 <__swsetup_r+0x88>
 8008674:	06d9      	lsls	r1, r3, #27
 8008676:	d411      	bmi.n	800869c <__swsetup_r+0x54>
 8008678:	2309      	movs	r3, #9
 800867a:	2001      	movs	r0, #1
 800867c:	6033      	str	r3, [r6, #0]
 800867e:	3337      	adds	r3, #55	; 0x37
 8008680:	4313      	orrs	r3, r2
 8008682:	81a3      	strh	r3, [r4, #12]
 8008684:	4240      	negs	r0, r0
 8008686:	bd70      	pop	{r4, r5, r6, pc}
 8008688:	4b29      	ldr	r3, [pc, #164]	; (8008730 <__swsetup_r+0xe8>)
 800868a:	429c      	cmp	r4, r3
 800868c:	d101      	bne.n	8008692 <__swsetup_r+0x4a>
 800868e:	68ac      	ldr	r4, [r5, #8]
 8008690:	e7eb      	b.n	800866a <__swsetup_r+0x22>
 8008692:	4b28      	ldr	r3, [pc, #160]	; (8008734 <__swsetup_r+0xec>)
 8008694:	429c      	cmp	r4, r3
 8008696:	d1e8      	bne.n	800866a <__swsetup_r+0x22>
 8008698:	68ec      	ldr	r4, [r5, #12]
 800869a:	e7e6      	b.n	800866a <__swsetup_r+0x22>
 800869c:	075b      	lsls	r3, r3, #29
 800869e:	d513      	bpl.n	80086c8 <__swsetup_r+0x80>
 80086a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086a2:	2900      	cmp	r1, #0
 80086a4:	d008      	beq.n	80086b8 <__swsetup_r+0x70>
 80086a6:	0023      	movs	r3, r4
 80086a8:	3344      	adds	r3, #68	; 0x44
 80086aa:	4299      	cmp	r1, r3
 80086ac:	d002      	beq.n	80086b4 <__swsetup_r+0x6c>
 80086ae:	0030      	movs	r0, r6
 80086b0:	f000 f9bc 	bl	8008a2c <_free_r>
 80086b4:	2300      	movs	r3, #0
 80086b6:	6363      	str	r3, [r4, #52]	; 0x34
 80086b8:	2224      	movs	r2, #36	; 0x24
 80086ba:	89a3      	ldrh	r3, [r4, #12]
 80086bc:	4393      	bics	r3, r2
 80086be:	81a3      	strh	r3, [r4, #12]
 80086c0:	2300      	movs	r3, #0
 80086c2:	6063      	str	r3, [r4, #4]
 80086c4:	6923      	ldr	r3, [r4, #16]
 80086c6:	6023      	str	r3, [r4, #0]
 80086c8:	2308      	movs	r3, #8
 80086ca:	89a2      	ldrh	r2, [r4, #12]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	81a3      	strh	r3, [r4, #12]
 80086d0:	6923      	ldr	r3, [r4, #16]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10b      	bne.n	80086ee <__swsetup_r+0xa6>
 80086d6:	21a0      	movs	r1, #160	; 0xa0
 80086d8:	2280      	movs	r2, #128	; 0x80
 80086da:	89a3      	ldrh	r3, [r4, #12]
 80086dc:	0089      	lsls	r1, r1, #2
 80086de:	0092      	lsls	r2, r2, #2
 80086e0:	400b      	ands	r3, r1
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d003      	beq.n	80086ee <__swsetup_r+0xa6>
 80086e6:	0021      	movs	r1, r4
 80086e8:	0030      	movs	r0, r6
 80086ea:	f000 f93f 	bl	800896c <__smakebuf_r>
 80086ee:	220c      	movs	r2, #12
 80086f0:	5ea3      	ldrsh	r3, [r4, r2]
 80086f2:	2001      	movs	r0, #1
 80086f4:	001a      	movs	r2, r3
 80086f6:	b299      	uxth	r1, r3
 80086f8:	4002      	ands	r2, r0
 80086fa:	4203      	tst	r3, r0
 80086fc:	d00f      	beq.n	800871e <__swsetup_r+0xd6>
 80086fe:	2200      	movs	r2, #0
 8008700:	60a2      	str	r2, [r4, #8]
 8008702:	6962      	ldr	r2, [r4, #20]
 8008704:	4252      	negs	r2, r2
 8008706:	61a2      	str	r2, [r4, #24]
 8008708:	2000      	movs	r0, #0
 800870a:	6922      	ldr	r2, [r4, #16]
 800870c:	4282      	cmp	r2, r0
 800870e:	d1ba      	bne.n	8008686 <__swsetup_r+0x3e>
 8008710:	060a      	lsls	r2, r1, #24
 8008712:	d5b8      	bpl.n	8008686 <__swsetup_r+0x3e>
 8008714:	2240      	movs	r2, #64	; 0x40
 8008716:	4313      	orrs	r3, r2
 8008718:	81a3      	strh	r3, [r4, #12]
 800871a:	3801      	subs	r0, #1
 800871c:	e7b3      	b.n	8008686 <__swsetup_r+0x3e>
 800871e:	0788      	lsls	r0, r1, #30
 8008720:	d400      	bmi.n	8008724 <__swsetup_r+0xdc>
 8008722:	6962      	ldr	r2, [r4, #20]
 8008724:	60a2      	str	r2, [r4, #8]
 8008726:	e7ef      	b.n	8008708 <__swsetup_r+0xc0>
 8008728:	20000030 	.word	0x20000030
 800872c:	08008fe8 	.word	0x08008fe8
 8008730:	08009008 	.word	0x08009008
 8008734:	08008fc8 	.word	0x08008fc8

08008738 <_close_r>:
 8008738:	2300      	movs	r3, #0
 800873a:	b570      	push	{r4, r5, r6, lr}
 800873c:	4d06      	ldr	r5, [pc, #24]	; (8008758 <_close_r+0x20>)
 800873e:	0004      	movs	r4, r0
 8008740:	0008      	movs	r0, r1
 8008742:	602b      	str	r3, [r5, #0]
 8008744:	f7fa fbe8 	bl	8002f18 <_close>
 8008748:	1c43      	adds	r3, r0, #1
 800874a:	d103      	bne.n	8008754 <_close_r+0x1c>
 800874c:	682b      	ldr	r3, [r5, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d000      	beq.n	8008754 <_close_r+0x1c>
 8008752:	6023      	str	r3, [r4, #0]
 8008754:	bd70      	pop	{r4, r5, r6, pc}
 8008756:	46c0      	nop			; (mov r8, r8)
 8008758:	2000089c 	.word	0x2000089c

0800875c <__sflush_r>:
 800875c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800875e:	898b      	ldrh	r3, [r1, #12]
 8008760:	0005      	movs	r5, r0
 8008762:	000c      	movs	r4, r1
 8008764:	071a      	lsls	r2, r3, #28
 8008766:	d45f      	bmi.n	8008828 <__sflush_r+0xcc>
 8008768:	684a      	ldr	r2, [r1, #4]
 800876a:	2a00      	cmp	r2, #0
 800876c:	dc04      	bgt.n	8008778 <__sflush_r+0x1c>
 800876e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008770:	2a00      	cmp	r2, #0
 8008772:	dc01      	bgt.n	8008778 <__sflush_r+0x1c>
 8008774:	2000      	movs	r0, #0
 8008776:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008778:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800877a:	2f00      	cmp	r7, #0
 800877c:	d0fa      	beq.n	8008774 <__sflush_r+0x18>
 800877e:	2200      	movs	r2, #0
 8008780:	2180      	movs	r1, #128	; 0x80
 8008782:	682e      	ldr	r6, [r5, #0]
 8008784:	602a      	str	r2, [r5, #0]
 8008786:	001a      	movs	r2, r3
 8008788:	0149      	lsls	r1, r1, #5
 800878a:	400a      	ands	r2, r1
 800878c:	420b      	tst	r3, r1
 800878e:	d034      	beq.n	80087fa <__sflush_r+0x9e>
 8008790:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008792:	89a3      	ldrh	r3, [r4, #12]
 8008794:	075b      	lsls	r3, r3, #29
 8008796:	d506      	bpl.n	80087a6 <__sflush_r+0x4a>
 8008798:	6863      	ldr	r3, [r4, #4]
 800879a:	1ac0      	subs	r0, r0, r3
 800879c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d001      	beq.n	80087a6 <__sflush_r+0x4a>
 80087a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087a4:	1ac0      	subs	r0, r0, r3
 80087a6:	0002      	movs	r2, r0
 80087a8:	6a21      	ldr	r1, [r4, #32]
 80087aa:	2300      	movs	r3, #0
 80087ac:	0028      	movs	r0, r5
 80087ae:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80087b0:	47b8      	blx	r7
 80087b2:	89a1      	ldrh	r1, [r4, #12]
 80087b4:	1c43      	adds	r3, r0, #1
 80087b6:	d106      	bne.n	80087c6 <__sflush_r+0x6a>
 80087b8:	682b      	ldr	r3, [r5, #0]
 80087ba:	2b1d      	cmp	r3, #29
 80087bc:	d831      	bhi.n	8008822 <__sflush_r+0xc6>
 80087be:	4a2c      	ldr	r2, [pc, #176]	; (8008870 <__sflush_r+0x114>)
 80087c0:	40da      	lsrs	r2, r3
 80087c2:	07d3      	lsls	r3, r2, #31
 80087c4:	d52d      	bpl.n	8008822 <__sflush_r+0xc6>
 80087c6:	2300      	movs	r3, #0
 80087c8:	6063      	str	r3, [r4, #4]
 80087ca:	6923      	ldr	r3, [r4, #16]
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	04cb      	lsls	r3, r1, #19
 80087d0:	d505      	bpl.n	80087de <__sflush_r+0x82>
 80087d2:	1c43      	adds	r3, r0, #1
 80087d4:	d102      	bne.n	80087dc <__sflush_r+0x80>
 80087d6:	682b      	ldr	r3, [r5, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d100      	bne.n	80087de <__sflush_r+0x82>
 80087dc:	6560      	str	r0, [r4, #84]	; 0x54
 80087de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087e0:	602e      	str	r6, [r5, #0]
 80087e2:	2900      	cmp	r1, #0
 80087e4:	d0c6      	beq.n	8008774 <__sflush_r+0x18>
 80087e6:	0023      	movs	r3, r4
 80087e8:	3344      	adds	r3, #68	; 0x44
 80087ea:	4299      	cmp	r1, r3
 80087ec:	d002      	beq.n	80087f4 <__sflush_r+0x98>
 80087ee:	0028      	movs	r0, r5
 80087f0:	f000 f91c 	bl	8008a2c <_free_r>
 80087f4:	2000      	movs	r0, #0
 80087f6:	6360      	str	r0, [r4, #52]	; 0x34
 80087f8:	e7bd      	b.n	8008776 <__sflush_r+0x1a>
 80087fa:	2301      	movs	r3, #1
 80087fc:	0028      	movs	r0, r5
 80087fe:	6a21      	ldr	r1, [r4, #32]
 8008800:	47b8      	blx	r7
 8008802:	1c43      	adds	r3, r0, #1
 8008804:	d1c5      	bne.n	8008792 <__sflush_r+0x36>
 8008806:	682b      	ldr	r3, [r5, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d0c2      	beq.n	8008792 <__sflush_r+0x36>
 800880c:	2b1d      	cmp	r3, #29
 800880e:	d001      	beq.n	8008814 <__sflush_r+0xb8>
 8008810:	2b16      	cmp	r3, #22
 8008812:	d101      	bne.n	8008818 <__sflush_r+0xbc>
 8008814:	602e      	str	r6, [r5, #0]
 8008816:	e7ad      	b.n	8008774 <__sflush_r+0x18>
 8008818:	2340      	movs	r3, #64	; 0x40
 800881a:	89a2      	ldrh	r2, [r4, #12]
 800881c:	4313      	orrs	r3, r2
 800881e:	81a3      	strh	r3, [r4, #12]
 8008820:	e7a9      	b.n	8008776 <__sflush_r+0x1a>
 8008822:	2340      	movs	r3, #64	; 0x40
 8008824:	430b      	orrs	r3, r1
 8008826:	e7fa      	b.n	800881e <__sflush_r+0xc2>
 8008828:	690f      	ldr	r7, [r1, #16]
 800882a:	2f00      	cmp	r7, #0
 800882c:	d0a2      	beq.n	8008774 <__sflush_r+0x18>
 800882e:	680a      	ldr	r2, [r1, #0]
 8008830:	600f      	str	r7, [r1, #0]
 8008832:	1bd2      	subs	r2, r2, r7
 8008834:	9201      	str	r2, [sp, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	079b      	lsls	r3, r3, #30
 800883a:	d100      	bne.n	800883e <__sflush_r+0xe2>
 800883c:	694a      	ldr	r2, [r1, #20]
 800883e:	60a2      	str	r2, [r4, #8]
 8008840:	9b01      	ldr	r3, [sp, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	dc00      	bgt.n	8008848 <__sflush_r+0xec>
 8008846:	e795      	b.n	8008774 <__sflush_r+0x18>
 8008848:	003a      	movs	r2, r7
 800884a:	0028      	movs	r0, r5
 800884c:	9b01      	ldr	r3, [sp, #4]
 800884e:	6a21      	ldr	r1, [r4, #32]
 8008850:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008852:	47b0      	blx	r6
 8008854:	2800      	cmp	r0, #0
 8008856:	dc06      	bgt.n	8008866 <__sflush_r+0x10a>
 8008858:	2340      	movs	r3, #64	; 0x40
 800885a:	2001      	movs	r0, #1
 800885c:	89a2      	ldrh	r2, [r4, #12]
 800885e:	4240      	negs	r0, r0
 8008860:	4313      	orrs	r3, r2
 8008862:	81a3      	strh	r3, [r4, #12]
 8008864:	e787      	b.n	8008776 <__sflush_r+0x1a>
 8008866:	9b01      	ldr	r3, [sp, #4]
 8008868:	183f      	adds	r7, r7, r0
 800886a:	1a1b      	subs	r3, r3, r0
 800886c:	9301      	str	r3, [sp, #4]
 800886e:	e7e7      	b.n	8008840 <__sflush_r+0xe4>
 8008870:	20400001 	.word	0x20400001

08008874 <_fflush_r>:
 8008874:	690b      	ldr	r3, [r1, #16]
 8008876:	b570      	push	{r4, r5, r6, lr}
 8008878:	0005      	movs	r5, r0
 800887a:	000c      	movs	r4, r1
 800887c:	2b00      	cmp	r3, #0
 800887e:	d102      	bne.n	8008886 <_fflush_r+0x12>
 8008880:	2500      	movs	r5, #0
 8008882:	0028      	movs	r0, r5
 8008884:	bd70      	pop	{r4, r5, r6, pc}
 8008886:	2800      	cmp	r0, #0
 8008888:	d004      	beq.n	8008894 <_fflush_r+0x20>
 800888a:	6983      	ldr	r3, [r0, #24]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d101      	bne.n	8008894 <_fflush_r+0x20>
 8008890:	f7ff fa2c 	bl	8007cec <__sinit>
 8008894:	4b14      	ldr	r3, [pc, #80]	; (80088e8 <_fflush_r+0x74>)
 8008896:	429c      	cmp	r4, r3
 8008898:	d11b      	bne.n	80088d2 <_fflush_r+0x5e>
 800889a:	686c      	ldr	r4, [r5, #4]
 800889c:	220c      	movs	r2, #12
 800889e:	5ea3      	ldrsh	r3, [r4, r2]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d0ed      	beq.n	8008880 <_fflush_r+0xc>
 80088a4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088a6:	07d2      	lsls	r2, r2, #31
 80088a8:	d404      	bmi.n	80088b4 <_fflush_r+0x40>
 80088aa:	059b      	lsls	r3, r3, #22
 80088ac:	d402      	bmi.n	80088b4 <_fflush_r+0x40>
 80088ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088b0:	f7ff fabd 	bl	8007e2e <__retarget_lock_acquire_recursive>
 80088b4:	0028      	movs	r0, r5
 80088b6:	0021      	movs	r1, r4
 80088b8:	f7ff ff50 	bl	800875c <__sflush_r>
 80088bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088be:	0005      	movs	r5, r0
 80088c0:	07db      	lsls	r3, r3, #31
 80088c2:	d4de      	bmi.n	8008882 <_fflush_r+0xe>
 80088c4:	89a3      	ldrh	r3, [r4, #12]
 80088c6:	059b      	lsls	r3, r3, #22
 80088c8:	d4db      	bmi.n	8008882 <_fflush_r+0xe>
 80088ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088cc:	f7ff fab0 	bl	8007e30 <__retarget_lock_release_recursive>
 80088d0:	e7d7      	b.n	8008882 <_fflush_r+0xe>
 80088d2:	4b06      	ldr	r3, [pc, #24]	; (80088ec <_fflush_r+0x78>)
 80088d4:	429c      	cmp	r4, r3
 80088d6:	d101      	bne.n	80088dc <_fflush_r+0x68>
 80088d8:	68ac      	ldr	r4, [r5, #8]
 80088da:	e7df      	b.n	800889c <_fflush_r+0x28>
 80088dc:	4b04      	ldr	r3, [pc, #16]	; (80088f0 <_fflush_r+0x7c>)
 80088de:	429c      	cmp	r4, r3
 80088e0:	d1dc      	bne.n	800889c <_fflush_r+0x28>
 80088e2:	68ec      	ldr	r4, [r5, #12]
 80088e4:	e7da      	b.n	800889c <_fflush_r+0x28>
 80088e6:	46c0      	nop			; (mov r8, r8)
 80088e8:	08008fe8 	.word	0x08008fe8
 80088ec:	08009008 	.word	0x08009008
 80088f0:	08008fc8 	.word	0x08008fc8

080088f4 <_lseek_r>:
 80088f4:	b570      	push	{r4, r5, r6, lr}
 80088f6:	0004      	movs	r4, r0
 80088f8:	0008      	movs	r0, r1
 80088fa:	0011      	movs	r1, r2
 80088fc:	001a      	movs	r2, r3
 80088fe:	2300      	movs	r3, #0
 8008900:	4d05      	ldr	r5, [pc, #20]	; (8008918 <_lseek_r+0x24>)
 8008902:	602b      	str	r3, [r5, #0]
 8008904:	f7fa fb12 	bl	8002f2c <_lseek>
 8008908:	1c43      	adds	r3, r0, #1
 800890a:	d103      	bne.n	8008914 <_lseek_r+0x20>
 800890c:	682b      	ldr	r3, [r5, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d000      	beq.n	8008914 <_lseek_r+0x20>
 8008912:	6023      	str	r3, [r4, #0]
 8008914:	bd70      	pop	{r4, r5, r6, pc}
 8008916:	46c0      	nop			; (mov r8, r8)
 8008918:	2000089c 	.word	0x2000089c

0800891c <__swhatbuf_r>:
 800891c:	b570      	push	{r4, r5, r6, lr}
 800891e:	000e      	movs	r6, r1
 8008920:	001d      	movs	r5, r3
 8008922:	230e      	movs	r3, #14
 8008924:	5ec9      	ldrsh	r1, [r1, r3]
 8008926:	0014      	movs	r4, r2
 8008928:	b096      	sub	sp, #88	; 0x58
 800892a:	2900      	cmp	r1, #0
 800892c:	da07      	bge.n	800893e <__swhatbuf_r+0x22>
 800892e:	2300      	movs	r3, #0
 8008930:	602b      	str	r3, [r5, #0]
 8008932:	89b3      	ldrh	r3, [r6, #12]
 8008934:	061b      	lsls	r3, r3, #24
 8008936:	d411      	bmi.n	800895c <__swhatbuf_r+0x40>
 8008938:	2380      	movs	r3, #128	; 0x80
 800893a:	00db      	lsls	r3, r3, #3
 800893c:	e00f      	b.n	800895e <__swhatbuf_r+0x42>
 800893e:	466a      	mov	r2, sp
 8008940:	f000 f8d2 	bl	8008ae8 <_fstat_r>
 8008944:	2800      	cmp	r0, #0
 8008946:	dbf2      	blt.n	800892e <__swhatbuf_r+0x12>
 8008948:	23f0      	movs	r3, #240	; 0xf0
 800894a:	9901      	ldr	r1, [sp, #4]
 800894c:	021b      	lsls	r3, r3, #8
 800894e:	4019      	ands	r1, r3
 8008950:	4b05      	ldr	r3, [pc, #20]	; (8008968 <__swhatbuf_r+0x4c>)
 8008952:	18c9      	adds	r1, r1, r3
 8008954:	424b      	negs	r3, r1
 8008956:	4159      	adcs	r1, r3
 8008958:	6029      	str	r1, [r5, #0]
 800895a:	e7ed      	b.n	8008938 <__swhatbuf_r+0x1c>
 800895c:	2340      	movs	r3, #64	; 0x40
 800895e:	2000      	movs	r0, #0
 8008960:	6023      	str	r3, [r4, #0]
 8008962:	b016      	add	sp, #88	; 0x58
 8008964:	bd70      	pop	{r4, r5, r6, pc}
 8008966:	46c0      	nop			; (mov r8, r8)
 8008968:	ffffe000 	.word	0xffffe000

0800896c <__smakebuf_r>:
 800896c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800896e:	2602      	movs	r6, #2
 8008970:	898b      	ldrh	r3, [r1, #12]
 8008972:	0005      	movs	r5, r0
 8008974:	000c      	movs	r4, r1
 8008976:	4233      	tst	r3, r6
 8008978:	d006      	beq.n	8008988 <__smakebuf_r+0x1c>
 800897a:	0023      	movs	r3, r4
 800897c:	3347      	adds	r3, #71	; 0x47
 800897e:	6023      	str	r3, [r4, #0]
 8008980:	6123      	str	r3, [r4, #16]
 8008982:	2301      	movs	r3, #1
 8008984:	6163      	str	r3, [r4, #20]
 8008986:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008988:	466a      	mov	r2, sp
 800898a:	ab01      	add	r3, sp, #4
 800898c:	f7ff ffc6 	bl	800891c <__swhatbuf_r>
 8008990:	9900      	ldr	r1, [sp, #0]
 8008992:	0007      	movs	r7, r0
 8008994:	0028      	movs	r0, r5
 8008996:	f7ff fa4d 	bl	8007e34 <_malloc_r>
 800899a:	2800      	cmp	r0, #0
 800899c:	d108      	bne.n	80089b0 <__smakebuf_r+0x44>
 800899e:	220c      	movs	r2, #12
 80089a0:	5ea3      	ldrsh	r3, [r4, r2]
 80089a2:	059a      	lsls	r2, r3, #22
 80089a4:	d4ef      	bmi.n	8008986 <__smakebuf_r+0x1a>
 80089a6:	2203      	movs	r2, #3
 80089a8:	4393      	bics	r3, r2
 80089aa:	431e      	orrs	r6, r3
 80089ac:	81a6      	strh	r6, [r4, #12]
 80089ae:	e7e4      	b.n	800897a <__smakebuf_r+0xe>
 80089b0:	4b0f      	ldr	r3, [pc, #60]	; (80089f0 <__smakebuf_r+0x84>)
 80089b2:	62ab      	str	r3, [r5, #40]	; 0x28
 80089b4:	2380      	movs	r3, #128	; 0x80
 80089b6:	89a2      	ldrh	r2, [r4, #12]
 80089b8:	6020      	str	r0, [r4, #0]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	81a3      	strh	r3, [r4, #12]
 80089be:	9b00      	ldr	r3, [sp, #0]
 80089c0:	6120      	str	r0, [r4, #16]
 80089c2:	6163      	str	r3, [r4, #20]
 80089c4:	9b01      	ldr	r3, [sp, #4]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00d      	beq.n	80089e6 <__smakebuf_r+0x7a>
 80089ca:	0028      	movs	r0, r5
 80089cc:	230e      	movs	r3, #14
 80089ce:	5ee1      	ldrsh	r1, [r4, r3]
 80089d0:	f000 f89c 	bl	8008b0c <_isatty_r>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d006      	beq.n	80089e6 <__smakebuf_r+0x7a>
 80089d8:	2203      	movs	r2, #3
 80089da:	89a3      	ldrh	r3, [r4, #12]
 80089dc:	4393      	bics	r3, r2
 80089de:	001a      	movs	r2, r3
 80089e0:	2301      	movs	r3, #1
 80089e2:	4313      	orrs	r3, r2
 80089e4:	81a3      	strh	r3, [r4, #12]
 80089e6:	89a0      	ldrh	r0, [r4, #12]
 80089e8:	4307      	orrs	r7, r0
 80089ea:	81a7      	strh	r7, [r4, #12]
 80089ec:	e7cb      	b.n	8008986 <__smakebuf_r+0x1a>
 80089ee:	46c0      	nop			; (mov r8, r8)
 80089f0:	08007c71 	.word	0x08007c71

080089f4 <memchr>:
 80089f4:	b2c9      	uxtb	r1, r1
 80089f6:	1882      	adds	r2, r0, r2
 80089f8:	4290      	cmp	r0, r2
 80089fa:	d101      	bne.n	8008a00 <memchr+0xc>
 80089fc:	2000      	movs	r0, #0
 80089fe:	4770      	bx	lr
 8008a00:	7803      	ldrb	r3, [r0, #0]
 8008a02:	428b      	cmp	r3, r1
 8008a04:	d0fb      	beq.n	80089fe <memchr+0xa>
 8008a06:	3001      	adds	r0, #1
 8008a08:	e7f6      	b.n	80089f8 <memchr+0x4>
	...

08008a0c <__malloc_lock>:
 8008a0c:	b510      	push	{r4, lr}
 8008a0e:	4802      	ldr	r0, [pc, #8]	; (8008a18 <__malloc_lock+0xc>)
 8008a10:	f7ff fa0d 	bl	8007e2e <__retarget_lock_acquire_recursive>
 8008a14:	bd10      	pop	{r4, pc}
 8008a16:	46c0      	nop			; (mov r8, r8)
 8008a18:	20000894 	.word	0x20000894

08008a1c <__malloc_unlock>:
 8008a1c:	b510      	push	{r4, lr}
 8008a1e:	4802      	ldr	r0, [pc, #8]	; (8008a28 <__malloc_unlock+0xc>)
 8008a20:	f7ff fa06 	bl	8007e30 <__retarget_lock_release_recursive>
 8008a24:	bd10      	pop	{r4, pc}
 8008a26:	46c0      	nop			; (mov r8, r8)
 8008a28:	20000894 	.word	0x20000894

08008a2c <_free_r>:
 8008a2c:	b570      	push	{r4, r5, r6, lr}
 8008a2e:	0005      	movs	r5, r0
 8008a30:	2900      	cmp	r1, #0
 8008a32:	d010      	beq.n	8008a56 <_free_r+0x2a>
 8008a34:	1f0c      	subs	r4, r1, #4
 8008a36:	6823      	ldr	r3, [r4, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	da00      	bge.n	8008a3e <_free_r+0x12>
 8008a3c:	18e4      	adds	r4, r4, r3
 8008a3e:	0028      	movs	r0, r5
 8008a40:	f7ff ffe4 	bl	8008a0c <__malloc_lock>
 8008a44:	4a1d      	ldr	r2, [pc, #116]	; (8008abc <_free_r+0x90>)
 8008a46:	6813      	ldr	r3, [r2, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d105      	bne.n	8008a58 <_free_r+0x2c>
 8008a4c:	6063      	str	r3, [r4, #4]
 8008a4e:	6014      	str	r4, [r2, #0]
 8008a50:	0028      	movs	r0, r5
 8008a52:	f7ff ffe3 	bl	8008a1c <__malloc_unlock>
 8008a56:	bd70      	pop	{r4, r5, r6, pc}
 8008a58:	42a3      	cmp	r3, r4
 8008a5a:	d908      	bls.n	8008a6e <_free_r+0x42>
 8008a5c:	6821      	ldr	r1, [r4, #0]
 8008a5e:	1860      	adds	r0, r4, r1
 8008a60:	4283      	cmp	r3, r0
 8008a62:	d1f3      	bne.n	8008a4c <_free_r+0x20>
 8008a64:	6818      	ldr	r0, [r3, #0]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	1841      	adds	r1, r0, r1
 8008a6a:	6021      	str	r1, [r4, #0]
 8008a6c:	e7ee      	b.n	8008a4c <_free_r+0x20>
 8008a6e:	001a      	movs	r2, r3
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d001      	beq.n	8008a7a <_free_r+0x4e>
 8008a76:	42a3      	cmp	r3, r4
 8008a78:	d9f9      	bls.n	8008a6e <_free_r+0x42>
 8008a7a:	6811      	ldr	r1, [r2, #0]
 8008a7c:	1850      	adds	r0, r2, r1
 8008a7e:	42a0      	cmp	r0, r4
 8008a80:	d10b      	bne.n	8008a9a <_free_r+0x6e>
 8008a82:	6820      	ldr	r0, [r4, #0]
 8008a84:	1809      	adds	r1, r1, r0
 8008a86:	1850      	adds	r0, r2, r1
 8008a88:	6011      	str	r1, [r2, #0]
 8008a8a:	4283      	cmp	r3, r0
 8008a8c:	d1e0      	bne.n	8008a50 <_free_r+0x24>
 8008a8e:	6818      	ldr	r0, [r3, #0]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	1841      	adds	r1, r0, r1
 8008a94:	6011      	str	r1, [r2, #0]
 8008a96:	6053      	str	r3, [r2, #4]
 8008a98:	e7da      	b.n	8008a50 <_free_r+0x24>
 8008a9a:	42a0      	cmp	r0, r4
 8008a9c:	d902      	bls.n	8008aa4 <_free_r+0x78>
 8008a9e:	230c      	movs	r3, #12
 8008aa0:	602b      	str	r3, [r5, #0]
 8008aa2:	e7d5      	b.n	8008a50 <_free_r+0x24>
 8008aa4:	6821      	ldr	r1, [r4, #0]
 8008aa6:	1860      	adds	r0, r4, r1
 8008aa8:	4283      	cmp	r3, r0
 8008aaa:	d103      	bne.n	8008ab4 <_free_r+0x88>
 8008aac:	6818      	ldr	r0, [r3, #0]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	1841      	adds	r1, r0, r1
 8008ab2:	6021      	str	r1, [r4, #0]
 8008ab4:	6063      	str	r3, [r4, #4]
 8008ab6:	6054      	str	r4, [r2, #4]
 8008ab8:	e7ca      	b.n	8008a50 <_free_r+0x24>
 8008aba:	46c0      	nop			; (mov r8, r8)
 8008abc:	20000524 	.word	0x20000524

08008ac0 <_read_r>:
 8008ac0:	b570      	push	{r4, r5, r6, lr}
 8008ac2:	0004      	movs	r4, r0
 8008ac4:	0008      	movs	r0, r1
 8008ac6:	0011      	movs	r1, r2
 8008ac8:	001a      	movs	r2, r3
 8008aca:	2300      	movs	r3, #0
 8008acc:	4d05      	ldr	r5, [pc, #20]	; (8008ae4 <_read_r+0x24>)
 8008ace:	602b      	str	r3, [r5, #0]
 8008ad0:	f7fa f9ed 	bl	8002eae <_read>
 8008ad4:	1c43      	adds	r3, r0, #1
 8008ad6:	d103      	bne.n	8008ae0 <_read_r+0x20>
 8008ad8:	682b      	ldr	r3, [r5, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d000      	beq.n	8008ae0 <_read_r+0x20>
 8008ade:	6023      	str	r3, [r4, #0]
 8008ae0:	bd70      	pop	{r4, r5, r6, pc}
 8008ae2:	46c0      	nop			; (mov r8, r8)
 8008ae4:	2000089c 	.word	0x2000089c

08008ae8 <_fstat_r>:
 8008ae8:	2300      	movs	r3, #0
 8008aea:	b570      	push	{r4, r5, r6, lr}
 8008aec:	4d06      	ldr	r5, [pc, #24]	; (8008b08 <_fstat_r+0x20>)
 8008aee:	0004      	movs	r4, r0
 8008af0:	0008      	movs	r0, r1
 8008af2:	0011      	movs	r1, r2
 8008af4:	602b      	str	r3, [r5, #0]
 8008af6:	f7fa fa12 	bl	8002f1e <_fstat>
 8008afa:	1c43      	adds	r3, r0, #1
 8008afc:	d103      	bne.n	8008b06 <_fstat_r+0x1e>
 8008afe:	682b      	ldr	r3, [r5, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d000      	beq.n	8008b06 <_fstat_r+0x1e>
 8008b04:	6023      	str	r3, [r4, #0]
 8008b06:	bd70      	pop	{r4, r5, r6, pc}
 8008b08:	2000089c 	.word	0x2000089c

08008b0c <_isatty_r>:
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	b570      	push	{r4, r5, r6, lr}
 8008b10:	4d06      	ldr	r5, [pc, #24]	; (8008b2c <_isatty_r+0x20>)
 8008b12:	0004      	movs	r4, r0
 8008b14:	0008      	movs	r0, r1
 8008b16:	602b      	str	r3, [r5, #0]
 8008b18:	f7fa fa06 	bl	8002f28 <_isatty>
 8008b1c:	1c43      	adds	r3, r0, #1
 8008b1e:	d103      	bne.n	8008b28 <_isatty_r+0x1c>
 8008b20:	682b      	ldr	r3, [r5, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d000      	beq.n	8008b28 <_isatty_r+0x1c>
 8008b26:	6023      	str	r3, [r4, #0]
 8008b28:	bd70      	pop	{r4, r5, r6, pc}
 8008b2a:	46c0      	nop			; (mov r8, r8)
 8008b2c:	2000089c 	.word	0x2000089c

08008b30 <_init>:
 8008b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b32:	46c0      	nop			; (mov r8, r8)
 8008b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b36:	bc08      	pop	{r3}
 8008b38:	469e      	mov	lr, r3
 8008b3a:	4770      	bx	lr

08008b3c <_fini>:
 8008b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3e:	46c0      	nop			; (mov r8, r8)
 8008b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b42:	bc08      	pop	{r3}
 8008b44:	469e      	mov	lr, r3
 8008b46:	4770      	bx	lr
